import assert from 'assert';
import mapValues from 'lodash-es/mapValues';
import reduce from 'lodash-es/reduce';
import uniqBy from 'lodash-es/uniqBy';
import { __decorate, __metadata } from 'tslib';
import { createCurrency, createCurrencyRatio, Currency } from '@makerdao/currency';
import { LocalService, PublicService } from '@makerdao/services-core';
import times from 'lodash-es/times';
import BigNumber from 'bignumber.js';
import Web3 from 'web3';
import { utils } from 'ethers';
import has from 'lodash-es/has';
import padStart from 'lodash-es/padStart';
import ethAbi from 'web3-eth-abi';
import padEnd from 'lodash-es/padEnd';
import orderBy from 'lodash-es/orderBy';
import flatten from 'lodash-es/flatten';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var AAVE = "0x00ED8CcEF5351aF14aa6214e6153c39a5e1d1528";
var BAL = "0xe543f18a82bCEEEA6e0B19C15196582483b76a6d";
var BAT = "0x6B09a5b5Dc17eaa7D0B65bA898F58005A70736B5";
var CDP_MANAGER = "0x17c7D82597A3a07AEd1FDF1db560B7502AeB3ADf";
var CLIPPER_MOM = "0xaAE899cFDf60585F361135A55c954a3D52800533";
var COMP = "0x1Ed553FF89645FCDd55409Ae02462f1239f92511";
var DEPLOYER = "0x16Fb96a5fa0427Af0C8F7cF1eB4870231c8154B6";
var DGD = "0x6C0604d4b3EBB76DBA48cC0B5a54Bd0f260d962c";
var DSR_MANAGER = "0x23b8aD8B5B26351fD2C304aE23c8679Da03B9155";
var ETH = "0x7ba25F791FA76C3ef40AC98ed42634a8bC24c238";
var FAUCET = "0x50289fDAf1C8FE16E14fc28642a77C1A70943245";
var FLIPPER_MOM = "0x39028A393b3195262E54aA17928fa46f3FcCE58c";
var GET_CDPS = "0x70465b57f4948198330DF49e80cB0b7b4A8563e9";
var GNT = "0xdf3B1A36FF07CCCf5E61a60690Fc0170e238f499";
var GUSD = "0xBE0fe36494219EE23e42BFaaE77A5b48cF8c6E1C";
var ILK_REGISTRY = "0x14f7e74A26a0e6791523451d85129babf01cFd44";
var KNC = "0x061a2B2662AC2C1AAfe9b39Fc6e4c6730e01bE5E";
var LINK = "0x391e0c5B8bc5e2b7ABC12d330523C1D3e3F86ECE";
var LRC = "0x28DD44319c5a159f06AB5C5EE781760ee3200848";
var MANA = "0xe8F0f6067FA52572d6631517e9050C46769bEBf3";
var MATIC = "0xe8F0f6067FA52572d6631517e9050C46769bEBf3";
var WSTETH = "0xe8F0f6067FA52572d6631517e9050C46769bEBf3";
var MCD_ADM = "0xAe2f82b48f2C12bA5532879C4A718f8aAbF2f8E6";
var MCD_CAT = "0xc1F5856c066cfdD59D405DfCf1e77F667537bc99";
var MCD_CLIP_CALC_ETH_B = "0xb782CEe543F1a9A0724F32731f53DcdD198C2695";
var MCD_CLIP_CALC_ETH_C = "0x0E8D43bd507798476c1053165F9C061F1E000A09";
var MCD_CLIP_CALC_LINK_A = "0x79E6093AC9894936D2F61A29Bd2fFff44A71C047";
var MCD_CLIP_CALC_YFI_A = "0x0380BeA5D02A686aa19C1A6b940FC2D0EEA14351";
var MCD_CLIP_ETH_B = "0x31880D3A1E5cbF402b6F9840e7aDC6E7962b771B";
var MCD_CLIP_ETH_C = "0x2aF0c08B3dBB9D81A1D9eBea320Fd2f48f54c5D1";
var MCD_CLIP_LINK_A = "0xA15f6Fd90F2696e2B1BFdEB7F64A509718CA0dB9";
var MCD_CLIP_YFI_A = "0x79Cd1ED9D1df3a84e0f5C2261Ce73c588277892e";
var MCD_DAI = "0xe53793CA0F1a3991D6bfBc5929f89A9eDe65da44";
var MCD_DEPLOY = "0xEc93D8Ea996Da9Ffe359778F3DaE6134DF0de016";
var MCD_DOG = "0x970b3b28EBD466f2eC181630D4c3C93DfE280448";
var MCD_END = "0x4A504460C1ea6c1945D07619B546e4629fd2A5dB";
var MCD_ESM = "0xBFD5ccf89494B6A4A98c525f4E97f57C44f32CEB";
var MCD_FLAP = "0xBfd57220780aB21112008C2296C09B3a10d7E2ad";
var MCD_FLASH = "0x5bEE1570475945c67499251D974f7aef2455a112";
var MCD_FLIP_AAVE_A = "0xA99454a0B81aA2575D88508D01A017cdf448aF38";
var MCD_FLIP_BAL_A = "0x48C6Dc5C6709272A3044E7f710FbCe29aA642e25";
var MCD_FLIP_BAT_A = "0x9c0ff10dB728ebf5DA896DEDC782bA58F9dF3D57";
var MCD_FLIP_COMP_A = "0xCFea08DcA81ac1c528DE5Ef950C9EF8f5Ed5a96B";
var MCD_FLIP_DGD_A = "0x8bb51BBc9A7d5041029CB2300b6d7894351315dE";
var MCD_FLIP_ETH_A = "0xA7fD71f86a79B9595Bc74dB12226E7298097581B";
var MCD_FLIP_GNT_A = "0x0B164D1b88Dd89a22B463238D7f91210B5FA6745";
var MCD_FLIP_GUSD_A = "0xb9b3A6a8Ef7eea66b5eC8f65bf77855F2028AF41";
var MCD_FLIP_KNC_A = "0xDfd8aF1CE06Af665c1C5Ec6cb99F81C951b476a9";
var MCD_FLIP_LRC_A = "0xc162fedaC22ACea1AEDb1FfCd3f728dE8C346948";
var MCD_FLIP_MANA_A = "0x14ddb2fec281E19849318f3ce2a51FdE0139C1f1";
var MCD_FLIP_MATIC_A = "0x14ddb2fec281E19849318f3ce2a51FdE0139C1f1";
var MCD_FLIP_WSTETH_A = "0x14ddb2fec281E19849318f3ce2a51FdE0139C1f1";
var MCD_FLIP_OMG_A = "0xc84b50Ea1cB3f964eFE51961140057f7E69b09c1";
var MCD_FLIP_PAXUSD_A = "0x609149777E830169f43F773f478e16DB0207B6eC";
var MCD_FLIP_RENBTC_A = "0x1bb4Fd4e72201b37Fa1f705B0A6E2b562b7ab64e";
var MCD_FLIP_REP_A = "0x76DECA04eA3bd6bCF2F7220aa849CC80ab1A4eef";
var MCD_FLIP_TUSD_A = "0x39ac8af65D275193538af30Bfe137744A613430a";
var MCD_FLIP_UNI_A = "0x36EED8eBB359e7019be02F183A8313a1385CE872";
var MCD_FLIP_USDC_A = "0x77b9cd0d79DF8dA228685bc6502042E46E67Ee59";
var MCD_FLIP_USDC_B = "0x8e32119f52c6c5c2e4Da5dB8700e1b8C49D10273";
var MCD_FLIP_USDT_A = "0x2Fbe303a869F3868E84AA67e2Df6823a802A0944";
var MCD_FLIP_WBTC_A = "0x4f36410DD60A7190bD4763b0F0462Addb8A78F50";
var MCD_FLIP_ZRX_A = "0x51E48Bcd93785271e3c5611f6ab15810bf293218";
var MCD_FLOP = "0xbacD4966540aAF7223CC9DC39a3ea1E4322Aba78";
var MCD_GOV = "0x1c3ac7216250eDC5B9DaA5598DA0579688b9dbD5";
var MCD_GOV_ACTIONS = "0x639146631B329Dd28f71e0a9E5bC1b080943a3D4";
var MCD_IAM_AUTO_LINE = "0x191c015d683F3c5A2f70234b3780863fb200FB69";
var MCD_IOU = "0x9fb9B0CCb0b6bcA8ff7667c1c1733F4469e27Af1";
var MCD_JOIN_AAVE_A = "0x20EB41099150cF92A0576409520b72a0AD870c75";
var MCD_JOIN_BAL_A = "0xbCaf9D36e65DfB2f098986D7e35420539EDe50E4";
var MCD_JOIN_BAT_A = "0xdB8848ea69cCE3f7f41949D274899641e558cDf4";
var MCD_JOIN_COMP_A = "0xDBb349cbFB22540B90995298CE3909Dd4Fa2C75d";
var MCD_JOIN_DAI = "0xd34835EaE60dA418abfc538B7b55332fC5F10340";
var MCD_JOIN_DGD_A = "0xd324BC539B85e6DFe08005c4D261d0ff22b0A34C";
var MCD_JOIN_ETH_A = "0x1fD87e7ddF2A2f22ac5fb8F617A44214f17B883c";
var MCD_JOIN_ETH_B = "0x4aF6E9FA188161FD283DC8d51619615d00ef3F01";
var MCD_JOIN_ETH_C = "0xA5DD0E5906fAc83862581C5DCA85CF926ABFa09b";
var MCD_JOIN_GNT_A = "0xfEB7149A008b52581F31717Fad5C5A23ea28cAE4";
var MCD_JOIN_GUSD_A = "0x2006CAA6901322b195e27aC007d2de1C09B7f19E";
var MCD_JOIN_KNC_A = "0x15ed0b56FC19773832011Da89118c3dd41072091";
var MCD_JOIN_LINK_A = "0x453085B32e086994492706b8222fee21E8A098A3";
var MCD_JOIN_LRC_A = "0xa26B57185e56375dd20225aDcEbd00d7e82681e4";
var MCD_JOIN_MANA_A = "0x6261bc3816Fa6A15dAcC68ff06baB082905f06bC";
var MCD_JOIN_MATIC_A = "0x6261bc3816Fa6A15dAcC68ff06baB082905f06bC";
var MCD_JOIN_WSTETH_A = "0x6261bc3816Fa6A15dAcC68ff06baB082905f06bC";
var MCD_JOIN_OMG_A = "0x7581e647b7b5d522B198EF44F51E1121b3D837B0";
var MCD_JOIN_PAXUSD_A = "0xe1131FBFF225FfC0ebdc4233852fdC415e4d2B6b";
var MCD_JOIN_RENBTC_A = "0x12F30DFCdCB82B7AAE11513fFcc290EbbdF97124";
var MCD_JOIN_REP_A = "0xcf4a441593Fbf1Bf56960674C5a3a18049C7bbe2";
var MCD_JOIN_TUSD_A = "0x8A74211B5fC144A846fD1daA4dC8ABbB6268E18f";
var MCD_JOIN_UNI_A = "0x5d2132779D43A0B64F1f3e824B8A3163438358e8";
var MCD_JOIN_USDC_A = "0xE425CA42d0CB22D0D82366f6B811d559cff437B4";
var MCD_JOIN_USDC_B = "0x883c76966eA1D1AFEC54a1c20f84A57a287BB021";
var MCD_JOIN_USDT_A = "0x493226477349795d74E106Eed6a2B6a5D437Edab";
var MCD_JOIN_WBTC_A = "0xE6666822E10D3c5c33726Ea732506AaA50Ea0C88";
var MCD_JOIN_YFI_A = "0x698E14422A7739D268644b2794C1A9e49Ef3960B";
var MCD_JOIN_ZRX_A = "0x2B0B998110C0038336a8d5609c4E3A0AC35Af0f4";
var MCD_JUG = "0xd6D7C74729bB83c35138E54b8d5530ea96920c92";
var MCD_PAUSE = "0x6A309d0a82643cf531f6f7c2B21033D2AE7d016C";
var MCD_PAUSE_PROXY = "0x3C55dc3113a0a67Ee240e5149c35399d6BeC9E39";
var MCD_POT = "0x3F35940dD9f42F7560fa08F506c81d99fed870a7";
var MCD_SPOT = "0xb379BdC949F09e0E1c866785D1896B763E1387b0";
var MCD_VAT = "0x6D6e3B9B602a0a37c820F2383A1DD0EC02B5196d";
var MCD_VOW = "0xa64D95634d839445283f71137f9CeD3f1405aad5";
var MULTICALL = "0x5AE5677589cf9992290918CcD1828dcBD73D842c";
var OMG = "0x6efDF221190D139DD29bdbC0aB984165C6cC6C4b";
var OSM_MOM = "0x5e5baAcFFefa9958B64894141bE27d8f2a9B92e6";
var PAXUSD = "0x299051753C11BD80668f515405EF502d98F35588";
var PIP_AAVE = "0x302DBc5F544f6Fe18f1CfF1bb5e971ba13236F4F";
var PIP_BAL = "0xc3e27cDDbb7A06f40Ded620a67dB858643da39C2";
var PIP_BAT = "0xdD35201726c511474e7E1EE426B5C78B014AddCc";
var PIP_COMP = "0xEd9521Ba67e5961401073C8F57A10396B9296Ff2";
var PIP_DGD = "0xb564f1dC7D220f8E20de45547de71620543c0053";
var PIP_ETH = "0x2d3AdFCa1e6aD360A138cBCF2F286f70a5Ff614A";
var PIP_GNT = "0x9783d28387f5097d72397388d98c52Ca9b18dec8";
var PIP_GUSD = "0x629cA18b145A870eFb230CF89aA626a4B2D3b228";
var PIP_KNC = "0x5e73B1F57f673EC875C1624D7C13F06Ef8259b23";
var PIP_LINK = "0x161AD3D1336814B895995D5EE8F1510ec3ccEA8C";
var PIP_LRC = "0x519a23560835856af262d7d829e1b9d89784DaA7";
var PIP_MANA = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var PIP_MATIC = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var PIP_WSTETH = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var PIP_OMG = "0xE0d81d47aC1e791dd2559013cf1fF005e619d733";
var PIP_PAXUSD = "0xB5e8D7CcF287cF4adaBF00c8529e81cd416b9fa7";
var PIP_RENBTC = "0xB3CcF0B63055312b73530D1D0810c862A0690e95";
var PIP_REP = "0x80f178c7b47cb635Ceb12aBB891338744e98365C";
var PIP_TUSD = "0x870Cc2aFa004e22a49CAEa7392CC3bCD2ca96A3A";
var PIP_UNI = "0xF6bbB12EEE8B45214B2c8A8F9487982a35b7Ae81";
var PIP_USDC = "0xA70B7c2a55a76f89b64b4b15381FfF87279dD3d7";
var PIP_USDT = "0xc6c39b56d3dafcb213b4344D54e70E232b10ca48";
var PIP_WBTC = "0x298E3eb3C76938DA922EF01b99c87dF156985701";
var PIP_YFI = "0x174666d4101f6294EBa19D0846Ec85176D28F2e6";
var PIP_ZRX = "0xbD4d6688B679F27Bf6829922A4AE4E43D29153E4";
var PROXY_ACTIONS = "0x04De75eD338D41D2E901bf703179D1049883aF5b";
var PROXY_ACTIONS_DSR = "0x55a191069a8ACE1589c9d44E8dbB6D1051C76e20";
var PROXY_ACTIONS_END = "0xd97fd1B5867cC71AfA32A0c36d38102241856Cde";
var PROXY_DEPLOYER = "0xf0beDfD610eE7A7e3347551Fff56E1173B726807";
var PROXY_FACTORY = "0x3ea503Fb236e6eE3B4d48b6Bd96Ba5F7Cf68AF94";
var PROXY_PAUSE_ACTIONS = "0xF5303EF974273A97bA92436E39C304618Ffaa5c0";
var PROXY_REGISTRY = "0x72b59ACcB5a9a9e47296fbeF741bF2Bc82FFDE62";
var RENBTC = "0x787b559e0A2BE9F1FCfa7824eCE7dC315f2fAF57";
var REP = "0x2bB387C549c61E7fCe9DDcC9ca19980D696643a4";
var TUSD = "0xd7e93C4B43A55fe3DbEBe4c89991769d01c3E76d";
var UNI = "0xb6350CdB0eE579357589B72b38110BB306F34Fa9";
var USDC = "0x5E6085775Cd0B41fC70d1A6B48a0451bf7aCa801";
var USDT = "0x537d6F0138da9FdAF5aeF1Df9E8AC8d0D73005d6";
var VAL_AAVE = "0x302DBc5F544f6Fe18f1CfF1bb5e971ba13236F4F";
var VAL_BAL = "0xc3e27cDDbb7A06f40Ded620a67dB858643da39C2";
var VAL_BAT = "0xdD35201726c511474e7E1EE426B5C78B014AddCc";
var VAL_COMP = "0xEd9521Ba67e5961401073C8F57A10396B9296Ff2";
var VAL_DGD = "0xb564f1dC7D220f8E20de45547de71620543c0053";
var VAL_ETH = "0x2d3AdFCa1e6aD360A138cBCF2F286f70a5Ff614A";
var VAL_GNT = "0x9783d28387f5097d72397388d98c52Ca9b18dec8";
var VAL_GUSD = "0x629cA18b145A870eFb230CF89aA626a4B2D3b228";
var VAL_KNC = "0x5e73B1F57f673EC875C1624D7C13F06Ef8259b23";
var VAL_LINK = "0x161AD3D1336814B895995D5EE8F1510ec3ccEA8C";
var VAL_LRC = "0x519a23560835856af262d7d829e1b9d89784DaA7";
var VAL_MANA = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var VAL_MATIC = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var VAL_WSTETH = "0x7294588Da9cA5494fa6861A10B1Cc26096dC3b11";
var VAL_OMG = "0xE0d81d47aC1e791dd2559013cf1fF005e619d733";
var VAL_PAXUSD = "0xB5e8D7CcF287cF4adaBF00c8529e81cd416b9fa7";
var VAL_RENBTC = "0xB3CcF0B63055312b73530D1D0810c862A0690e95";
var VAL_REP = "0x80f178c7b47cb635Ceb12aBB891338744e98365C";
var VAL_TUSD = "0x870Cc2aFa004e22a49CAEa7392CC3bCD2ca96A3A";
var VAL_UNI = "0xF6bbB12EEE8B45214B2c8A8F9487982a35b7Ae81";
var VAL_USDC = "0xA70B7c2a55a76f89b64b4b15381FfF87279dD3d7";
var VAL_USDT = "0xc6c39b56d3dafcb213b4344D54e70E232b10ca48";
var VAL_WBTC = "0x298E3eb3C76938DA922EF01b99c87dF156985701";
var VAL_YFI = "0x174666d4101f6294EBa19D0846Ec85176D28F2e6";
var VAL_ZRX = "0xbD4d6688B679F27Bf6829922A4AE4E43D29153E4";
var VOTE_DELEGATE_FACTORY = "0xe95949a8C0373933dfd7110a66705eb7507Cc5Fd";
var VOTE_PROXY_FACTORY = "0x45204Df60612c9047Ba1cc483a957290De72180f";
var WBTC = "0x9dFCC19cc49f9961020a152629Db481F12b6b4Ba";
var YFI = "0x00727147Df379B69BB7bbf84C8c95e4eaf3e2c96";
var ZRX = "0x2978B18F7c68B2957e701FC6D82C8De5B55833f2";
var MIGRATION = "0x2978B18F7c68B2957e701FC6D82C8De5B55833f2";
var MCD_JOIN_SAI = "0x565e5E6d6C43Aff09A5b3C2b33d710d9c2c63e06";
var SAI = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var OLD_MCD_CAT = "0x2125C30dA5DcA0819aEC5e4cdbF58Bfe91918e43";
var UNIV2DAIETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2DAIETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2DAIETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2DAIETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2WBTCETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2WBTCETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2WBTCETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2WBTCETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2USDCETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2USDCETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2USDCETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2USDCETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2DAIUSDC = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2DAIUSDC = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2DAIUSDC_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2DAIUSDC_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2ETHUSDT = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2ETHUSDT = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2ETHUSDT_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2ETHUSDT_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2LINKETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2LINKETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2LINKETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2LINKETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2UNIETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2UNIETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2UNIETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2UNIETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2WBTCDAI = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2WBTCDAI = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2WBTCDAI_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2WBTCDAI_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2AAVEETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2AAVEETH = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2AAVEETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2AAVEETH_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var UNIV2DAIUSDT = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var PIP_UNIV2DAIUSDT = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_JOIN_UNIV2DAIUSDT_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var MCD_FLIP_UNIV2DAIUSDT_A = "0xC226F3CD13d508bc319F4f4290172748199d6612";
var testnetAddresses = {
	AAVE: AAVE,
	BAL: BAL,
	BAT: BAT,
	CDP_MANAGER: CDP_MANAGER,
	CLIPPER_MOM: CLIPPER_MOM,
	COMP: COMP,
	DEPLOYER: DEPLOYER,
	DGD: DGD,
	DSR_MANAGER: DSR_MANAGER,
	ETH: ETH,
	FAUCET: FAUCET,
	FLIPPER_MOM: FLIPPER_MOM,
	GET_CDPS: GET_CDPS,
	GNT: GNT,
	GUSD: GUSD,
	ILK_REGISTRY: ILK_REGISTRY,
	KNC: KNC,
	LINK: LINK,
	LRC: LRC,
	MANA: MANA,
	MATIC: MATIC,
	WSTETH: WSTETH,
	MCD_ADM: MCD_ADM,
	MCD_CAT: MCD_CAT,
	MCD_CLIP_CALC_ETH_B: MCD_CLIP_CALC_ETH_B,
	MCD_CLIP_CALC_ETH_C: MCD_CLIP_CALC_ETH_C,
	MCD_CLIP_CALC_LINK_A: MCD_CLIP_CALC_LINK_A,
	MCD_CLIP_CALC_YFI_A: MCD_CLIP_CALC_YFI_A,
	MCD_CLIP_ETH_B: MCD_CLIP_ETH_B,
	MCD_CLIP_ETH_C: MCD_CLIP_ETH_C,
	MCD_CLIP_LINK_A: MCD_CLIP_LINK_A,
	MCD_CLIP_YFI_A: MCD_CLIP_YFI_A,
	MCD_DAI: MCD_DAI,
	MCD_DEPLOY: MCD_DEPLOY,
	MCD_DOG: MCD_DOG,
	MCD_END: MCD_END,
	MCD_ESM: MCD_ESM,
	MCD_FLAP: MCD_FLAP,
	MCD_FLASH: MCD_FLASH,
	MCD_FLIP_AAVE_A: MCD_FLIP_AAVE_A,
	MCD_FLIP_BAL_A: MCD_FLIP_BAL_A,
	MCD_FLIP_BAT_A: MCD_FLIP_BAT_A,
	MCD_FLIP_COMP_A: MCD_FLIP_COMP_A,
	MCD_FLIP_DGD_A: MCD_FLIP_DGD_A,
	MCD_FLIP_ETH_A: MCD_FLIP_ETH_A,
	MCD_FLIP_GNT_A: MCD_FLIP_GNT_A,
	MCD_FLIP_GUSD_A: MCD_FLIP_GUSD_A,
	MCD_FLIP_KNC_A: MCD_FLIP_KNC_A,
	MCD_FLIP_LRC_A: MCD_FLIP_LRC_A,
	MCD_FLIP_MANA_A: MCD_FLIP_MANA_A,
	MCD_FLIP_MATIC_A: MCD_FLIP_MATIC_A,
	MCD_FLIP_WSTETH_A: MCD_FLIP_WSTETH_A,
	MCD_FLIP_OMG_A: MCD_FLIP_OMG_A,
	MCD_FLIP_PAXUSD_A: MCD_FLIP_PAXUSD_A,
	MCD_FLIP_RENBTC_A: MCD_FLIP_RENBTC_A,
	MCD_FLIP_REP_A: MCD_FLIP_REP_A,
	MCD_FLIP_TUSD_A: MCD_FLIP_TUSD_A,
	MCD_FLIP_UNI_A: MCD_FLIP_UNI_A,
	MCD_FLIP_USDC_A: MCD_FLIP_USDC_A,
	MCD_FLIP_USDC_B: MCD_FLIP_USDC_B,
	MCD_FLIP_USDT_A: MCD_FLIP_USDT_A,
	MCD_FLIP_WBTC_A: MCD_FLIP_WBTC_A,
	MCD_FLIP_ZRX_A: MCD_FLIP_ZRX_A,
	MCD_FLOP: MCD_FLOP,
	MCD_GOV: MCD_GOV,
	MCD_GOV_ACTIONS: MCD_GOV_ACTIONS,
	MCD_IAM_AUTO_LINE: MCD_IAM_AUTO_LINE,
	MCD_IOU: MCD_IOU,
	MCD_JOIN_AAVE_A: MCD_JOIN_AAVE_A,
	MCD_JOIN_BAL_A: MCD_JOIN_BAL_A,
	MCD_JOIN_BAT_A: MCD_JOIN_BAT_A,
	MCD_JOIN_COMP_A: MCD_JOIN_COMP_A,
	MCD_JOIN_DAI: MCD_JOIN_DAI,
	MCD_JOIN_DGD_A: MCD_JOIN_DGD_A,
	MCD_JOIN_ETH_A: MCD_JOIN_ETH_A,
	MCD_JOIN_ETH_B: MCD_JOIN_ETH_B,
	MCD_JOIN_ETH_C: MCD_JOIN_ETH_C,
	MCD_JOIN_GNT_A: MCD_JOIN_GNT_A,
	MCD_JOIN_GUSD_A: MCD_JOIN_GUSD_A,
	MCD_JOIN_KNC_A: MCD_JOIN_KNC_A,
	MCD_JOIN_LINK_A: MCD_JOIN_LINK_A,
	MCD_JOIN_LRC_A: MCD_JOIN_LRC_A,
	MCD_JOIN_MANA_A: MCD_JOIN_MANA_A,
	MCD_JOIN_MATIC_A: MCD_JOIN_MATIC_A,
	MCD_JOIN_WSTETH_A: MCD_JOIN_WSTETH_A,
	MCD_JOIN_OMG_A: MCD_JOIN_OMG_A,
	MCD_JOIN_PAXUSD_A: MCD_JOIN_PAXUSD_A,
	MCD_JOIN_RENBTC_A: MCD_JOIN_RENBTC_A,
	MCD_JOIN_REP_A: MCD_JOIN_REP_A,
	MCD_JOIN_TUSD_A: MCD_JOIN_TUSD_A,
	MCD_JOIN_UNI_A: MCD_JOIN_UNI_A,
	MCD_JOIN_USDC_A: MCD_JOIN_USDC_A,
	MCD_JOIN_USDC_B: MCD_JOIN_USDC_B,
	MCD_JOIN_USDT_A: MCD_JOIN_USDT_A,
	MCD_JOIN_WBTC_A: MCD_JOIN_WBTC_A,
	MCD_JOIN_YFI_A: MCD_JOIN_YFI_A,
	MCD_JOIN_ZRX_A: MCD_JOIN_ZRX_A,
	MCD_JUG: MCD_JUG,
	MCD_PAUSE: MCD_PAUSE,
	MCD_PAUSE_PROXY: MCD_PAUSE_PROXY,
	MCD_POT: MCD_POT,
	MCD_SPOT: MCD_SPOT,
	MCD_VAT: MCD_VAT,
	MCD_VOW: MCD_VOW,
	MULTICALL: MULTICALL,
	OMG: OMG,
	OSM_MOM: OSM_MOM,
	PAXUSD: PAXUSD,
	PIP_AAVE: PIP_AAVE,
	PIP_BAL: PIP_BAL,
	PIP_BAT: PIP_BAT,
	PIP_COMP: PIP_COMP,
	PIP_DGD: PIP_DGD,
	PIP_ETH: PIP_ETH,
	PIP_GNT: PIP_GNT,
	PIP_GUSD: PIP_GUSD,
	PIP_KNC: PIP_KNC,
	PIP_LINK: PIP_LINK,
	PIP_LRC: PIP_LRC,
	PIP_MANA: PIP_MANA,
	PIP_MATIC: PIP_MATIC,
	PIP_WSTETH: PIP_WSTETH,
	PIP_OMG: PIP_OMG,
	PIP_PAXUSD: PIP_PAXUSD,
	PIP_RENBTC: PIP_RENBTC,
	PIP_REP: PIP_REP,
	PIP_TUSD: PIP_TUSD,
	PIP_UNI: PIP_UNI,
	PIP_USDC: PIP_USDC,
	PIP_USDT: PIP_USDT,
	PIP_WBTC: PIP_WBTC,
	PIP_YFI: PIP_YFI,
	PIP_ZRX: PIP_ZRX,
	PROXY_ACTIONS: PROXY_ACTIONS,
	PROXY_ACTIONS_DSR: PROXY_ACTIONS_DSR,
	PROXY_ACTIONS_END: PROXY_ACTIONS_END,
	PROXY_DEPLOYER: PROXY_DEPLOYER,
	PROXY_FACTORY: PROXY_FACTORY,
	PROXY_PAUSE_ACTIONS: PROXY_PAUSE_ACTIONS,
	PROXY_REGISTRY: PROXY_REGISTRY,
	RENBTC: RENBTC,
	REP: REP,
	TUSD: TUSD,
	UNI: UNI,
	USDC: USDC,
	USDT: USDT,
	VAL_AAVE: VAL_AAVE,
	VAL_BAL: VAL_BAL,
	VAL_BAT: VAL_BAT,
	VAL_COMP: VAL_COMP,
	VAL_DGD: VAL_DGD,
	VAL_ETH: VAL_ETH,
	VAL_GNT: VAL_GNT,
	VAL_GUSD: VAL_GUSD,
	VAL_KNC: VAL_KNC,
	VAL_LINK: VAL_LINK,
	VAL_LRC: VAL_LRC,
	VAL_MANA: VAL_MANA,
	VAL_MATIC: VAL_MATIC,
	VAL_WSTETH: VAL_WSTETH,
	VAL_OMG: VAL_OMG,
	VAL_PAXUSD: VAL_PAXUSD,
	VAL_RENBTC: VAL_RENBTC,
	VAL_REP: VAL_REP,
	VAL_TUSD: VAL_TUSD,
	VAL_UNI: VAL_UNI,
	VAL_USDC: VAL_USDC,
	VAL_USDT: VAL_USDT,
	VAL_WBTC: VAL_WBTC,
	VAL_YFI: VAL_YFI,
	VAL_ZRX: VAL_ZRX,
	VOTE_DELEGATE_FACTORY: VOTE_DELEGATE_FACTORY,
	VOTE_PROXY_FACTORY: VOTE_PROXY_FACTORY,
	WBTC: WBTC,
	YFI: YFI,
	ZRX: ZRX,
	MIGRATION: MIGRATION,
	MCD_JOIN_SAI: MCD_JOIN_SAI,
	SAI: SAI,
	OLD_MCD_CAT: OLD_MCD_CAT,
	UNIV2DAIETH: UNIV2DAIETH,
	PIP_UNIV2DAIETH: PIP_UNIV2DAIETH,
	MCD_JOIN_UNIV2DAIETH_A: MCD_JOIN_UNIV2DAIETH_A,
	MCD_FLIP_UNIV2DAIETH_A: MCD_FLIP_UNIV2DAIETH_A,
	UNIV2WBTCETH: UNIV2WBTCETH,
	PIP_UNIV2WBTCETH: PIP_UNIV2WBTCETH,
	MCD_JOIN_UNIV2WBTCETH_A: MCD_JOIN_UNIV2WBTCETH_A,
	MCD_FLIP_UNIV2WBTCETH_A: MCD_FLIP_UNIV2WBTCETH_A,
	UNIV2USDCETH: UNIV2USDCETH,
	PIP_UNIV2USDCETH: PIP_UNIV2USDCETH,
	MCD_JOIN_UNIV2USDCETH_A: MCD_JOIN_UNIV2USDCETH_A,
	MCD_FLIP_UNIV2USDCETH_A: MCD_FLIP_UNIV2USDCETH_A,
	UNIV2DAIUSDC: UNIV2DAIUSDC,
	PIP_UNIV2DAIUSDC: PIP_UNIV2DAIUSDC,
	MCD_JOIN_UNIV2DAIUSDC_A: MCD_JOIN_UNIV2DAIUSDC_A,
	MCD_FLIP_UNIV2DAIUSDC_A: MCD_FLIP_UNIV2DAIUSDC_A,
	UNIV2ETHUSDT: UNIV2ETHUSDT,
	PIP_UNIV2ETHUSDT: PIP_UNIV2ETHUSDT,
	MCD_JOIN_UNIV2ETHUSDT_A: MCD_JOIN_UNIV2ETHUSDT_A,
	MCD_FLIP_UNIV2ETHUSDT_A: MCD_FLIP_UNIV2ETHUSDT_A,
	UNIV2LINKETH: UNIV2LINKETH,
	PIP_UNIV2LINKETH: PIP_UNIV2LINKETH,
	MCD_JOIN_UNIV2LINKETH_A: MCD_JOIN_UNIV2LINKETH_A,
	MCD_FLIP_UNIV2LINKETH_A: MCD_FLIP_UNIV2LINKETH_A,
	UNIV2UNIETH: UNIV2UNIETH,
	PIP_UNIV2UNIETH: PIP_UNIV2UNIETH,
	MCD_JOIN_UNIV2UNIETH_A: MCD_JOIN_UNIV2UNIETH_A,
	MCD_FLIP_UNIV2UNIETH_A: MCD_FLIP_UNIV2UNIETH_A,
	UNIV2WBTCDAI: UNIV2WBTCDAI,
	PIP_UNIV2WBTCDAI: PIP_UNIV2WBTCDAI,
	MCD_JOIN_UNIV2WBTCDAI_A: MCD_JOIN_UNIV2WBTCDAI_A,
	MCD_FLIP_UNIV2WBTCDAI_A: MCD_FLIP_UNIV2WBTCDAI_A,
	UNIV2AAVEETH: UNIV2AAVEETH,
	PIP_UNIV2AAVEETH: PIP_UNIV2AAVEETH,
	MCD_JOIN_UNIV2AAVEETH_A: MCD_JOIN_UNIV2AAVEETH_A,
	MCD_FLIP_UNIV2AAVEETH_A: MCD_FLIP_UNIV2AAVEETH_A,
	UNIV2DAIUSDT: UNIV2DAIUSDT,
	PIP_UNIV2DAIUSDT: PIP_UNIV2DAIUSDT,
	MCD_JOIN_UNIV2DAIUSDT_A: MCD_JOIN_UNIV2DAIUSDT_A,
	MCD_FLIP_UNIV2DAIUSDT_A: MCD_FLIP_UNIV2DAIUSDT_A
};

var MULTICALL$1 = "0xb8c864B60e9467398800Df34da39BF4f0c459461";
var FAUCET$1 = "0xa473CdDD6E4FAc72481dc36f39A409D86980D187";
var MCD_DEPLOY$1 = "0xc09880a0D6d06fa18C8bDC9dF2E203F0d0124fa1";
var MCD_GOV$1 = "0xc5E4eaB513A7CD12b2335e8a0D57273e13D499f7";
var GOV_GUARD = "0xB9b861e8F9b29322815260B6883Bbe1DBC91dA8A";
var MCD_ADM$1 = "0x33Ed584fc655b08b2bca45E1C5b5f07c98053bC1";
var MCD_VAT$1 = "0xB966002DDAa2Baf48369f5015329750019736031";
var MCD_JUG$1 = "0xC90C99FE9B5d5207A03b9F28A6E8A19C0e558916";
var MCD_DOG$1 = "0x5cf85A37Dbd28A239698B4F9aA9a03D55C04F292";
var ILK_REGISTRY$1 = "0x525FaC4CEc48a4eF2FBb0A72355B6255f8D5f79e";
var CLIPPER_MOM$1 = "0xC67fFD490903521F778b2A3B2A13D0FC0Be96F98";
var MCD_CLIP_LINK_A$1 = "0x42cbA983D2403003af554fec0e68dAC4920906CC";
var MCD_CLIP_CALC_LINK_A$1 = "0xE3Cf29E132EFad92d604Fa5C86AA21b7c7fBB76e";
var MCD_CAT$1 = "0xd744377001FD3411d7d0018F66E2271CB215f6fd";
var MCD_VOW$1 = "0x23f78612769b9013b3145E43896Fa1578cAa2c2a";
var MCD_JOIN_DAI$1 = "0x6a60b7070befb2bfc964F646efDF70388320f4E0";
var MCD_FLAP$1 = "0x8E4B877d7eD4584b22e1508ffDAA8Ae4f6927397";
var MCD_FLOP$1 = "0x742D041dFBA61110Bd886509CB299DF6A521B352";
var MCD_PAUSE$1 = "0xefcd235B1f13e7fC5eab1d05C910d3c390b3439F";
var MCD_PAUSE_PROXY$1 = "0x5DCdbD3cCF9B09EAAD03bc5f50fA2B3d3ACA0121";
var MCD_GOV_ACTIONS$1 = "0x5857F3e0e6Fb75658037b3c3410b7446b985B353";
var MCD_DAI$1 = "0x11fE4B6AE13d2a6055C8D9cF65c55bac32B5d844";
var MCD_SPOT$1 = "0xACe2A9106ec175bd56ec05C9E38FE1FDa8a1d758";
var MCD_POT$1 = "0x50672F0a14B40051B65958818a7AcA3D54Bd81Af";
var MCD_END$1 = "0xDb1d3edb80d3faA1B7257Ab4018A609E327FA50D";
var MCD_ESM$1 = "0x105BF37e7D81917b6fEACd6171335B4838e53D5e";
var PROXY_ACTIONS$1 = "0x4023f89983Ece35e227c49806aFc13Bc0248d178";
var PROXY_ACTIONS_END$1 = "0xBbA4aBF0a12738f093cFD2199C5497044bAa68A8";
var PROXY_ACTIONS_DSR$1 = "0x15679CdbDb284fe07Eff3809150126697c6e3Dd6";
var CDP_MANAGER$1 = "0xdcBf58c9640A7bd0e062f8092d70fb981Bb52032";
var GET_CDPS$1 = "0x7843fd599F5382328DeBB45255deB3E2e0DEC876";
var OSM_MOM$1 = "0xEdB6b497D2e18A33130CB0D2b70343E6Dcd9EE86";
var FLIPPER_MOM$1 = "0x7ceCdf6b214a3eBA1589eB8B844fB6Cb12B67Bd7";
var PROXY_FACTORY$1 = "0x84eFB9c18059394172D0d69A3E58B03320001871";
var PROXY_REGISTRY$1 = "0x46759093D8158db8BB555aC7C6F98070c56169ce";
var PROXY_PAUSE_ACTIONS$1 = "0x8D1187FCa9A104211bd25c689C08718AD8730C83";
var PROXY_DEPLOYER$1 = "0xc9476Fd378de5b0de5C4280D4323f6F89f723c15";
var ETH$1 = "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6";
var PIP_ETH$1 = "0x94588e35fF4d2E99ffb8D5095F35d1E37d6dDf12";
var MCD_JOIN_ETH_A$1 = "0x2372031bB0fC735722AA4009AeBf66E8BEAF4BA1";
var MCD_JOIN_ETH_B$1 = "0x1710BB6dF1967679bb1f247135794692F7963B46";
var MCD_JOIN_ETH_C$1 = "0x16e6490744d4B3728966f8e72416c005EB3dEa79";
var BAT$1 = "0x75645f86e90a1169e697707C813419977ea26779";
var PIP_BAT$1 = "0x2BA78cb27044edCb715b03685D4bf74261170a70";
var MCD_JOIN_BAT_A$1 = "0xfea8C23D32e4bA46d90AeD2445fBD099010eAdF5";
var USDC$1 = "0x6Fb5ef893d44F4f88026430d82d4ef269543cB23";
var PIP_USDC$1 = "0x838212865E2c2f4F7226fCc0A3EFc3EB139eC661";
var MCD_JOIN_USDC_A$1 = "0x33E88C8b3530e2f19050b24f44AcB78C7114AF46";
var MCD_JOIN_USDC_B$1 = "0x0Dc70CC4505c1952e719C9C740608A75Ca9e299e";
var WBTC$1 = "0x7ccF0411c7932B99FC3704d68575250F032e3bB7";
var PIP_WBTC$1 = "0xE7de200a3a29E9049E378b52BD36701A0Ce68C3b";
var MCD_JOIN_WBTC_A$1 = "0x3cbE712a12e651eEAF430472c0C1BF1a2a18939D";
var TUSD$1 = "0xe0B3D300E2e09c1Fd01252287dDbC70A7730ffB0";
var PIP_TUSD$1 = "0x0ce19eA2C568890e63083652f205554C927a0caa";
var MCD_JOIN_TUSD_A$1 = "0x5BC597f00d74fAcEE53Be784f0B7Ace63b4e2EBe";
var ZRX$1 = "0x96E0C18524789ED3e62CD9F56aAEc7cEAC78725a";
var PIP_ZRX$1 = "0xe9245D25F3265E9A36DcCDC72B0B5dE1eeACD4cD";
var MCD_JOIN_ZRX_A$1 = "0xC279765B3f930742167dB91271f13353336B6C72";
var KNC$1 = "0x9A58801cf901486Df9323bcE83A7684915DBAE54";
var PIP_KNC$1 = "0xCB772363E2DEc06942edbc5E697F4A9114B5989c";
var MCD_JOIN_KNC_A$1 = "0xA48f0d5DA642928BC1F5dB9De5F5d3D466500075";
var MANA$1 = "0x347fceA8b4fD1a46e2c0DB8F79e22d293c2F8513";
var PIP_MANA$1 = "0x001eDD66a5Cc9268159Cf24F3dC0AdcE456AAAAb";
var MCD_JOIN_MANA_A$1 = "0xF4a1E7Dd685b4EaFBE5d0E70e20c153dee2E290b";
var PAXUSD$1 = "0x4547863912Fe2d17D3827704138957a8317E8dCD";
var PIP_PAXUSD$1 = "0xdF8474337c9D3f66C0b71d31C7D3596E4F517457";
var MCD_JOIN_PAXUSD_A$1 = "0x8Ef390647A74150a79EC73FE120EaaF8bE9eEdf0";
var USDT$1 = "0x5858f25cc225525A7494f76d90A6549749b3030B";
var PIP_USDT$1 = "0x1fA3B8DAeE1BCEe33990f66F1a99993daD14D855";
var MCD_JOIN_USDT_A$1 = "0xa8C62cC41AbF8A199FB484Ea363b90C3e9E01d86";
var LRC$1 = "0xe32aC5b19051728421A8F4A8a5757D0e127a14F6";
var PIP_LRC$1 = "0x5AD3A560BB125d00db8E94915232BA8f6166967C";
var MCD_JOIN_LRC_A$1 = "0x12af538aCf746c0BBe076E5eBAE678e022E1F5f6";
var LINK$1 = "0x4724A967A4F7E42474Be58AbdF64bF38603422FF";
var PIP_LINK$1 = "0x75B4e743772D25a7998F4230cb016ddCF2c52629";
var MCD_JOIN_LINK_A$1 = "0x4420FD4E5C414189708376F3fBAA4dCA6277369a";
var COMP$1 = "0x8032dce0b793C21B8F7B648C01224c3b557271ED";
var PIP_COMP$1 = "0xc3d677a5451cAFED13f748d822418098593D3599";
var MCD_JOIN_COMP_A$1 = "0x544EFa934f26cd6FdFD86883408538150Bdd6725";
var YFI$1 = "0xd9510EF268F8273C9b7514F0bfFe18Fe1EFC0d43";
var PIP_YFI$1 = "0xAafF0066D05cEe0D6a38b4dac77e73d9E0a5Cf46";
var MCD_JOIN_YFI_A$1 = "0xa318E65982E80F54486f71965A0C320858759299";
var BAL$1 = "0x8c6e73CA229AB3933426aDb5cc829c1E4928551d";
var PIP_BAL$1 = "0xF15993A5C5BE496b8e1c9657Fd2233b579Cd3Bc6";
var MCD_JOIN_BAL_A$1 = "0xb31cE33511c2CCEfBc1713A783042eE670Cf5930";
var GUSD$1 = "0x67aeF79654D8F6CF44FdC08949c308a4F6b3c45B";
var PIP_GUSD$1 = "0x57A00620Ba1f5f81F20565ce72df4Ad695B389d7";
var MCD_JOIN_GUSD_A$1 = "0x455451293100C5c5355db10512DEE81F75E45Edf";
var UNI$1 = "0x82D98aA89E391c6759012df39ccDA0d9d6b24143";
var PIP_UNI$1 = "0xf1a5b808fbA8fF80982dACe88020d4a80c91aFe6";
var MCD_JOIN_UNI_A$1 = "0x31aE6e37964f26f4112A8Fc70e0B680F18e4DC6A";
var RENBTC$1 = "0x30d0A215aef6DadA4771a2b30a59B842f969EfD4";
var PIP_RENBTC$1 = "0xE7de200a3a29E9049E378b52BD36701A0Ce68C3b";
var MCD_JOIN_RENBTC_A$1 = "0xb4576162aC5d1bC7C69bA85F39e8f694d44d09D0";
var AAVE$1 = "0x251661BB7C6869165eF35810E5e1D25Ed57be2Fe";
var PIP_AAVE$1 = "0xC26E53eF1F71481DE53bfb77875Ffb3aCf4d91f0";
var MCD_JOIN_AAVE_A$1 = "0x71Ae3e3ac4412865A4E556230b92aB58d895b497";
var MATIC$1 = "0x5B3b6CF665Cc7B4552F4347623a2A9E00600CBB5";
var PIP_MATIC$1 = "0xDe112F61b823e776B3439f2F39AfF41f57993045";
var MCD_JOIN_MATIC_A$1 = "0xeb680839564F0F9bFB96fE2dF47a31cE31689e63";
var WSTETH$1 = "0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f";
var PIP_WSTETH$1 = "0x323eac5246d5BcB33d66e260E882fC9bF4B6bf41";
var MCD_JOIN_WSTETH_A$1 = "0xF99834937715255079849BE25ba31BF8b5D5B45D";
var UNIV2DAIETH$1 = "0x5dD9dec52a16d4d1Df10a66ac71d4731c9Dad984";
var PIP_UNIV2DAIETH$1 = "0x044c9aeD56369aA3f696c898AEd0C38dC53c6C3D";
var MCD_JOIN_UNIV2DAIETH_A$1 = "0x66931685b532CB4F31abfe804d2408dD34Cd419D";
var UNIV2WBTCETH$1 = "0x7883a92ac3e914F3400e8AE6a2FF05E6BA4Bd403";
var PIP_UNIV2WBTCETH$1 = "0xD375daC26f7eF991878136b387ca959b9ac1DDaF";
var MCD_JOIN_UNIV2WBTCETH_A$1 = "0x345a29Db10Aa5CF068D61Bb20F74771eC7DF66FE";
var UNIV2USDCETH$1 = "0xD90313b3E43D9a922c71d26a0fBCa75A01Bb3Aeb";
var PIP_UNIV2USDCETH$1 = "0x54ADcaB9B99b1B548764dAB637db751eC66835F0";
var MCD_JOIN_UNIV2USDCETH_A$1 = "0x46267d84dA4D6e7b2F5A999518Cf5DAF91E204E3";
var UNIV2DAIUSDC$1 = "0x260719B2ef507A86116FC24341ff0994F2097D42";
var PIP_UNIV2DAIUSDC$1 = "0xEf22289E240cFcCCdCD2B98fdefF167da10f452d";
var MCD_JOIN_UNIV2DAIUSDC_A$1 = "0x4CEEf4EB4988cb374B0b288D685AeBE4c6d4C41E";
var UNIV2ETHUSDT$1 = "0xfcB32e1C4A4F1C820c9304B5CFfEDfB91aE2321C";
var PIP_UNIV2ETHUSDT$1 = "0x974f7f4dC6D91f144c87cc03749c98f85F997bc7";
var MCD_JOIN_UNIV2ETHUSDT_A$1 = "0x46A8f8e2C0B62f5D7E4c95297bB26a457F358C82";
var UNIV2LINKETH$1 = "0x3361fB8f923D1Aa1A45B2d2eD4B8bdF313a3dA0c";
var PIP_UNIV2LINKETH$1 = "0x11C884B3FEE1494A666Bb20b6F6144387beAf4A6";
var MCD_JOIN_UNIV2LINKETH_A$1 = "0x98B7023Aced6D8B889Ad7D340243C3F9c81E8c5F";
var UNIV2UNIETH$1 = "0xB80A38E50B2990Ac83e46Fe16631fFBb94F2780b";
var PIP_UNIV2UNIETH$1 = "0xB18BC24e52C23A77225E7cf088756581EE257Ad8";
var MCD_JOIN_UNIV2UNIETH_A$1 = "0x52c31E3592352Cd0CBa20Fa73Da42584EC693283";
var UNIV2WBTCDAI$1 = "0x3f78Bd3980c49611E5FA885f25Ca3a5fCbf0d7A0";
var PIP_UNIV2WBTCDAI$1 = "0x916fc346910fd25867c81874f7F982a1FB69aac7";
var MCD_JOIN_UNIV2WBTCDAI_A$1 = "0x04d23e99504d61050CAF46B4ce2dcb9D4135a7fD";
var UNIV2AAVEETH$1 = "0xaF2CC6F46d1d0AB30dd45F59B562394c3E21e6f3";
var PIP_UNIV2AAVEETH$1 = "0xFADF05B56E4b211877248cF11C0847e7F8924e10";
var MCD_JOIN_UNIV2AAVEETH_A$1 = "0x73C4E5430768e24Fd704291699823f35953bbbA2";
var UNIV2DAIUSDT$1 = "0xBF2C9aBbEC9755A0b6144051E19c6AD4e6fd6D71";
var PIP_UNIV2DAIUSDT$1 = "0x2fc2706C61Fba5b941381e8838bC646908845db6";
var MCD_JOIN_UNIV2DAIUSDT_A$1 = "0xBF70Ca17ce5032CCa7cD55a946e96f0E72f79452";
var goerliAddresses = {
	MULTICALL: MULTICALL$1,
	FAUCET: FAUCET$1,
	MCD_DEPLOY: MCD_DEPLOY$1,
	MCD_GOV: MCD_GOV$1,
	GOV_GUARD: GOV_GUARD,
	MCD_ADM: MCD_ADM$1,
	MCD_VAT: MCD_VAT$1,
	MCD_JUG: MCD_JUG$1,
	MCD_DOG: MCD_DOG$1,
	ILK_REGISTRY: ILK_REGISTRY$1,
	CLIPPER_MOM: CLIPPER_MOM$1,
	MCD_CLIP_LINK_A: MCD_CLIP_LINK_A$1,
	MCD_CLIP_CALC_LINK_A: MCD_CLIP_CALC_LINK_A$1,
	MCD_CAT: MCD_CAT$1,
	MCD_VOW: MCD_VOW$1,
	MCD_JOIN_DAI: MCD_JOIN_DAI$1,
	MCD_FLAP: MCD_FLAP$1,
	MCD_FLOP: MCD_FLOP$1,
	MCD_PAUSE: MCD_PAUSE$1,
	MCD_PAUSE_PROXY: MCD_PAUSE_PROXY$1,
	MCD_GOV_ACTIONS: MCD_GOV_ACTIONS$1,
	MCD_DAI: MCD_DAI$1,
	MCD_SPOT: MCD_SPOT$1,
	MCD_POT: MCD_POT$1,
	MCD_END: MCD_END$1,
	MCD_ESM: MCD_ESM$1,
	PROXY_ACTIONS: PROXY_ACTIONS$1,
	PROXY_ACTIONS_END: PROXY_ACTIONS_END$1,
	PROXY_ACTIONS_DSR: PROXY_ACTIONS_DSR$1,
	CDP_MANAGER: CDP_MANAGER$1,
	GET_CDPS: GET_CDPS$1,
	OSM_MOM: OSM_MOM$1,
	FLIPPER_MOM: FLIPPER_MOM$1,
	PROXY_FACTORY: PROXY_FACTORY$1,
	PROXY_REGISTRY: PROXY_REGISTRY$1,
	PROXY_PAUSE_ACTIONS: PROXY_PAUSE_ACTIONS$1,
	PROXY_DEPLOYER: PROXY_DEPLOYER$1,
	ETH: ETH$1,
	PIP_ETH: PIP_ETH$1,
	MCD_JOIN_ETH_A: MCD_JOIN_ETH_A$1,
	MCD_JOIN_ETH_B: MCD_JOIN_ETH_B$1,
	MCD_JOIN_ETH_C: MCD_JOIN_ETH_C$1,
	BAT: BAT$1,
	PIP_BAT: PIP_BAT$1,
	MCD_JOIN_BAT_A: MCD_JOIN_BAT_A$1,
	USDC: USDC$1,
	PIP_USDC: PIP_USDC$1,
	MCD_JOIN_USDC_A: MCD_JOIN_USDC_A$1,
	MCD_JOIN_USDC_B: MCD_JOIN_USDC_B$1,
	WBTC: WBTC$1,
	PIP_WBTC: PIP_WBTC$1,
	MCD_JOIN_WBTC_A: MCD_JOIN_WBTC_A$1,
	TUSD: TUSD$1,
	PIP_TUSD: PIP_TUSD$1,
	MCD_JOIN_TUSD_A: MCD_JOIN_TUSD_A$1,
	ZRX: ZRX$1,
	PIP_ZRX: PIP_ZRX$1,
	MCD_JOIN_ZRX_A: MCD_JOIN_ZRX_A$1,
	KNC: KNC$1,
	PIP_KNC: PIP_KNC$1,
	MCD_JOIN_KNC_A: MCD_JOIN_KNC_A$1,
	MANA: MANA$1,
	PIP_MANA: PIP_MANA$1,
	MCD_JOIN_MANA_A: MCD_JOIN_MANA_A$1,
	PAXUSD: PAXUSD$1,
	PIP_PAXUSD: PIP_PAXUSD$1,
	MCD_JOIN_PAXUSD_A: MCD_JOIN_PAXUSD_A$1,
	USDT: USDT$1,
	PIP_USDT: PIP_USDT$1,
	MCD_JOIN_USDT_A: MCD_JOIN_USDT_A$1,
	LRC: LRC$1,
	PIP_LRC: PIP_LRC$1,
	MCD_JOIN_LRC_A: MCD_JOIN_LRC_A$1,
	LINK: LINK$1,
	PIP_LINK: PIP_LINK$1,
	MCD_JOIN_LINK_A: MCD_JOIN_LINK_A$1,
	COMP: COMP$1,
	PIP_COMP: PIP_COMP$1,
	MCD_JOIN_COMP_A: MCD_JOIN_COMP_A$1,
	YFI: YFI$1,
	PIP_YFI: PIP_YFI$1,
	MCD_JOIN_YFI_A: MCD_JOIN_YFI_A$1,
	BAL: BAL$1,
	PIP_BAL: PIP_BAL$1,
	MCD_JOIN_BAL_A: MCD_JOIN_BAL_A$1,
	GUSD: GUSD$1,
	PIP_GUSD: PIP_GUSD$1,
	MCD_JOIN_GUSD_A: MCD_JOIN_GUSD_A$1,
	UNI: UNI$1,
	PIP_UNI: PIP_UNI$1,
	MCD_JOIN_UNI_A: MCD_JOIN_UNI_A$1,
	RENBTC: RENBTC$1,
	PIP_RENBTC: PIP_RENBTC$1,
	MCD_JOIN_RENBTC_A: MCD_JOIN_RENBTC_A$1,
	AAVE: AAVE$1,
	PIP_AAVE: PIP_AAVE$1,
	MCD_JOIN_AAVE_A: MCD_JOIN_AAVE_A$1,
	MATIC: MATIC$1,
	PIP_MATIC: PIP_MATIC$1,
	MCD_JOIN_MATIC_A: MCD_JOIN_MATIC_A$1,
	WSTETH: WSTETH$1,
	PIP_WSTETH: PIP_WSTETH$1,
	MCD_JOIN_WSTETH_A: MCD_JOIN_WSTETH_A$1,
	UNIV2DAIETH: UNIV2DAIETH$1,
	PIP_UNIV2DAIETH: PIP_UNIV2DAIETH$1,
	MCD_JOIN_UNIV2DAIETH_A: MCD_JOIN_UNIV2DAIETH_A$1,
	UNIV2WBTCETH: UNIV2WBTCETH$1,
	PIP_UNIV2WBTCETH: PIP_UNIV2WBTCETH$1,
	MCD_JOIN_UNIV2WBTCETH_A: MCD_JOIN_UNIV2WBTCETH_A$1,
	UNIV2USDCETH: UNIV2USDCETH$1,
	PIP_UNIV2USDCETH: PIP_UNIV2USDCETH$1,
	MCD_JOIN_UNIV2USDCETH_A: MCD_JOIN_UNIV2USDCETH_A$1,
	UNIV2DAIUSDC: UNIV2DAIUSDC$1,
	PIP_UNIV2DAIUSDC: PIP_UNIV2DAIUSDC$1,
	MCD_JOIN_UNIV2DAIUSDC_A: MCD_JOIN_UNIV2DAIUSDC_A$1,
	UNIV2ETHUSDT: UNIV2ETHUSDT$1,
	PIP_UNIV2ETHUSDT: PIP_UNIV2ETHUSDT$1,
	MCD_JOIN_UNIV2ETHUSDT_A: MCD_JOIN_UNIV2ETHUSDT_A$1,
	UNIV2LINKETH: UNIV2LINKETH$1,
	PIP_UNIV2LINKETH: PIP_UNIV2LINKETH$1,
	MCD_JOIN_UNIV2LINKETH_A: MCD_JOIN_UNIV2LINKETH_A$1,
	UNIV2UNIETH: UNIV2UNIETH$1,
	PIP_UNIV2UNIETH: PIP_UNIV2UNIETH$1,
	MCD_JOIN_UNIV2UNIETH_A: MCD_JOIN_UNIV2UNIETH_A$1,
	UNIV2WBTCDAI: UNIV2WBTCDAI$1,
	PIP_UNIV2WBTCDAI: PIP_UNIV2WBTCDAI$1,
	MCD_JOIN_UNIV2WBTCDAI_A: MCD_JOIN_UNIV2WBTCDAI_A$1,
	UNIV2AAVEETH: UNIV2AAVEETH$1,
	PIP_UNIV2AAVEETH: PIP_UNIV2AAVEETH$1,
	MCD_JOIN_UNIV2AAVEETH_A: MCD_JOIN_UNIV2AAVEETH_A$1,
	UNIV2DAIUSDT: UNIV2DAIUSDT$1,
	PIP_UNIV2DAIUSDT: PIP_UNIV2DAIUSDT$1,
	MCD_JOIN_UNIV2DAIUSDT_A: MCD_JOIN_UNIV2DAIUSDT_A$1
};

var DEPLOYER$1 = "0xdDb108893104dE4E1C6d0E47c42237dB4E617ACc";
var MULTICALL$2 = "0x5e227AD1969Ea493B43F840cfF78d08a6fc17796";
var FAUCET$2 = "0x0000000000000000000000000000000000000000";
var MCD_DEPLOY$2 = "0xbaa65281c2FA2baAcb2cb550BA051525A480D3F4";
var MCD_GOV$2 = "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2";
var GOV_GUARD$1 = "0x6eEB68B2C7A918f36B78E2DB80dcF279236DDFb8";
var MCD_ADM$2 = "0x0a3f6849f78076aefaDf113F5BED87720274dDC0";
var MCD_VAT$2 = "0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B";
var MCD_JUG$2 = "0x19c0976f590D67707E62397C87829d896Dc0f1F1";
var MCD_CAT$2 = "0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea";
var OLD_MCD_CAT$1 = "0x78f2c2af65126834c51822f56be0d7469d7a523e";
var MCD_VOW$2 = "0xA950524441892A31ebddF91d3cEEFa04Bf454466";
var MCD_JOIN_DAI$2 = "0x9759A6Ac90977b93B58547b4A71c78317f391A28";
var MCD_FLAP$2 = "0xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f";
var MCD_FLOP$2 = "0x4D95A049d5B0b7d32058cd3F2163015747522e99";
var MCD_PAUSE$2 = "0xbE286431454714F511008713973d3B053A2d38f3";
var MCD_PAUSE_PROXY$2 = "0xBE8E3e3618f7474F8cB1d074A26afFef007E98FB";
var MCD_GOV_ACTIONS$2 = "0x4F5f0933158569c026d617337614d00Ee6589B6E";
var MCD_DAI$2 = "0x6B175474E89094C44Da98b954EedeAC495271d0F";
var MCD_SPOT$2 = "0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3";
var MCD_POT$2 = "0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7";
var MCD_END$2 = "0xBB856d1742fD182a90239D7AE85706C2FE4e5922";
var MCD_ESM$2 = "0x29CfBd381043D00a98fD9904a431015Fef07af2f";
var PROXY_ACTIONS$2 = "0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038";
var PROXY_ACTIONS_END$2 = "0x7AfF9FC9faD225e3c88cDA06BC56d8Aca774bC57";
var PROXY_ACTIONS_DSR$2 = "0x07ee93aEEa0a36FfF2A9B95dd22Bd6049EE54f26";
var CDP_MANAGER$2 = "0x5ef30b9986345249bc32d8928B7ee64DE9435E39";
var GET_CDPS$2 = "0x36a724Bd100c39f0Ea4D3A20F7097eE01A8Ff573";
var OSM_MOM$2 = "0x76416A4d5190d071bfed309861527431304aA14f";
var FLIPPER_MOM$2 = "0x9BdDB99625A711bf9bda237044924E34E8570f75";
var PROXY_FACTORY$2 = "0xA26e15C895EFc0616177B7c1e7270A4C7D51C997";
var PROXY_REGISTRY$2 = "0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4";
var PROXY_PAUSE_ACTIONS$2 = "0x6bda13D43B7EDd6CAfE1f70fB98b5d40f61A1370";
var PROXY_DEPLOYER$2 = "0x1b93556AB8dcCEF01Cd7823C617a6d340f53Fb58";
var SAI_TUB = "0x448a5065aeBB8E423F0896E6c5D525C040f59af3";
var MIGRATION$1 = "0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849";
var MIGRATION_PROXY_ACTIONS = "0x2E1F6062d9fB227069741E40f89186DF222FB426";
var ETH$2 = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
var PIP_ETH$2 = "0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763";
var MCD_JOIN_ETH_A$2 = "0x2F0b23f53734252Bda2277357e97e1517d6B042A";
var MCD_FLIP_ETH_A$1 = "0xd8a04F5412223F513DC55F839574430f5EC15531";
var MCD_JOIN_ETH_B$2 = "0x08638eF1A205bE6762A8b935F5da9b700Cf7322c";
var MCD_FLIP_ETH_B = "0xD499d71bE9e9E5D236A07ac562F7B6CeacCa624c";
var MCD_JOIN_ETH_C$2 = "0xF04a5cC80B1E94C69B48f5ee68a08CD2F09A7c3E";
var MCD_FLIP_ETH_C = "0x7A67901A68243241EBf66beEB0e7b5395582BF17";
var SAI$1 = "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359";
var PIP_SAI = "0x54003DBf6ae6CBa6DDaE571CcdC34d834b44Ab1e";
var MCD_JOIN_SAI$1 = "0xad37fd42185Ba63009177058208dd1be4b136e6b";
var MCD_FLIP_SAI = "0x5432b2f3c0DFf95AA191C45E5cbd539E2820aE72";
var BAT$2 = "0x0D8775F648430679A709E98d2b0Cb6250d2887EF";
var PIP_BAT$2 = "0xB4eb54AF9Cc7882DF0121d26c5b97E802915ABe6";
var MCD_JOIN_BAT_A$2 = "0x3D0B1912B66114d4096F48A8CEe3A56C231772cA";
var MCD_FLIP_BAT_A$1 = "0xaA745404d55f88C108A28c86abE7b5A1E7817c07";
var WBTC$2 = "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599";
var PIP_WBTC$2 = "0xf185d0682d50819263941e5f4EacC763CC5C6C42";
var MCD_JOIN_WBTC_A$2 = "0xBF72Da2Bd84c5170618Fbe5914B0ECA9638d5eb5";
var MCD_FLIP_WBTC_A$1 = "0x3E115d85D4d7253b05fEc9C0bB5b08383C2b0603";
var USDC$2 = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";
var PIP_USDC$2 = "0x77b68899b99b686F415d074278a9a16b336085A0";
var MCD_JOIN_USDC_A$2 = "0xA191e578a6736167326d05c119CE0c90849E84B7";
var MCD_FLIP_USDC_A$1 = "0xE6ed1d09a19Bd335f051d78D5d22dF3bfF2c28B1";
var MCD_JOIN_USDC_B$2 = "0x2600004fd1585f7270756DDc88aD9cfA10dD0428";
var MCD_FLIP_USDC_B$1 = "0xec25Ca3fFa512afbb1784E17f1D414E16D01794F";
var TUSD$2 = "0x0000000000085d4780B73119b644AE5ecd22b376";
var PIP_TUSD$2 = "0xeE13831ca96d191B688A670D47173694ba98f1e5";
var MCD_JOIN_TUSD_A$2 = "0x4454aF7C8bb9463203b66C816220D41ED7837f44";
var MCD_FLIP_TUSD_A$1 = "0xba3f6a74BD12Cf1e48d4416c7b50963cA98AfD61";
var ZRX$2 = "0xE41d2489571d322189246DaFA5ebDe1F4699F498";
var PIP_ZRX$2 = "0x7382c066801E7Acb2299aC8562847B9883f5CD3c";
var MCD_JOIN_ZRX_A$2 = "0xc7e8Cd72BDEe38865b4F5615956eF47ce1a7e5D0";
var MCD_FLIP_ZRX_A$1 = "0x08c89251FC058cC97d5bA5F06F95026C0A5CF9B0";
var KNC$2 = "0xdd974D5C2e2928deA5F71b9825b8b646686BD200";
var PIP_KNC$2 = "0xf36B79BD4C0904A5F350F1e4f776B81208c13069";
var MCD_FLIP_KNC_A$1 = "0xAbBCB9Ae89cDD3C27E02D279480C7fF33083249b";
var MCD_JOIN_KNC_A$2 = "0x475F1a89C1ED844A08E8f6C50A00228b5E59E4A9";
var MANA$2 = "0x0F5D2fB29fb7d3CFeE444a200298f468908cC942";
var PIP_MANA$2 = "0x8067259EA630601f319FccE477977E55C6078C13";
var MCD_FLIP_MANA_A$1 = "0x4bf9D2EBC4c57B9B783C12D30076507660B58b3a";
var MCD_JOIN_MANA_A$2 = "0xA6EA3b9C04b8a38Ff5e224E7c3D6937ca44C0ef9";
var PAXUSD$2 = "0x8E870D67F660D95d5be530380D0eC0bd388289E1";
var PIP_PAXUSD$2 = "0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC";
var MCD_JOIN_PAXUSD_A$2 = "0x7e62B7E279DFC78DEB656E34D6a435cC08a44666";
var MCD_FLIP_PAXUSD_A$1 = "0x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7";
var USDT$2 = "0xdAC17F958D2ee523a2206206994597C13D831ec7";
var PIP_USDT$2 = "0x7a5918670B0C390aD25f7beE908c1ACc2d314A3C";
var MCD_JOIN_USDT_A$2 = "0x0Ac6A1D74E84C2dF9063bDDc31699FF2a2BB22A2";
var MCD_FLIP_USDT_A$1 = "0x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26";
var COMP$2 = "0xc00e94Cb662C3520282E6f5717214004A7f26888";
var PIP_COMP$2 = "0xBED0879953E633135a48a157718Aa791AC0108E4";
var MCD_JOIN_COMP_A$2 = "0xBEa7cDfB4b49EC154Ae1c0D731E4DC773A3265aA";
var MCD_FLIP_COMP_A$1 = "0x524826F84cB3A19B6593370a5889A58c00554739";
var LRC$2 = "0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD";
var PIP_LRC$2 = "0x9eb923339c24c40Bef2f4AF4961742AA7C23EF3a";
var MCD_JOIN_LRC_A$2 = "0x6C186404A7A238D3d6027C0299D1822c1cf5d8f1";
var MCD_FLIP_LRC_A$1 = "0x7FdDc36dcdC435D8F54FDCB3748adcbBF70f3dAC";
var LINK$2 = "0x514910771AF9Ca656af840dff83E8264EcF986CA";
var PIP_LINK$2 = "0x9B0C694C6939b5EA9584e9b61C7815E8d97D9cC7";
var MCD_JOIN_LINK_A$2 = "0xdFccAf8fDbD2F4805C174f856a317765B49E4a50";
var MCD_FLIP_LINK_A = "0xB907EEdD63a30A3381E6D898e5815Ee8c9fd2c85";
var MATIC$2 = "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0";
var PIP_MATIC$2 = "0x8874964279302e6d4e523Fb1789981C39a1034Ba";
var MCD_JOIN_MATIC_A$2 = "0x885f16e177d45fC9e7C87e1DA9fd47A9cfcE8E13";
var WSTETH$2 = "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0";
var PIP_WSTETH$2 = "0xFe7a2aC0B945f12089aEEB6eCebf4F384D9f043F";
var MCD_JOIN_WSTETH_A$2 = "0x10CD5fbe1b404B7E19Ef964B63939907bdaf42E2";
var YFI$2 = "0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e";
var PIP_YFI$2 = "0x5F122465bCf86F45922036970Be6DD7F58820214";
var MCD_JOIN_YFI_A$2 = "0x3ff33d9162aD47660083D7DC4bC02Fb231c81677";
var MCD_FLIP_YFI_A = "0xEe4C9C36257afB8098059a4763A374a4ECFE28A7";
var BAL$2 = "0xba100000625a3754423978a60c9317c58a424e3D";
var PIP_BAL$2 = "0x3ff860c0F28D69F392543A16A397D0dAe85D16dE";
var MCD_JOIN_BAL_A$2 = "0x4a03Aa7fb3973d8f0221B466EefB53D0aC195f55";
var MCD_FLIP_BAL_A$1 = "0xb2b9bd446eE5e58036D2876fce62b7Ab7334583e";
var GUSD$2 = "0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd";
var PIP_GUSD$2 = "0xf45Ae69CcA1b9B043dAE2C83A5B65Bc605BEc5F5";
var MCD_JOIN_GUSD_A$2 = "0xe29A14bcDeA40d83675aa43B72dF07f649738C8b";
var MCD_FLIP_GUSD_A$1 = "0xCAa8D152A8b98229fB77A213BE16b234cA4f612f";
var UNI$2 = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
var PIP_UNI$2 = "0xf363c7e351C96b910b92b45d34190650df4aE8e7";
var MCD_JOIN_UNI_A$2 = "0x3BC3A58b4FC1CbE7e98bB4aB7c99535e8bA9b8F1";
var MCD_FLIP_UNI_A$1 = "0xF5b8cD9dB5a0EC031304A7B815010aa7761BD426";
var RENBTC$2 = "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D";
var PIP_RENBTC$2 = "0xf185d0682d50819263941e5f4EacC763CC5C6C42";
var MCD_JOIN_RENBTC_A$2 = "0xFD5608515A47C37afbA68960c1916b79af9491D0";
var MCD_FLIP_RENBTC_A$1 = "0x30BC6eBC27372e50606880a36B279240c0bA0758";
var AAVE$2 = "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9";
var PIP_AAVE$2 = "0x8Df8f06DC2dE0434db40dcBb32a82A104218754c";
var MCD_JOIN_AAVE_A$2 = "0x24e459F61cEAa7b1cE70Dbaea938940A7c5aD46e";
var MCD_FLIP_AAVE_A$1 = "0x16e1b844094c885a37509a8f76c533B5fbFED13a";
var UNIV2DAIETH$2 = "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11";
var PIP_UNIV2DAIETH$2 = "0x87ecBd742cEB40928E6cDE77B2f0b5CFa3342A09";
var MCD_JOIN_UNIV2DAIETH_A$2 = "0x2502F65D77cA13f183850b5f9272270454094A08";
var MCD_FLIP_UNIV2DAIETH_A$1 = "0x57dfd99f45747DD55C1c432Db4aEa07FBd5d2B5c";
var UNIV2WBTCETH$2 = "0xBb2b8038a1640196FbE3e38816F3e67Cba72D940";
var PIP_UNIV2WBTCETH$2 = "0x771338D5B31754b25D2eb03Cea676877562Dec26";
var MCD_JOIN_UNIV2WBTCETH_A$2 = "0xDc26C9b7a8fe4F5dF648E314eC3E6Dc3694e6Dd2";
var MCD_FLIP_UNIV2WBTCETH_A$1 = "0xbc95e8904d879F371Ac6B749727a0EAfDCd2ACB6";
var UNIV2USDCETH$2 = "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc";
var PIP_UNIV2USDCETH$2 = "0xECB03Fec701B93DC06d19B4639AA8b5a838472BE";
var MCD_JOIN_UNIV2USDCETH_A$2 = "0x03Ae53B33FeeAc1222C3f372f32D37Ba95f0F099";
var MCD_FLIP_UNIV2USDCETH_A$1 = "0x48d2C08b93E57701C8ae8974Fc4ADd725222B0BB";
var UNIV2DAIUSDC$2 = "0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5";
var PIP_UNIV2DAIUSDC$2 = "0x25CD858a00146961611b18441353603191f110A0";
var MCD_JOIN_UNIV2DAIUSDC_A$2 = "0xA81598667AC561986b70ae11bBE2dd5348ed4327";
var MCD_FLIP_UNIV2DAIUSDC_A$1 = "0x4a613f79a250D522DdB53904D87b8f442EA94496";
var UNIV2ETHUSDT$2 = "0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852";
var PIP_UNIV2ETHUSDT$2 = "0x9b015AA3e4787dd0df8B43bF2FE6d90fa543E13B";
var MCD_JOIN_UNIV2ETHUSDT_A$2 = "0x4aAD139a88D2dd5e7410b408593208523a3a891d";
var MCD_FLIP_UNIV2ETHUSDT_A$1 = "0x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E";
var UNIV2LINKETH$2 = "0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974";
var PIP_UNIV2LINKETH$2 = "0x628009F5F5029544AE84636Ef676D3Cc5755238b";
var MCD_JOIN_UNIV2LINKETH_A$2 = "0xDae88bDe1FB38cF39B6A02b595930A3449e593A6";
var MCD_FLIP_UNIV2LINKETH_A$1 = "0xb79f818E3c73FCA387845f892356224CA75eac4b";
var UNIV2UNIETH$2 = "0xd3d2E2692501A5c9Ca623199D38826e513033a17";
var PIP_UNIV2UNIETH$2 = "0x8Ce9E9442F2791FC63CD6394cC12F2dE4fbc1D71";
var MCD_JOIN_UNIV2UNIETH_A$2 = "0xf11a98339FE1CdE648e8D1463310CE3ccC3d7cC1";
var MCD_FLIP_UNIV2UNIETH_A$1 = "0xe5ED7da0483e291485011D5372F3BF46235EB277";
var UNIV2WBTCDAI$2 = "0x231B7589426Ffe1b75405526fC32aC09D44364c4";
var PIP_UNIV2WBTCDAI$2 = "0x5FB5a346347ACf4FCD3AAb28f5eE518785FB0AD0";
var MCD_JOIN_UNIV2WBTCDAI_A$2 = "0xD40798267795Cbf3aeEA8E9F8DCbdBA9b5281fcC";
var MCD_FLIP_UNIV2WBTCDAI_A$1 = "0x172200d12D09C2698Dd918d347155fE6692f5662";
var UNIV2AAVEETH$2 = "0xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f";
var PIP_UNIV2AAVEETH$2 = "0x8D34DC2c33A6386E96cA562D8478Eaf82305b81a";
var MCD_JOIN_UNIV2AAVEETH_A$2 = "0x42AFd448Df7d96291551f1eFE1A590101afB1DfF";
var MCD_FLIP_UNIV2AAVEETH_A$1 = "0x20D298ca96bf8c2000203B911908DbDc1a8Bac58";
var UNIV2DAIUSDT$2 = "0xB20bd5D04BE54f870D5C0d3cA85d82b34B836405";
var PIP_UNIV2DAIUSDT$2 = "0x69562A7812830E6854Ffc50b992c2AA861D5C2d3";
var MCD_JOIN_UNIV2DAIUSDT_A$2 = "0xAf034D882169328CAf43b823a4083dABC7EEE0F4";
var MCD_FLIP_UNIV2DAIUSDT_A$1 = "0xD32f8B8aDbE331eC0CfADa9cfDbc537619622cFe";
var mainnetAddresses = {
	DEPLOYER: DEPLOYER$1,
	MULTICALL: MULTICALL$2,
	FAUCET: FAUCET$2,
	MCD_DEPLOY: MCD_DEPLOY$2,
	MCD_GOV: MCD_GOV$2,
	GOV_GUARD: GOV_GUARD$1,
	MCD_ADM: MCD_ADM$2,
	MCD_VAT: MCD_VAT$2,
	MCD_JUG: MCD_JUG$2,
	MCD_CAT: MCD_CAT$2,
	OLD_MCD_CAT: OLD_MCD_CAT$1,
	MCD_VOW: MCD_VOW$2,
	MCD_JOIN_DAI: MCD_JOIN_DAI$2,
	MCD_FLAP: MCD_FLAP$2,
	MCD_FLOP: MCD_FLOP$2,
	MCD_PAUSE: MCD_PAUSE$2,
	MCD_PAUSE_PROXY: MCD_PAUSE_PROXY$2,
	MCD_GOV_ACTIONS: MCD_GOV_ACTIONS$2,
	MCD_DAI: MCD_DAI$2,
	MCD_SPOT: MCD_SPOT$2,
	MCD_POT: MCD_POT$2,
	MCD_END: MCD_END$2,
	MCD_ESM: MCD_ESM$2,
	PROXY_ACTIONS: PROXY_ACTIONS$2,
	PROXY_ACTIONS_END: PROXY_ACTIONS_END$2,
	PROXY_ACTIONS_DSR: PROXY_ACTIONS_DSR$2,
	CDP_MANAGER: CDP_MANAGER$2,
	GET_CDPS: GET_CDPS$2,
	OSM_MOM: OSM_MOM$2,
	FLIPPER_MOM: FLIPPER_MOM$2,
	PROXY_FACTORY: PROXY_FACTORY$2,
	PROXY_REGISTRY: PROXY_REGISTRY$2,
	PROXY_PAUSE_ACTIONS: PROXY_PAUSE_ACTIONS$2,
	PROXY_DEPLOYER: PROXY_DEPLOYER$2,
	SAI_TUB: SAI_TUB,
	MIGRATION: MIGRATION$1,
	MIGRATION_PROXY_ACTIONS: MIGRATION_PROXY_ACTIONS,
	ETH: ETH$2,
	PIP_ETH: PIP_ETH$2,
	MCD_JOIN_ETH_A: MCD_JOIN_ETH_A$2,
	MCD_FLIP_ETH_A: MCD_FLIP_ETH_A$1,
	MCD_JOIN_ETH_B: MCD_JOIN_ETH_B$2,
	MCD_FLIP_ETH_B: MCD_FLIP_ETH_B,
	MCD_JOIN_ETH_C: MCD_JOIN_ETH_C$2,
	MCD_FLIP_ETH_C: MCD_FLIP_ETH_C,
	SAI: SAI$1,
	PIP_SAI: PIP_SAI,
	MCD_JOIN_SAI: MCD_JOIN_SAI$1,
	MCD_FLIP_SAI: MCD_FLIP_SAI,
	BAT: BAT$2,
	PIP_BAT: PIP_BAT$2,
	MCD_JOIN_BAT_A: MCD_JOIN_BAT_A$2,
	MCD_FLIP_BAT_A: MCD_FLIP_BAT_A$1,
	WBTC: WBTC$2,
	PIP_WBTC: PIP_WBTC$2,
	MCD_JOIN_WBTC_A: MCD_JOIN_WBTC_A$2,
	MCD_FLIP_WBTC_A: MCD_FLIP_WBTC_A$1,
	USDC: USDC$2,
	PIP_USDC: PIP_USDC$2,
	MCD_JOIN_USDC_A: MCD_JOIN_USDC_A$2,
	MCD_FLIP_USDC_A: MCD_FLIP_USDC_A$1,
	MCD_JOIN_USDC_B: MCD_JOIN_USDC_B$2,
	MCD_FLIP_USDC_B: MCD_FLIP_USDC_B$1,
	TUSD: TUSD$2,
	PIP_TUSD: PIP_TUSD$2,
	MCD_JOIN_TUSD_A: MCD_JOIN_TUSD_A$2,
	MCD_FLIP_TUSD_A: MCD_FLIP_TUSD_A$1,
	ZRX: ZRX$2,
	PIP_ZRX: PIP_ZRX$2,
	MCD_JOIN_ZRX_A: MCD_JOIN_ZRX_A$2,
	MCD_FLIP_ZRX_A: MCD_FLIP_ZRX_A$1,
	KNC: KNC$2,
	PIP_KNC: PIP_KNC$2,
	MCD_FLIP_KNC_A: MCD_FLIP_KNC_A$1,
	MCD_JOIN_KNC_A: MCD_JOIN_KNC_A$2,
	MANA: MANA$2,
	PIP_MANA: PIP_MANA$2,
	MCD_FLIP_MANA_A: MCD_FLIP_MANA_A$1,
	MCD_JOIN_MANA_A: MCD_JOIN_MANA_A$2,
	PAXUSD: PAXUSD$2,
	PIP_PAXUSD: PIP_PAXUSD$2,
	MCD_JOIN_PAXUSD_A: MCD_JOIN_PAXUSD_A$2,
	MCD_FLIP_PAXUSD_A: MCD_FLIP_PAXUSD_A$1,
	USDT: USDT$2,
	PIP_USDT: PIP_USDT$2,
	MCD_JOIN_USDT_A: MCD_JOIN_USDT_A$2,
	MCD_FLIP_USDT_A: MCD_FLIP_USDT_A$1,
	COMP: COMP$2,
	PIP_COMP: PIP_COMP$2,
	MCD_JOIN_COMP_A: MCD_JOIN_COMP_A$2,
	MCD_FLIP_COMP_A: MCD_FLIP_COMP_A$1,
	LRC: LRC$2,
	PIP_LRC: PIP_LRC$2,
	MCD_JOIN_LRC_A: MCD_JOIN_LRC_A$2,
	MCD_FLIP_LRC_A: MCD_FLIP_LRC_A$1,
	LINK: LINK$2,
	PIP_LINK: PIP_LINK$2,
	MCD_JOIN_LINK_A: MCD_JOIN_LINK_A$2,
	MCD_FLIP_LINK_A: MCD_FLIP_LINK_A,
	MATIC: MATIC$2,
	PIP_MATIC: PIP_MATIC$2,
	MCD_JOIN_MATIC_A: MCD_JOIN_MATIC_A$2,
	WSTETH: WSTETH$2,
	PIP_WSTETH: PIP_WSTETH$2,
	MCD_JOIN_WSTETH_A: MCD_JOIN_WSTETH_A$2,
	YFI: YFI$2,
	PIP_YFI: PIP_YFI$2,
	MCD_JOIN_YFI_A: MCD_JOIN_YFI_A$2,
	MCD_FLIP_YFI_A: MCD_FLIP_YFI_A,
	BAL: BAL$2,
	PIP_BAL: PIP_BAL$2,
	MCD_JOIN_BAL_A: MCD_JOIN_BAL_A$2,
	MCD_FLIP_BAL_A: MCD_FLIP_BAL_A$1,
	GUSD: GUSD$2,
	PIP_GUSD: PIP_GUSD$2,
	MCD_JOIN_GUSD_A: MCD_JOIN_GUSD_A$2,
	MCD_FLIP_GUSD_A: MCD_FLIP_GUSD_A$1,
	UNI: UNI$2,
	PIP_UNI: PIP_UNI$2,
	MCD_JOIN_UNI_A: MCD_JOIN_UNI_A$2,
	MCD_FLIP_UNI_A: MCD_FLIP_UNI_A$1,
	RENBTC: RENBTC$2,
	PIP_RENBTC: PIP_RENBTC$2,
	MCD_JOIN_RENBTC_A: MCD_JOIN_RENBTC_A$2,
	MCD_FLIP_RENBTC_A: MCD_FLIP_RENBTC_A$1,
	AAVE: AAVE$2,
	PIP_AAVE: PIP_AAVE$2,
	MCD_JOIN_AAVE_A: MCD_JOIN_AAVE_A$2,
	MCD_FLIP_AAVE_A: MCD_FLIP_AAVE_A$1,
	UNIV2DAIETH: UNIV2DAIETH$2,
	PIP_UNIV2DAIETH: PIP_UNIV2DAIETH$2,
	MCD_JOIN_UNIV2DAIETH_A: MCD_JOIN_UNIV2DAIETH_A$2,
	MCD_FLIP_UNIV2DAIETH_A: MCD_FLIP_UNIV2DAIETH_A$1,
	UNIV2WBTCETH: UNIV2WBTCETH$2,
	PIP_UNIV2WBTCETH: PIP_UNIV2WBTCETH$2,
	MCD_JOIN_UNIV2WBTCETH_A: MCD_JOIN_UNIV2WBTCETH_A$2,
	MCD_FLIP_UNIV2WBTCETH_A: MCD_FLIP_UNIV2WBTCETH_A$1,
	UNIV2USDCETH: UNIV2USDCETH$2,
	PIP_UNIV2USDCETH: PIP_UNIV2USDCETH$2,
	MCD_JOIN_UNIV2USDCETH_A: MCD_JOIN_UNIV2USDCETH_A$2,
	MCD_FLIP_UNIV2USDCETH_A: MCD_FLIP_UNIV2USDCETH_A$1,
	UNIV2DAIUSDC: UNIV2DAIUSDC$2,
	PIP_UNIV2DAIUSDC: PIP_UNIV2DAIUSDC$2,
	MCD_JOIN_UNIV2DAIUSDC_A: MCD_JOIN_UNIV2DAIUSDC_A$2,
	MCD_FLIP_UNIV2DAIUSDC_A: MCD_FLIP_UNIV2DAIUSDC_A$1,
	UNIV2ETHUSDT: UNIV2ETHUSDT$2,
	PIP_UNIV2ETHUSDT: PIP_UNIV2ETHUSDT$2,
	MCD_JOIN_UNIV2ETHUSDT_A: MCD_JOIN_UNIV2ETHUSDT_A$2,
	MCD_FLIP_UNIV2ETHUSDT_A: MCD_FLIP_UNIV2ETHUSDT_A$1,
	UNIV2LINKETH: UNIV2LINKETH$2,
	PIP_UNIV2LINKETH: PIP_UNIV2LINKETH$2,
	MCD_JOIN_UNIV2LINKETH_A: MCD_JOIN_UNIV2LINKETH_A$2,
	MCD_FLIP_UNIV2LINKETH_A: MCD_FLIP_UNIV2LINKETH_A$1,
	UNIV2UNIETH: UNIV2UNIETH$2,
	PIP_UNIV2UNIETH: PIP_UNIV2UNIETH$2,
	MCD_JOIN_UNIV2UNIETH_A: MCD_JOIN_UNIV2UNIETH_A$2,
	MCD_FLIP_UNIV2UNIETH_A: MCD_FLIP_UNIV2UNIETH_A$1,
	UNIV2WBTCDAI: UNIV2WBTCDAI$2,
	PIP_UNIV2WBTCDAI: PIP_UNIV2WBTCDAI$2,
	MCD_JOIN_UNIV2WBTCDAI_A: MCD_JOIN_UNIV2WBTCDAI_A$2,
	MCD_FLIP_UNIV2WBTCDAI_A: MCD_FLIP_UNIV2WBTCDAI_A$1,
	UNIV2AAVEETH: UNIV2AAVEETH$2,
	PIP_UNIV2AAVEETH: PIP_UNIV2AAVEETH$2,
	MCD_JOIN_UNIV2AAVEETH_A: MCD_JOIN_UNIV2AAVEETH_A$2,
	MCD_FLIP_UNIV2AAVEETH_A: MCD_FLIP_UNIV2AAVEETH_A$1,
	UNIV2DAIUSDT: UNIV2DAIUSDT$2,
	PIP_UNIV2DAIUSDT: PIP_UNIV2DAIUSDT$2,
	MCD_JOIN_UNIV2DAIUSDT_A: MCD_JOIN_UNIV2DAIUSDT_A$2,
	MCD_FLIP_UNIV2DAIUSDT_A: MCD_FLIP_UNIV2DAIUSDT_A$1
};

// not run through babel, so we must use an ES5-safe export
var abiMap = {
  REP: /*#__PURE__*/require('./abis/REP.json'),
  ZRX: /*#__PURE__*/require('./abis/ZRX.json'),
  OMG: /*#__PURE__*/require('./abis/OMG.json'),
  BAT: /*#__PURE__*/require('./abis/BAT.json'),
  DGD: /*#__PURE__*/require('./abis/DGD.json'),
  KNC: /*#__PURE__*/require('./abis/KNC.json'),
  GNT: /*#__PURE__*/require('./abis/GNT.json'),
  SAI: /*#__PURE__*/require('./abis/DSToken.json'),
  CDP_MANAGER: /*#__PURE__*/require('./abis/DssCdpManager.json'),
  ETH: /*#__PURE__*/require('./abis/WETH9_.json'),
  GET_CDPS: /*#__PURE__*/require('./abis/GetCdps.json'),
  MCD_ADM: /*#__PURE__*/require('./abis/DSRoles.json'),
  MCD_CAT: /*#__PURE__*/require('./abis/Cat.json'),
  OLD_MCD_CAT: /*#__PURE__*/require('./abis/Cat.json'),
  MCD_DAI: /*#__PURE__*/require('./abis/DSToken.json'),
  MCD_DAI_GUARD: /*#__PURE__*/require('./abis/DSGuard.json'),
  MCD_DEPLOY: /*#__PURE__*/require('./abis/DssDeploy.json'),
  MCD_FLAP: /*#__PURE__*/require('./abis/Flapper.json'),
  'MCD_FLIP_*': /*#__PURE__*/require('./abis/Flipper.json'),
  MCD_FLOP: /*#__PURE__*/require('./abis/Flopper.json'),
  MCD_GOV: /*#__PURE__*/require('./abis/DSToken.json'),
  'MCD_JOIN_*': /*#__PURE__*/require('./abis/GemJoin.json'),
  MCD_JOIN_OMG_A: /*#__PURE__*/require('./abis/GemJoin2.json'),
  MCD_JOIN_DGD_A: /*#__PURE__*/require('./abis/GemJoin2.json'),
  MCD_JOIN_GNT_A: /*#__PURE__*/require('./abis/GemJoin4.json'),
  MCD_JOIN_DAI: /*#__PURE__*/require('./abis/DaiJoin.json'),
  MCD_JUG: /*#__PURE__*/require('./abis/Jug.json'),
  MCD_END: /*#__PURE__*/require('./abis/End.json'),
  MCD_ESM: /*#__PURE__*/require('./abis/ESM.json'),
  MCD_PAUSE: /*#__PURE__*/require('./abis/DSPause.json'),
  MCD_PAUSE_PROXY: /*#__PURE__*/require('./abis/Plan.json'),
  MCD_POT: /*#__PURE__*/require('./abis/Pot.json'),
  MCD_SPOT: /*#__PURE__*/require('./abis/Spotter.json'),
  MCD_VAT: /*#__PURE__*/require('./abis/Vat.json'),
  MCD_VOW: /*#__PURE__*/require('./abis/Vow.json'),
  MULTICALL: /*#__PURE__*/require('./abis/MultiCall.json'),
  'PIP_*': /*#__PURE__*/require('./abis/DSValue.json'),
  PROXY_ACTIONS: /*#__PURE__*/require('./abis/DssProxyActions.json'),
  PROXY_ACTIONS_DSR: /*#__PURE__*/require('./abis/DssProxyActionsDsr.json'),
  MIGRATION: /*#__PURE__*/require('./abis/ScdMcdMigration.json'),
  MIGRATION_PROXY_ACTIONS: /*#__PURE__*/require('./abis/MigrationProxyActions.json'),
  USDC: /*#__PURE__*/require('./abis/USDC.json'),
  WBTC: /*#__PURE__*/require('./abis/WBTC.json'),
  TUSD: /*#__PURE__*/require('./abis/DSToken.json'),
  MANA: /*#__PURE__*/require('./abis/DSToken.json'),
  USDT: /*#__PURE__*/require('./abis/DSToken.json'),
  PAXUSD: /*#__PURE__*/require('./abis/DSToken.json'),
  COMP: /*#__PURE__*/require('./abis/DSToken.json'),
  LRC: /*#__PURE__*/require('./abis/DSToken.json'),
  LINK: /*#__PURE__*/require('./abis/DSToken.json'),
  YFI: /*#__PURE__*/require('./abis/DSToken.json'),
  BAL: /*#__PURE__*/require('./abis/DSToken.json'),
  GUSD: /*#__PURE__*/require('./abis/GUSD.json'),
  UNI: /*#__PURE__*/require('./abis/DSToken.json'),
  RENBTC: /*#__PURE__*/require('./abis/DSToken.json'),
  AAVE: /*#__PURE__*/require('./abis/DSToken.json'),
  MATIC: /*#__PURE__*/require('./abis/DSToken.json'),
  WSTETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2DAIETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2WBTCETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2USDCETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2DAIUSDC: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2ETHUSDT: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2LINKETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2UNIETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2WBTCDAI: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2AAVEETH: /*#__PURE__*/require('./abis/DSToken.json'),
  UNIV2DAIUSDT: /*#__PURE__*/require('./abis/DSToken.json')
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

/*

The default export is a decorator definition.

If a function is decorated with `@tracksTransactions`, it should expect its last
argument to be an object with a key named `promise`. It should pass that
`promise` argument along as a key in the last argument to any non-constant
function calls it makes to a smart contract (i.e. an instance returned from the
getContract method in SmartContractService), or any calls it makes to other
functions that will eventually call such smart contract functions.

This allows TransactionManager to let users input a promise and attach lifecycle
callbacks to all transactions that were created in the course of executing that
promise.

@tracksTransactions is only necessary when the function is async. If the
function returns a contract call and does not make any async calls before that,
then the async keyword can be removed, and it just needs to have an `options`
argument that it passes to its contract call.

If you need to apply this to a function that has any arguments with default
values, use `@tracksTransactionsWithOptions({ numArguments })` instead, where
`numArguments` is the total number of arguments to the function, including the
last object which contains a key named `promise`.

*/

var tracksTransactions = /*#__PURE__*/tracksTransactionsWithOptions({});
function tracksTransactionsWithOptions(_ref) {
  var numArguments = _ref.numArguments;
  return function (target, name, descriptor) {
    var original = descriptor.value;
    var correctArgsLength = numArguments || original.length;

    descriptor.value = function () {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var last = args[args.length - 1];
      var options;

      if (typeof last === 'object' && last !== null && last.constructor === Object) {
        args = args.slice(0, args.length - 1);
        options = last;
      } else {
        options = {};
      }

      var promise = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
        var newArgs;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return 0;

              case 2:
                // if there's already a promise, reuse it instead of setting this one--
                // this allows the function we're running to behave differently when
                // it's called directly vs. by another function. e.g. lockWeth
                if (!options.promise) options.promise = promise; // pad the list of arguments with `undefined` to account for any missing
                // ones with default values.

                newArgs = [].concat(args, times(correctArgsLength - 1 - args.length, function () {
                  return undefined;
                }), [options]);
                return _context.abrupt("return", original.apply(_this, newArgs));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();

      return promise;
    };

    return descriptor;
  };
}

var ServiceRoles = {
  CDP_MANAGER: 'mcd:cdpManager',
  CDP_TYPE: 'mcd:cdpType',
  AUCTION: 'mcd:auction',
  SYSTEM_DATA: 'mcd:systemData',
  SAVINGS: 'mcd:savings'
};
var WAD = /*#__PURE__*/new BigNumber('1e18');
var RAY = /*#__PURE__*/new BigNumber('1e27');
var RAD = /*#__PURE__*/new BigNumber('1e45');
var SECONDS_PER_YEAR = 365 * 24 * 60 * 60;

var ETH$3 = /*#__PURE__*/createCurrency('ETH');
var MKR = /*#__PURE__*/createCurrency('MKR');
var USD = /*#__PURE__*/createCurrency('USD');
var USD_ETH = /*#__PURE__*/createCurrencyRatio(USD, ETH$3);
var WETH = /*#__PURE__*/createCurrency('WETH');
var DAI = /*#__PURE__*/createCurrency('DAI');
var DSR_DAI = /*#__PURE__*/createCurrency('DSR-DAI');
var REP$1 = /*#__PURE__*/createCurrency('REP');
var ZRX$3 = /*#__PURE__*/createCurrency('ZRX');
var KNC$3 = /*#__PURE__*/createCurrency('KNC');
var OMG$1 = /*#__PURE__*/createCurrency('OMG');
var BAT$3 = /*#__PURE__*/createCurrency('BAT');
var DGD$1 = /*#__PURE__*/createCurrency('DGD');
var GNT$1 = /*#__PURE__*/createCurrency('GNT');
var USDC$3 = /*#__PURE__*/createCurrency('USDC');
var WBTC$3 = /*#__PURE__*/createCurrency('WBTC');
var TUSD$3 = /*#__PURE__*/createCurrency('TUSD');
var MANA$3 = /*#__PURE__*/createCurrency('MANA');
var USDT$3 = /*#__PURE__*/createCurrency('USDT');
var PAXUSD$3 = /*#__PURE__*/createCurrency('PAXUSD');
var COMP$3 = /*#__PURE__*/createCurrency('COMP');
var LRC$3 = /*#__PURE__*/createCurrency('LRC');
var LINK$3 = /*#__PURE__*/createCurrency('LINK');
var YFI$3 = /*#__PURE__*/createCurrency('YFI');
var BAL$3 = /*#__PURE__*/createCurrency('BAL');
var GUSD$3 = /*#__PURE__*/createCurrency('GUSD');
var UNI$3 = /*#__PURE__*/createCurrency('UNI');
var RENBTC$3 = /*#__PURE__*/createCurrency('RENBTC');
var AAVE$3 = /*#__PURE__*/createCurrency('AAVE');
var MATIC$3 = /*#__PURE__*/createCurrency('MATIC');
var WSTETH$3 = /*#__PURE__*/createCurrency('WSTETH');
var UNIV2DAIETH$3 = /*#__PURE__*/createCurrency('UNIV2DAIETH');
var UNIV2WBTCETH$3 = /*#__PURE__*/createCurrency('UNIV2WBTCETH');
var UNIV2USDCETH$3 = /*#__PURE__*/createCurrency('UNIV2USDCETH');
var UNIV2DAIUSDC$3 = /*#__PURE__*/createCurrency('UNIV2DAIUSDC');
var UNIV2ETHUSDT$3 = /*#__PURE__*/createCurrency('UNIV2ETHUSDT');
var UNIV2LINKETH$3 = /*#__PURE__*/createCurrency('UNIV2LINKETH');
var UNIV2UNIETH$3 = /*#__PURE__*/createCurrency('UNIV2UNIETH');
var UNIV2WBTCDAI$3 = /*#__PURE__*/createCurrency('UNIV2WBTCDAI');
var UNIV2AAVEETH$3 = /*#__PURE__*/createCurrency('UNIV2AAVEETH');
var UNIV2DAIUSDT$3 = /*#__PURE__*/createCurrency('UNIV2DAIUSDT');
var SAI$2 = /*#__PURE__*/createCurrency('SAI');
var defaultCdpTypes = [{
  currency: ETH$3,
  ilk: 'ETH-A'
}, {
  currency: ETH$3,
  ilk: 'ETH-B'
}, {
  currency: ETH$3,
  ilk: 'ETH-C'
}, {
  currency: BAT$3,
  ilk: 'BAT-A'
}, {
  currency: USDC$3,
  ilk: 'USDC-A',
  decimals: 6
}, {
  currency: WBTC$3,
  ilk: 'WBTC-A',
  decimals: 8
}, {
  currency: USDC$3,
  ilk: 'USDC-B',
  decimals: 6
}, {
  currency: TUSD$3,
  ilk: 'TUSD-A',
  decimals: 18
}, {
  currency: KNC$3,
  ilk: 'KNC-A',
  decimals: 18
}, {
  currency: ZRX$3,
  ilk: 'ZRX-A',
  decimals: 18
}, {
  currency: MANA$3,
  ilk: 'MANA-A',
  decimals: 18
}, {
  currency: USDT$3,
  ilk: 'USDT-A',
  decimals: 6
}, {
  currency: PAXUSD$3,
  ilk: 'PAXUSD-A',
  decimals: 18
}, {
  currency: COMP$3,
  ilk: 'COMP-A',
  decimals: 18
}, {
  currency: LRC$3,
  ilk: 'LRC-A',
  decimals: 18
}, {
  currency: LINK$3,
  ilk: 'LINK-A',
  decimals: 18
}, {
  currency: YFI$3,
  ilk: 'YFI-A',
  decimals: 18
}, {
  currency: BAL$3,
  ilk: 'BAL-A',
  decimals: 18
}, {
  currency: GUSD$3,
  ilk: 'GUSD-A',
  decimals: 2
}, {
  currency: UNI$3,
  ilk: 'UNI-A',
  decimals: 18
}, {
  currency: RENBTC$3,
  ilk: 'RENBTC-A',
  decimals: 8
}, {
  currency: AAVE$3,
  ilk: 'AAVE-A',
  decimals: 18
}, {
  currency: MATIC$3,
  ilk: 'MATIC-A',
  decimals: 18
}, {
  currency: WSTETH$3,
  ilk: 'WSTETH-A',
  decimals: 18
}, {
  currency: UNIV2DAIETH$3,
  ilk: 'UNIV2DAIETH-A',
  decimals: 18
}, {
  currency: UNIV2WBTCETH$3,
  ilk: 'UNIV2WBTCETH-A',
  decimals: 18
}, {
  currency: UNIV2USDCETH$3,
  ilk: 'UNIV2USDCETH-A',
  decimals: 18
}, {
  currency: UNIV2DAIUSDC$3,
  ilk: 'UNIV2DAIUSDC-A',
  decimals: 18
}, {
  currency: UNIV2ETHUSDT$3,
  ilk: 'UNIV2ETHUSDT-A',
  decimals: 18
}, {
  currency: UNIV2LINKETH$3,
  ilk: 'UNIV2LINKETH-A',
  decimals: 18
}, {
  currency: UNIV2UNIETH$3,
  ilk: 'UNIV2UNIETH-A',
  decimals: 18
}, {
  currency: UNIV2WBTCDAI$3,
  ilk: 'UNIV2WBTCDAI-A',
  decimals: 18
}, {
  currency: UNIV2AAVEETH$3,
  ilk: 'UNIV2AAVEETH-A',
  decimals: 18
}, {
  currency: UNIV2DAIUSDT$3,
  ilk: 'UNIV2DAIUSDT-A',
  decimals: 18
}];
var defaultTokens = /*#__PURE__*/[].concat( /*#__PURE__*/new Set( /*#__PURE__*/[].concat( /*#__PURE__*/defaultCdpTypes.map(function (type) {
  return type.currency;
}), [DAI, WETH, SAI$2, DSR_DAI])));

var web3Utils = /*#__PURE__*/new Web3().utils;
function stringToBytes(str) {
  assert(!!str, 'argument is falsy');
  assert(typeof str === 'string', 'argument is not a string');
  return utils.formatBytes32String(str);
}
function bytesToString(hex) {
  return Buffer.from(hex.replace(/^0x/, ''), 'hex').toString().replace(/\x00/g, '');
}
function castAsCurrency(value, currency) {
  if (currency.isInstance(value)) return value;
  if (typeof value === 'string' || typeof value === 'number') return currency(value);
  throw new Error("Can't cast " + value + " as " + currency.symbol);
}
function parseWeiNumeric(value, denom) {
  if (denom === void 0) {
    denom = 'ether';
  }

  return web3Utils.fromWei(new BigNumber(value).toString(16), denom);
}
function numberFromNumeric(value) {
  return new BigNumber(value).toNumber();
}
function promiseWait(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
}

function debtCeiling(line) {
  return DAI.rad(line._hex);
}
function liquidationPenalty(chop) {
  return new BigNumber(chop.toString()).dividedBy(WAD).minus(1).toNumber();
}
function liquidationRatio(mat) {
  var ratio = createCurrencyRatio(USD, DAI);
  return ratio(new BigNumber(mat.toString()).dividedBy(RAY).toString());
}
function price(currency, par, spot, liquidationRatio) {
  par = new BigNumber(par.toString()).dividedBy(RAY);
  spot = new BigNumber(spot.toString()).dividedBy(RAY);
  var ratio = createCurrencyRatio(USD, currency);
  var price = spot.times(par).times(liquidationRatio.toNumber());
  return ratio(price);
}
var secondsPerYear = 60 * 60 * 24 * 365;
function annualStabilityFee(duty) {
  duty = new BigNumber(duty.toString()).dividedBy(RAY);
  BigNumber.config({
    POW_PRECISION: 100
  });
  return duty.pow(secondsPerYear).minus(1).toNumber();
}
function collateralAmount(currency, ink) {
  return currency.wei(ink._hex);
}
function collateralValue(collateralAmount, price) {
  return collateralAmount.times(price);
}
function debtValue(art, rate) {
  art = DAI.wei(art._hex);
  return art.times(rate._hex).shiftedBy(-27);
}
function collateralizationRatio(collateralValue, debtValue) {
  if (debtValue.eq(0)) {
    var ratio = createCurrencyRatio(USD, DAI);
    return ratio(Infinity);
  }

  return collateralValue.div(debtValue);
}
function liquidationPrice(collateralAmount, debtValue, liquidationRatio) {
  if (collateralAmount.eq(0)) {
    var ratio = createCurrencyRatio(USD, collateralAmount.type);
    return ratio(Infinity);
  }

  return debtValue.times(liquidationRatio).div(collateralAmount);
}
function minSafeCollateralAmount(debtValue, liquidationRatio, price) {
  return debtValue.times(liquidationRatio).div(price);
}
function daiAvailable(collateralValue, debtValue, liquidationRatio) {
  var maxSafeDebtValue = collateralValue.div(liquidationRatio);
  return debtValue.lt(maxSafeDebtValue) ? DAI(maxSafeDebtValue.minus(debtValue)) : DAI(0);
}

var ManagedCdpClass = /*#__PURE__*/function () {
  function ManagedCdpClass(id, ilk, cdpManager, options) {
    if (options === void 0) {
      options = {
        prefetch: true
      };
    }

    assert(typeof id === 'number', 'ID must be a number');
    this.id = id;
    assert(ilk && typeof ilk === 'string', 'Must specify ilk');
    this.ilk = ilk;
    this._cdpManager = cdpManager;
    this.type = cdpManager.get(ServiceRoles.CDP_TYPE).getCdpType(null, ilk);
    this.currency = this.type.currency;
    this.cache = {};
    if (options.prefetch) this.prefetch();
  }

  var _proto = ManagedCdpClass.prototype;

  _proto.getOwner = function getOwner() {
    return this._cdpManager.getOwner(this.id);
  };

  _proto.getUrn = function getUrn() {
    return this._cdpManager.getUrn(this.id);
  };

  _proto.lockCollateral = function lockCollateral(amount) {
    amount = castAsCurrency(amount, this.currency);
    return this._cdpManager.lock(this.id, this.ilk, amount, null);
  };

  _proto.drawDai = function drawDai(amount, _ref) {
    var promise = _ref.promise;
    return this._cdpManager.draw(this.id, this.ilk, amount, {
      promise: promise
    });
  };

  _proto.lockAndDraw = function lockAndDraw(lockAmount, drawAmount, _ref2) {
    if (lockAmount === void 0) {
      lockAmount = this.currency(0);
    }

    if (drawAmount === void 0) {
      drawAmount = DAI(0);
    }

    var promise = _ref2.promise;
    assert(lockAmount && drawAmount, 'amounts must be defined');
    lockAmount = castAsCurrency(lockAmount, this.currency);
    drawAmount = castAsCurrency(drawAmount, DAI);
    return this._cdpManager.lockAndDraw(this.id, this.ilk, lockAmount, drawAmount, {
      promise: promise
    });
  };

  _proto.wipeDai = function wipeDai(amount) {
    amount = castAsCurrency(amount, DAI);
    return this._cdpManager.wipe(this.id, amount, null);
  };

  _proto.unsafeWipe = function unsafeWipe(amount) {
    amount = castAsCurrency(amount, DAI);
    return this._cdpManager.unsafeWipe(this.id, amount);
  };

  _proto.wipeAll = function wipeAll() {
    return this._cdpManager.wipeAll(this.id, null);
  };

  _proto.unsafeWipeAll = function unsafeWipeAll() {
    return this._cdpManager.unsafeWipeAll(this.id);
  };

  _proto.freeCollateral = function freeCollateral(amount) {
    return this.wipeAndFree(undefined, amount);
  };

  _proto.give = function give(address) {
    return this._cdpManager.give(this.id, address);
  };

  _proto.giveToProxy = function giveToProxy(address) {
    return this._cdpManager.giveToProxy(this.id, address);
  };

  _proto.wipeAndFree = function wipeAndFree(wipeAmount, freeAmount, _temp) {
    if (wipeAmount === void 0) {
      wipeAmount = DAI(0);
    }

    if (freeAmount === void 0) {
      freeAmount = this.currency(0);
    }

    var _ref3 = _temp === void 0 ? {} : _temp,
        _ref3$promise = _ref3.promise,
        promise = _ref3$promise === void 0 ? undefined : _ref3$promise;

    assert(wipeAmount && freeAmount, 'amounts must be defined');
    wipeAmount = castAsCurrency(wipeAmount, DAI);
    freeAmount = castAsCurrency(freeAmount, this.currency);
    return this._cdpManager.wipeAndFree(this.id, this.ilk, wipeAmount, freeAmount, {
      promise: promise
    });
  };

  _proto.wipeAllAndFree = function wipeAllAndFree(freeAmount, _ref4) {
    if (freeAmount === void 0) {
      freeAmount = this.currency(0);
    }

    var promise = _ref4.promise;
    assert(freeAmount, 'free amount must be defined');
    freeAmount = castAsCurrency(freeAmount, this.currency);
    return this._cdpManager.wipeAllAndFree(this.id, this.ilk, freeAmount, {
      promise: promise
    });
  };

  _proto._getUrnInfo = function _getUrnInfo() {
    var _this = this;

    if (!this._urnInfoPromise) {
      this._urnInfoPromise = this._cdpManager.getUrn(this.id).then(function (urn) {
        return _this._cdpManager.vat.urns(stringToBytes(_this.ilk), urn);
      });
    }

    return this._urnInfoPromise.then(function (value) {
      _this.cache.urnInfo = value;
      return value;
    });
  };

  _proto._getCached = function _getCached(name) {
    assert(this.cache[name], name + " is not cached");
    return this.cache[name];
  };

  _proto.prefetch = function prefetch() {
    return Promise.all([this._getUrnInfo(), this.type.prefetch()]);
  };

  _proto.reset = function reset() {
    this._urnInfoPromise = null;
    this.cache = {};
    this.type.reset();
  };

  _createClass(ManagedCdpClass, [{
    key: "collateralAmount",
    get: function get() {
      return collateralAmount(this.currency, this._getCached('urnInfo').ink);
    }
  }, {
    key: "collateralValue",
    get: function get() {
      return collateralValue(this.collateralAmount, this.type.price);
    }
  }, {
    key: "debtValue",
    get: function get() {
      return debtValue(this._getCached('urnInfo').art, this.type._getCached('vatInfo').rate);
    }
  }, {
    key: "collateralizationRatio",
    get: function get() {
      return collateralizationRatio(this.collateralValue, this.debtValue);
    }
  }, {
    key: "liquidationPrice",
    get: function get() {
      return liquidationPrice(this.collateralAmount, this.debtValue, this.type.liquidationRatio);
    }
  }, {
    key: "isSafe",
    get: function get() {
      return this.type.price.gte(this.liquidationPrice);
    }
  }, {
    key: "minSafeCollateralAmount",
    get: function get() {
      return minSafeCollateralAmount(this.debtValue, this.type.liquidationRatio, this.type.price);
    }
  }, {
    key: "collateralAvailable",
    get: function get() {
      return this.collateralAmount.minus(this.minSafeCollateralAmount);
    }
  }, {
    key: "daiAvailable",
    get: function get() {
      return daiAvailable(this.collateralValue, this.debtValue, this.type.liquidationRatio);
    }
  }]);

  return ManagedCdpClass;
}();

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", void 0)], ManagedCdpClass.prototype, "drawDai", null);

__decorate([tracksTransactionsWithOptions({
  numArguments: 3
}), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", void 0)], ManagedCdpClass.prototype, "lockAndDraw", null);

__decorate([tracksTransactionsWithOptions({
  numArguments: 3
}), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", void 0)], ManagedCdpClass.prototype, "wipeAndFree", null);

__decorate([tracksTransactionsWithOptions({
  numArguments: 1
}), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", void 0)], ManagedCdpClass.prototype, "wipeAllAndFree", null);

var ManagedCdp = {
  create: /*#__PURE__*/function () {
    var _create = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(createTxo, ilk, cdpManager) {
      var id, cdp;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              id = cdpManager.getNewCdpId(createTxo);
              cdp = new ManagedCdpClass(id, ilk, cdpManager);
              _context.next = 4;
              return cdp.prefetch();

            case 4:
              return _context.abrupt("return", cdp);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function create(_x, _x2, _x3) {
      return _create.apply(this, arguments);
    }

    return create;
  }()
};

var formatAddress = function formatAddress(v) {
  return '0x' + v.slice(26).toLowerCase();
};

var funcSigTopic = function funcSigTopic(v) {
  return padEnd(ethAbi.encodeFunctionSignature(v), 66, '0');
};

var EVENT_GIVE = /*#__PURE__*/funcSigTopic('give(uint256,address)');
var EVENT_DAI_ADAPTER_EXIT = /*#__PURE__*/funcSigTopic('exit(address,uint256)');
var EVENT_DAI_ADAPTER_JOIN = /*#__PURE__*/funcSigTopic('join(address,uint256)');
var EVENT_POT_JOIN = /*#__PURE__*/funcSigTopic('join(uint256)');
var EVENT_POT_EXIT = /*#__PURE__*/funcSigTopic('exit(uint256)');
var EVENT_VAT_FROB = /*#__PURE__*/funcSigTopic('frob(bytes32,address,address,address,int256,int256)');
var EVENT_MANAGER_FROB = /*#__PURE__*/funcSigTopic('frob(uint256,int256,int256)');
var EVENT_MANAGER_MOVE = /*#__PURE__*/funcSigTopic('move(uint256,address,uint256)');

var decodeManagerFrob = function decodeManagerFrob(data) {
  var sig = ethAbi.encodeFunctionSignature('frob(uint256,int256,int256)').slice(2);
  var decoded = ethAbi.decodeParameters(['uint256', // id
  'int256', // dink
  'int256' // dart
  ], '0x' + data.replace(new RegExp('^.+?' + sig), ''));
  return {
    id: decoded[0].toString(),
    dink: decoded[1],
    dart: decoded[2] // can't be used directly because would need to be scaled up using vat.ilks[ilk].rate

  };
};

var decodeVatFrob = function decodeVatFrob(data) {
  var sig = ethAbi.encodeFunctionSignature('frob(bytes32,address,address,address,int256,int256)').slice(2);
  var decoded = ethAbi.decodeParameters(['bytes32', // ilk
  'address', // u (urnHandler)
  'address', // v (urnHandler)
  'address', // w (urnHandler)
  'int256', // dink
  'int256' // dart
  ], '0x' + data.replace(new RegExp('^.+?' + sig), ''));
  return {
    ilk: bytesToString(decoded[0].toString()),
    urnHandler: decoded[1].toString(),
    dink: decoded[4].toString(),
    dart: decoded[5].toString()
  };
};

function getEventHistory(_x, _x2, _x3) {
  return _getEventHistory.apply(this, arguments);
}

function _getEventHistory() {
  _getEventHistory = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(cdpManager, managedCdp, cache) {
    var MCD_JOIN_DAI, CDP_MANAGER, MIGRATION, MCD_VAT, MCD_CAT, OLD_MCD_CAT, id, web3, genesis, promisesBlockTimestamp, getBlockTimestamp, urnHandler, ilk, Bite, _cdpManager$get$getCo, newCdpTopic0, _cdpManager$get$getCo2, biteTopic0, cdpManagerNewCdp, daiAdapterJoinExit, vatFrob, cdpManagerGive, catBite, catUpgradeBlock, lookups;

    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            MCD_JOIN_DAI = cdpManager.get('smartContract').getContractAddress('MCD_JOIN_DAI'); // const MCD_JOIN_SAI = cdpManager
            //   .get('smartContract')
            //   .getContractAddress('MCD_JOIN_SAI');

            CDP_MANAGER = cdpManager.get('smartContract').getContractAddress('CDP_MANAGER');
            MIGRATION = cdpManager.get('smartContract').getContractAddress('MIGRATION');
            MCD_VAT = cdpManager.get('smartContract').getContractAddress('MCD_VAT');
            MCD_CAT = cdpManager.get('smartContract').getContractAddress('MCD_CAT');
            OLD_MCD_CAT = cdpManager.get('smartContract').getContractAddress('OLD_MCD_CAT');
            id = managedCdp.id;

            if (!cache[id]) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", cache[id]);

          case 9:
            web3 = cdpManager.get('web3'); // 8600000 is 2019-09-22 on mainnet and 2018-09-04 on kovan

            genesis = [1, 42].includes(web3.network) ? 8600000 : 1;
            promisesBlockTimestamp = {};

            getBlockTimestamp = function getBlockTimestamp(block) {
              if (!promisesBlockTimestamp[block]) {
                promisesBlockTimestamp[block] = web3.getBlock(block, false);
              }

              return promisesBlockTimestamp[block];
            };

            _context5.next = 15;
            return cdpManager.getUrn(id);

          case 15:
            urnHandler = _context5.sent.toLowerCase();
            ilk = managedCdp.ilk;
            Bite = cdpManager.get('smartContract').getContract('MCD_CAT')["interface"].getEvent('Bite');
            _cdpManager$get$getCo = cdpManager.get('smartContract').getContract('CDP_MANAGER')["interface"].encodeFilterTopics('NewCdp', []), newCdpTopic0 = _cdpManager$get$getCo[0];
            _cdpManager$get$getCo2 = cdpManager.get('smartContract').getContract('MCD_CAT')["interface"].encodeFilterTopics('Bite', []), biteTopic0 = _cdpManager$get$getCo2[0];
            cdpManagerNewCdp = {
              request: web3.getPastLogs({
                address: CDP_MANAGER,
                topics: [newCdpTopic0, null, null, '0x' + padStart(id.toString(16), 64, '0')],
                fromBlock: genesis
              }),
              result: function result(r) {
                return r.map(function (_ref) {
                  var block = _ref.blockNumber,
                      txHash = _ref.transactionHash;
                  return {
                    type: 'OPEN',
                    order: 0,
                    block: block,
                    txHash: txHash,
                    id: id,
                    ilk: ilk
                  };
                });
              }
            };
            daiAdapterJoinExit = {
              request: web3.getPastLogs({
                address: CDP_MANAGER,
                topics: [EVENT_MANAGER_FROB, null, '0x' + padStart(id.toString(16), 64, '0')],
                fromBlock: genesis
              }),
              result: function () {
                var _result = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(r) {
                  return runtime_1.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          return _context2.abrupt("return", r.reduce( /*#__PURE__*/function () {
                            var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(acc, _ref2) {
                              var block, data, topics, _decodeManagerFrob, dart, _acc, proxy, _yield$Promise$all, joinDaiEvents, cdpMoveEvents, filteredJoinDaiEvents;

                              return runtime_1.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      block = _ref2.blockNumber, data = _ref2.data, topics = _ref2.topics;
                                      _decodeManagerFrob = decodeManagerFrob(data), dart = _decodeManagerFrob.dart;
                                      _context.next = 4;
                                      return acc;

                                    case 4:
                                      acc = _context.sent;
                                      dart = new BigNumber(dart); // Imprecise debt amount frobbed (not scaled by vat.ilks[ilk].rate)

                                      if (!(dart.lt(0) || dart.gt(0))) {
                                        _context.next = 15;
                                        break;
                                      }

                                      // Lookup the dai join events on this block for this proxy address
                                      proxy = topics[1];
                                      _context.next = 10;
                                      return Promise.all([web3.getPastLogs({
                                        /*
                                        FIXME: ethers 5 doesn't support passing an array of addresses into getLogs
                                        as we move further away from SCD, join Sai events are less likely, but
                                        we should eventually re-add this functionality by duplicating this call for MCD_JOIN_SAI.
                                        */
                                        // address: [MCD_JOIN_DAI, MCD_JOIN_SAI],
                                        address: MCD_JOIN_DAI,
                                        topics: [dart.lt(0) ? EVENT_DAI_ADAPTER_JOIN : EVENT_DAI_ADAPTER_EXIT, proxy],
                                        fromBlock: block,
                                        toBlock: block
                                      }), web3.getPastLogs({
                                        address: CDP_MANAGER,
                                        topics: [EVENT_MANAGER_MOVE, proxy, '0x' + padStart(id.toString(16), 64, '0')],
                                        fromBlock: block,
                                        toBlock: block
                                      })]);

                                    case 10:
                                      _yield$Promise$all = _context.sent;
                                      joinDaiEvents = _yield$Promise$all[0];
                                      cdpMoveEvents = _yield$Promise$all[1];
                                      filteredJoinDaiEvents = joinDaiEvents.filter(function (daiEvent) {
                                        return cdpMoveEvents.some(function (moveEvent) {
                                          return moveEvent.transactionHash === daiEvent.transactionHash;
                                        });
                                      });

                                      (_acc = acc).push.apply(_acc, filteredJoinDaiEvents.map(function (_ref4) {
                                        var address = _ref4.address,
                                            block = _ref4.blockNumber,
                                            txHash = _ref4.transactionHash,
                                            topics = _ref4.topics;
                                        return {
                                          type: dart.lt(0) ? 'PAY_BACK' : 'GENERATE',
                                          order: 2,
                                          block: block,
                                          txHash: txHash,
                                          id: id,
                                          ilk: ilk,
                                          adapter: address.toLowerCase(),
                                          proxy: formatAddress(topics[1]),
                                          recipient: formatAddress(topics[2]),
                                          amount: parseWeiNumeric(topics[3])
                                        };
                                      }));

                                    case 15:
                                      return _context.abrupt("return", acc);

                                    case 16:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee);
                            }));

                            return function (_x8, _x9) {
                              return _ref3.apply(this, arguments);
                            };
                          }(), []));

                        case 1:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }));

                function result(_x7) {
                  return _result.apply(this, arguments);
                }

                return result;
              }()
            };
            vatFrob = {
              request: web3.getPastLogs({
                address: MCD_VAT,
                topics: [EVENT_VAT_FROB, null, '0x' + padStart(urnHandler.slice(2), 64, '0')],
                fromBlock: genesis
              }),
              result: function result(r) {
                return r.map(function (_ref5) {
                  var address = _ref5.address,
                      block = _ref5.blockNumber,
                      txHash = _ref5.transactionHash,
                      data = _ref5.data,
                      topics = _ref5.topics,
                      transactionLogIndex = _ref5.transactionLogIndex;

                  var _decodeVatFrob = decodeVatFrob(data),
                      ilk = _decodeVatFrob.ilk,
                      dink = _decodeVatFrob.dink,
                      urnHandler = _decodeVatFrob.urnHandler;

                  dink = new BigNumber(dink);
                  var reclaim = formatAddress(topics[2]) === urnHandler.toLowerCase() && formatAddress(topics[3]) == urnHandler.toLowerCase() && parseInt(transactionLogIndex, 16) === 1;
                  return dink.lt(0) || dink.gt(0) ? {
                    type: dink.lt(0) ? 'WITHDRAW' : reclaim ? 'RECLAIM' : 'DEPOSIT',
                    order: dink.lt(0) ? 3 : 1,
                    block: block,
                    txHash: txHash,
                    id: id,
                    ilk: ilk,
                    gem: managedCdp.currency.symbol,
                    adapter: address.toLowerCase(),
                    amount: Math.abs(parseWeiNumeric(dink)).toString()
                  } : null;
                });
              }
            };
            cdpManagerGive = {
              request: web3.getPastLogs({
                address: CDP_MANAGER,
                topics: [EVENT_GIVE, null, '0x' + padStart(id.toString(16), 64, '0')],
                fromBlock: genesis
              }),
              result: function result(r) {
                return r.map(function (_ref6) {
                  var block = _ref6.blockNumber,
                      txHash = _ref6.transactionHash,
                      topics = _ref6.topics;
                  var prevOwner = formatAddress(topics[1]);
                  return {
                    type: prevOwner === MIGRATION ? 'MIGRATE' : 'GIVE',
                    order: 1,
                    block: block,
                    txHash: txHash,
                    prevOwner: prevOwner,
                    id: numberFromNumeric(topics[2]),
                    newOwner: formatAddress(topics[3])
                  };
                });
              }
            };

            catBite = function catBite(address, fromBlock, toBlock) {
              return {
                request: web3.getPastLogs({
                  address: address,
                  topics: [biteTopic0, null, '0x' + padStart(urnHandler.slice(2), 64, '0')],
                  fromBlock: fromBlock,
                  toBlock: toBlock
                }),
                result: function result(r) {
                  return r.map(function (tx) {
                    var topics = tx.topics,
                        data = tx.data,
                        block = tx.blockNumber,
                        txHash = tx.transactionHash;
                    var inputs = Bite.inputs.names.reduceRight(function (acc, name, idx) {
                      if (['ilk', 'urn'].some(function (indexed) {
                        return indexed === name;
                      })) return acc;
                      return [{
                        type: Bite.inputs.types[idx],
                        name: name
                      }].concat(acc);
                    }, []);

                    var _ethAbi$decodeLog = ethAbi.decodeLog(inputs, data, topics),
                        id = _ethAbi$decodeLog.id,
                        ink = _ethAbi$decodeLog.ink;

                    return {
                      type: 'BITE',
                      auctionId: numberFromNumeric(id),
                      amount: new BigNumber(ink).shiftedBy(-18),
                      gem: managedCdp.currency.symbol,
                      block: block,
                      txHash: txHash
                    };
                  });
                }
              };
            };

            catUpgradeBlock = [1, 42].includes(web3.network) ? 10769102 : 1;
            lookups = [cdpManagerNewCdp, daiAdapterJoinExit, vatFrob, cdpManagerGive, catBite(MCD_CAT, catUpgradeBlock), catBite(OLD_MCD_CAT, genesis, catUpgradeBlock)]; // eslint-disable-next-line require-atomic-updates

            cache[id] = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
              var results;
              return runtime_1.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.next = 2;
                      return Promise.all(lookups.map(function (l) {
                        return l.request;
                      }));

                    case 2:
                      results = _context4.sent;
                      _context4.t0 = orderBy;
                      _context4.t1 = Promise;
                      _context4.t2 = flatten;
                      _context4.next = 8;
                      return Promise.all(results.map(function (r, i) {
                        return lookups[i].result(r);
                      }));

                    case 8:
                      _context4.t3 = _context4.sent;
                      _context4.t4 = (0, _context4.t2)(_context4.t3).filter(function (r) {
                        return r !== null;
                      }).map( /*#__PURE__*/function () {
                        var _ref8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(e) {
                          return runtime_1.wrap(function _callee3$(_context3) {
                            while (1) {
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  _context3.next = 2;
                                  return getBlockTimestamp(e.block);

                                case 2:
                                  e.timestamp = _context3.sent.timestamp;
                                  return _context3.abrupt("return", e);

                                case 4:
                                case "end":
                                  return _context3.stop();
                              }
                            }
                          }, _callee3);
                        }));

                        return function (_x10) {
                          return _ref8.apply(this, arguments);
                        };
                      }());
                      _context4.next = 12;
                      return _context4.t1.all.call(_context4.t1, _context4.t4);

                    case 12:
                      _context4.t5 = _context4.sent;
                      _context4.t6 = ['block', 'order'];
                      _context4.t7 = ['desc', 'desc'];
                      return _context4.abrupt("return", (0, _context4.t0)(_context4.t5, _context4.t6, _context4.t7).map(function (e) {
                        delete e.order;
                        return e;
                      }));

                    case 16:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4);
            }))();
            return _context5.abrupt("return", cache[id]);

          case 29:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getEventHistory.apply(this, arguments);
}

function getDsrEventHistory(_x4, _x5, _x6) {
  return _getDsrEventHistory.apply(this, arguments);
}

function _getDsrEventHistory() {
  _getDsrEventHistory = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(service, address, cache) {
    var MCD_JOIN_DAI, MCD_POT, web3, fromBlock, promisesBlockTimestamp, getBlockTimestamp, lookups;
    return runtime_1.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            MCD_JOIN_DAI = service.get('smartContract').getContractAddress('MCD_JOIN_DAI');
            MCD_POT = service.get('smartContract').getContractAddress('MCD_POT');
            address = address.toLowerCase();

            if (!cache[address]) {
              _context12.next = 5;
              break;
            }

            return _context12.abrupt("return", cache[address]);

          case 5:
            web3 = service.get('web3'); // 8600000 is 2019-09-22 on mainnet and 2018-09-04 on kovan

            fromBlock = [1, 42].includes(web3.network) ? 8600000 : 1;
            promisesBlockTimestamp = {};

            getBlockTimestamp = function getBlockTimestamp(block) {
              if (!promisesBlockTimestamp[block]) {
                promisesBlockTimestamp[block] = web3.getBlock(block, false);
              }

              return promisesBlockTimestamp[block];
            };

            lookups = [{
              request: web3.getPastLogs({
                address: MCD_POT,
                topics: [EVENT_POT_JOIN, '0x' + padStart(address.slice(2), 64, '0')],
                fromBlock: fromBlock
              }),
              result: function () {
                var _result2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(r) {
                  return runtime_1.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          return _context7.abrupt("return", r.reduce( /*#__PURE__*/function () {
                            var _ref10 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(acc, _ref9) {
                              var block, txHash, adapterJoinEvents, _adapterJoinEvents$fi, adapterTopics;

                              return runtime_1.wrap(function _callee6$(_context6) {
                                while (1) {
                                  switch (_context6.prev = _context6.next) {
                                    case 0:
                                      block = _ref9.blockNumber, txHash = _ref9.transactionHash;
                                      _context6.next = 3;
                                      return acc;

                                    case 3:
                                      acc = _context6.sent;
                                      _context6.next = 6;
                                      return web3.getPastLogs({
                                        address: MCD_JOIN_DAI,
                                        topics: [EVENT_DAI_ADAPTER_JOIN, '0x' + padStart(address.slice(2), 64, '0')],
                                        fromBlock: fromBlock
                                      });

                                    case 6:
                                      adapterJoinEvents = _context6.sent;
                                      _adapterJoinEvents$fi = adapterJoinEvents.filter(function (x) {
                                        return x.transactionHash === txHash;
                                      }), adapterTopics = _adapterJoinEvents$fi[0].topics;
                                      acc.push({
                                        type: 'DSR_DEPOSIT',
                                        order: 0,
                                        block: block,
                                        txHash: txHash,
                                        amount: parseWeiNumeric(adapterTopics[3]),
                                        gem: 'DAI'
                                      });
                                      return _context6.abrupt("return", acc);

                                    case 10:
                                    case "end":
                                      return _context6.stop();
                                  }
                                }
                              }, _callee6);
                            }));

                            return function (_x12, _x13) {
                              return _ref10.apply(this, arguments);
                            };
                          }(), []));

                        case 1:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7);
                }));

                function result(_x11) {
                  return _result2.apply(this, arguments);
                }

                return result;
              }()
            }, {
              request: web3.getPastLogs({
                address: MCD_POT,
                topics: [EVENT_POT_EXIT, '0x' + padStart(address.slice(2), 64, '0')],
                fromBlock: fromBlock
              }),
              result: function () {
                var _result3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(r) {
                  return runtime_1.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          return _context9.abrupt("return", r.reduce( /*#__PURE__*/function () {
                            var _ref12 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(acc, _ref11) {
                              var block, txHash, adapterExitEvents, _adapterExitEvents$fi, adapterTopics;

                              return runtime_1.wrap(function _callee8$(_context8) {
                                while (1) {
                                  switch (_context8.prev = _context8.next) {
                                    case 0:
                                      block = _ref11.blockNumber, txHash = _ref11.transactionHash;
                                      _context8.next = 3;
                                      return acc;

                                    case 3:
                                      acc = _context8.sent;
                                      _context8.next = 6;
                                      return web3.getPastLogs({
                                        address: MCD_JOIN_DAI,
                                        topics: [EVENT_DAI_ADAPTER_EXIT, '0x' + padStart(address.slice(2), 64, '0')],
                                        fromBlock: fromBlock
                                      });

                                    case 6:
                                      adapterExitEvents = _context8.sent;
                                      _adapterExitEvents$fi = adapterExitEvents.filter(function (x) {
                                        return x.transactionHash === txHash;
                                      }), adapterTopics = _adapterExitEvents$fi[0].topics;
                                      acc.push({
                                        type: 'DSR_WITHDRAW',
                                        order: 0,
                                        block: block,
                                        txHash: txHash,
                                        amount: parseWeiNumeric(adapterTopics[3]),
                                        gem: 'DAI'
                                      });
                                      return _context8.abrupt("return", acc);

                                    case 10:
                                    case "end":
                                      return _context8.stop();
                                  }
                                }
                              }, _callee8);
                            }));

                            return function (_x15, _x16) {
                              return _ref12.apply(this, arguments);
                            };
                          }(), []));

                        case 1:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }));

                function result(_x14) {
                  return _result3.apply(this, arguments);
                }

                return result;
              }()
            }]; // eslint-disable-next-line require-atomic-updates

            cache[address] = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
              var results;
              return runtime_1.wrap(function _callee11$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      _context11.next = 2;
                      return Promise.all(lookups.map(function (l) {
                        return l.request;
                      }));

                    case 2:
                      results = _context11.sent;
                      _context11.t0 = orderBy;
                      _context11.t1 = Promise;
                      _context11.t2 = flatten;
                      _context11.next = 8;
                      return Promise.all(results.map(function (r, i) {
                        return lookups[i].result(r);
                      }));

                    case 8:
                      _context11.t3 = _context11.sent;
                      _context11.t4 = (0, _context11.t2)(_context11.t3).filter(function (r) {
                        return r !== null;
                      }).map( /*#__PURE__*/function () {
                        var _ref14 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(e) {
                          return runtime_1.wrap(function _callee10$(_context10) {
                            while (1) {
                              switch (_context10.prev = _context10.next) {
                                case 0:
                                  _context10.next = 2;
                                  return getBlockTimestamp(e.block);

                                case 2:
                                  e.timestamp = _context10.sent.timestamp;
                                  return _context10.abrupt("return", e);

                                case 4:
                                case "end":
                                  return _context10.stop();
                              }
                            }
                          }, _callee10);
                        }));

                        return function (_x17) {
                          return _ref14.apply(this, arguments);
                        };
                      }());
                      _context11.next = 12;
                      return _context11.t1.all.call(_context11.t1, _context11.t4);

                    case 12:
                      _context11.t5 = _context11.sent;
                      _context11.t6 = ['block', 'order'];
                      _context11.t7 = ['desc', 'desc'];
                      return _context11.abrupt("return", (0, _context11.t0)(_context11.t5, _context11.t6, _context11.t7).map(function (e) {
                        delete e.order;
                        return e;
                      }));

                    case 16:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee11);
            }))();
            return _context12.abrupt("return", cache[address]);

          case 12:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _getDsrEventHistory.apply(this, arguments);
}

var CDP_MANAGER$3 = ServiceRoles.CDP_MANAGER,
    CDP_TYPE = ServiceRoles.CDP_TYPE,
    SYSTEM_DATA = ServiceRoles.SYSTEM_DATA;

var CdpManager = /*#__PURE__*/function (_LocalService) {
  _inheritsLoose(CdpManager, _LocalService);

  function CdpManager(name) {
    var _this;

    if (name === void 0) {
      name = CDP_MANAGER$3;
    }

    _this = _LocalService.call(this, name, ['smartContract', CDP_TYPE, SYSTEM_DATA, 'accounts', 'proxy', 'token', 'web3']) || this;
    _this._getCdpIdsPromises = {};
    _this._getUrnPromises = {};
    return _this;
  }

  var _proto = CdpManager.prototype;

  _proto.getCdpIds = /*#__PURE__*/function () {
    var _getCdpIds = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(proxyAddress, descending) {
      var getCdpsMethod, _yield$this$_getCdpId, ids, ilks;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (descending === void 0) {
                descending = true;
              }

              getCdpsMethod = descending ? 'getCdpsDesc' : 'getCdpsAsc';

              if (!this._getCdpIdsPromises[proxyAddress]) {
                this._getCdpIdsPromises[proxyAddress] = this.get('smartContract').getContract('GET_CDPS')[getCdpsMethod](this._managerAddress, proxyAddress);
              }

              _context.next = 5;
              return this._getCdpIdsPromises[proxyAddress];

            case 5:
              _yield$this$_getCdpId = _context.sent;
              ids = _yield$this$_getCdpId[0];
              ilks = _yield$this$_getCdpId[2];
              assert(ids.length === ilks.length, 'ids and ilks must be the same length');
              return _context.abrupt("return", ids.map(function (id, index) {
                return {
                  id: id.toNumber(),
                  ilk: bytesToString(ilks[index])
                };
              }));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getCdpIds(_x, _x2) {
      return _getCdpIds.apply(this, arguments);
    }

    return getCdpIds;
  }();

  _proto.getCdp = /*#__PURE__*/function () {
    var _getCdp = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(id, options) {
      var cacheEnabled, cdp, ilk, i;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              cacheEnabled = !has(options, 'cache') || options.cache;
              cdp = this._getFromInstanceCache(id, cacheEnabled);

              if (!cdp) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", cdp);

            case 4:
              i = 0;

            case 5:
              if (!(i < 5)) {
                _context2.next = 16;
                break;
              }

              _context2.next = 8;
              return this.getIlkForCdp(id);

            case 8:
              ilk = _context2.sent;

              if (!ilk) {
                _context2.next = 11;
                break;
              }

              return _context2.abrupt("break", 16);

            case 11:
              _context2.next = 13;
              return promiseWait(5000);

            case 13:
              i++;
              _context2.next = 5;
              break;

            case 16:
              cdp = new ManagedCdpClass(id, ilk, this, options);

              this._putInInstanceCache(id, cdp, cacheEnabled);

              if (!(!has(options, 'prefetch') || options.prefetch)) {
                _context2.next = 21;
                break;
              }

              _context2.next = 21;
              return cdp.prefetch();

            case 21:
              return _context2.abrupt("return", cdp);

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getCdp(_x3, _x4) {
      return _getCdp.apply(this, arguments);
    }

    return getCdp;
  }();

  _proto.getIlkForCdp = /*#__PURE__*/function () {
    var _getIlkForCdp = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(id) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.t0 = bytesToString;
              _context3.next = 3;
              return this._manager.ilks(id);

            case 3:
              _context3.t1 = _context3.sent;
              return _context3.abrupt("return", (0, _context3.t0)(_context3.t1));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getIlkForCdp(_x5) {
      return _getIlkForCdp.apply(this, arguments);
    }

    return getIlkForCdp;
  }();

  _proto.getCombinedDebtValue = /*#__PURE__*/function () {
    var _getCombinedDebtValue = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(proxyAddress, descending) {
      var _this2 = this;

      var ids, debts;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (descending === void 0) {
                descending = true;
              }

              _context4.next = 3;
              return this.getCdpIds(proxyAddress, descending);

            case 3:
              ids = _context4.sent;
              _context4.next = 6;
              return Promise.all(ids.map(function (c) {
                var cdp = new ManagedCdpClass(c.id, c.ilk, _this2);
                return cdp.prefetch().then(function () {
                  return cdp.debtValue;
                });
              }));

            case 6:
              debts = _context4.sent;
              return _context4.abrupt("return", debts.reduce(function (a, b) {
                return a.plus(b);
              }));

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getCombinedDebtValue(_x6, _x7) {
      return _getCombinedDebtValue.apply(this, arguments);
    }

    return getCombinedDebtValue;
  }();

  _proto.open = /*#__PURE__*/function () {
    var _open = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(ilk, _ref) {
      var promise, _ref$cache, cache, proxy, op, cdp;

      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              promise = _ref.promise, _ref$cache = _ref.cache, cache = _ref$cache === void 0 ? true : _ref$cache;
              _context5.next = 3;
              return this.get('proxy').ensureProxy({
                promise: promise
              });

            case 3:
              proxy = _context5.sent;
              op = this.proxyActions.open(this._managerAddress, stringToBytes(ilk), proxy, {
                dsProxy: true,
                promise: promise,
                metadata: {
                  ilk: ilk
                }
              });
              _context5.t0 = ManagedCdp;
              _context5.next = 8;
              return op;

            case 8:
              _context5.t1 = _context5.sent;
              _context5.t2 = ilk;
              _context5.t3 = this;
              _context5.next = 13;
              return _context5.t0.create.call(_context5.t0, _context5.t1, _context5.t2, _context5.t3);

            case 13:
              cdp = _context5.sent;

              this._putInInstanceCache(cdp.id, cdp, cache);

              return _context5.abrupt("return", cdp);

            case 16:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function open(_x8, _x9) {
      return _open.apply(this, arguments);
    }

    return open;
  }();

  _proto.reclaimCollateral = /*#__PURE__*/function () {
    var _reclaimCollateral = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(id, dink, _ref2) {
      var promise;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              promise = _ref2.promise;
              dink = castAsCurrency(dink, ETH$3);
              return _context6.abrupt("return", this.proxyActions.frob(this._managerAddress, this.getIdBytes(id), dink.toFixed('wei'), 0, {
                dsProxy: true,
                promise: promise,
                metadata: {
                  id: id,
                  dink: dink
                }
              }));

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function reclaimCollateral(_x10, _x11, _x12) {
      return _reclaimCollateral.apply(this, arguments);
    }

    return reclaimCollateral;
  }();

  _proto.openLockAndDraw = /*#__PURE__*/function () {
    var _openLockAndDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(ilk, lockAmount, drawAmount, _ref3) {
      var promise, _ref3$cache, cache, type, op, cdp;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              promise = _ref3.promise, _ref3$cache = _ref3.cache, cache = _ref3$cache === void 0 ? true : _ref3$cache;
              type = this.get(CDP_TYPE).getCdpType(lockAmount.type, ilk);
              op = this.lockAndDraw(null, type.ilk, lockAmount, drawAmount, {
                promise: promise
              });
              _context7.t0 = ManagedCdp;
              _context7.next = 6;
              return op;

            case 6:
              _context7.t1 = _context7.sent;
              _context7.t2 = type.ilk;
              _context7.t3 = this;
              _context7.next = 11;
              return _context7.t0.create.call(_context7.t0, _context7.t1, _context7.t2, _context7.t3);

            case 11:
              cdp = _context7.sent;

              this._putInInstanceCache(cdp.id, cdp, cache);

              return _context7.abrupt("return", cdp);

            case 14:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function openLockAndDraw(_x13, _x14, _x15, _x16) {
      return _openLockAndDraw.apply(this, arguments);
    }

    return openLockAndDraw;
  }();

  _proto.lockAndDraw = /*#__PURE__*/function () {
    var _lockAndDraw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(id, ilk, lockAmount, drawAmount, _ref4) {
      var _this$proxyActions;

      var promise, proxyAddress, jugAddress, isEth, isGnt, method, args;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (drawAmount === void 0) {
                drawAmount = /*#__PURE__*/DAI(0);
              }

              promise = _ref4.promise;
              assert(lockAmount && drawAmount, 'both amounts must be specified');
              assert(lockAmount instanceof Currency, 'lockAmount must be a Currency value');
              drawAmount = castAsCurrency(drawAmount, DAI);
              _context8.next = 7;
              return this.get('proxy').ensureProxy({
                promise: promise
              });

            case 7:
              proxyAddress = _context8.sent;
              jugAddress = this.get('smartContract').getContractAddress('MCD_JUG');
              isEth = ETH$3.isInstance(lockAmount);
              isGnt = GNT$1.isInstance(lockAmount);
              method = setMethod(isEth, isGnt, id);
              args = [this._managerAddress, jugAddress, this._adapterAddress(ilk), this._adapterAddress('DAI'), id || stringToBytes(ilk), !isEth && lockAmount.toFixed(this._precision(lockAmount, ilk)), drawAmount.toFixed('wei'), {
                dsProxy: true,
                value: isEth ? lockAmount.toFixed('wei') : 0,
                promise: promise,
                metadata: {
                  id: id,
                  ilk: ilk,
                  lockAmount: lockAmount,
                  drawAmount: drawAmount
                }
              }].filter(function (x) {
                return x;
              });

              if (!(method === 'openLockGNTAndDraw')) {
                _context8.next = 16;
                break;
              }

              _context8.next = 16;
              return this.get('token').getToken('GNT').transfer(proxyAddress, lockAmount);

            case 16:
              if (!(id && isGnt)) {
                _context8.next = 19;
                break;
              }

              _context8.next = 19;
              return transferToBag(lockAmount, proxyAddress, this);

            case 19:
              if (!isEth && method !== 'openLockGNTAndDraw') args.splice(-1, 0, !GNT$1.isInstance(lockAmount));
              _context8.next = 22;
              return (_this$proxyActions = this.proxyActions)[method].apply(_this$proxyActions, args);

            case 22:
              return _context8.abrupt("return", _context8.sent);

            case 23:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function lockAndDraw(_x17, _x18, _x19, _x20, _x21) {
      return _lockAndDraw.apply(this, arguments);
    }

    return lockAndDraw;
  }();

  _proto.lock = /*#__PURE__*/function () {
    var _lock = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(id, ilk, lockAmount, owner, _ref5) {
      var _this$proxyActions2;

      var promise, proxyAddress, isEth, isGnt, method, args;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              promise = _ref5.promise;

              if (owner) {
                _context9.next = 5;
                break;
              }

              _context9.next = 4;
              return this.getOwner(id);

            case 4:
              owner = _context9.sent;

            case 5:
              _context9.next = 7;
              return this.get('proxy').ensureProxy({
                promise: promise
              });

            case 7:
              proxyAddress = _context9.sent;
              isEth = ETH$3.isInstance(lockAmount);
              isGnt = GNT$1.isInstance(lockAmount);
              method = "safeLock" + (isEth ? 'ETH' : 'Gem');
              args = [this._managerAddress, this._adapterAddress(ilk), id, !isEth && lockAmount.toFixed(this._precision(lockAmount, ilk)), owner, {
                dsProxy: true,
                value: isEth ? lockAmount.toFixed('wei') : 0,
                promise: promise,
                metadata: {
                  id: id,
                  ilk: ilk,
                  lockAmount: lockAmount
                }
              }].filter(function (x) {
                return x;
              });

              if (!(id && isGnt)) {
                _context9.next = 15;
                break;
              }

              _context9.next = 15;
              return transferToBag(lockAmount, proxyAddress, this);

            case 15:
              if (!isEth) args.splice(-2, 0, !GNT$1.isInstance(lockAmount));
              return _context9.abrupt("return", (_this$proxyActions2 = this.proxyActions)[method].apply(_this$proxyActions2, args));

            case 17:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function lock(_x22, _x23, _x24, _x25, _x26) {
      return _lock.apply(this, arguments);
    }

    return lock;
  }();

  _proto.draw = /*#__PURE__*/function () {
    var _draw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(id, ilk, drawAmount, _ref6) {
      var promise;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              promise = _ref6.promise;
              return _context10.abrupt("return", this.proxyActions.draw(this._managerAddress, this.get('smartContract').getContractAddress('MCD_JUG'), this._adapterAddress('DAI'), this.getIdBytes(id), castAsCurrency(drawAmount, DAI).toFixed('wei'), {
                dsProxy: true,
                promise: promise,
                metadata: {
                  id: id,
                  ilk: ilk,
                  drawAmount: drawAmount
                }
              }));

            case 2:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function draw(_x27, _x28, _x29, _x30) {
      return _draw.apply(this, arguments);
    }

    return draw;
  }();

  _proto.wipeAndFree = function wipeAndFree(id, ilk, wipeAmount, freeAmount, _ref7) {
    if (wipeAmount === void 0) {
      wipeAmount = DAI(0);
    }

    var promise = _ref7.promise;
    var isEth = ETH$3.isInstance(freeAmount);
    var method = isEth ? 'wipeAndFreeETH' : 'wipeAndFreeGem';
    return this.proxyActions[method](this._managerAddress, this._adapterAddress(ilk), this._adapterAddress('DAI'), this.getIdBytes(id), freeAmount.toFixed(this._precision(freeAmount, ilk)), wipeAmount.toFixed('wei'), {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id,
        ilk: ilk,
        wipeAmount: wipeAmount,
        freeAmount: freeAmount
      }
    });
  };

  _proto.wipe = /*#__PURE__*/function () {
    var _wipe = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(id, wipeAmount, owner, _ref8) {
      var promise;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              promise = _ref8.promise;

              if (owner) {
                _context11.next = 5;
                break;
              }

              _context11.next = 4;
              return this.getOwner(id);

            case 4:
              owner = _context11.sent;

            case 5:
              return _context11.abrupt("return", this.proxyActions.safeWipe(this._managerAddress, this._adapterAddress('DAI'), this.getIdBytes(id), wipeAmount.toFixed('wei'), owner, {
                dsProxy: true,
                promise: promise,
                metadata: {
                  id: id,
                  wipeAmount: wipeAmount
                }
              }));

            case 6:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function wipe(_x31, _x32, _x33, _x34) {
      return _wipe.apply(this, arguments);
    }

    return wipe;
  }();

  _proto.unsafeWipe = function unsafeWipe(id, wipeAmount, _ref9) {
    var promise = _ref9.promise;
    return this.proxyActions.wipe(this._managerAddress, this._adapterAddress('DAI'), this.getIdBytes(id), wipeAmount.toFixed('wei'), {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id,
        wipeAmount: wipeAmount
      }
    });
  };

  _proto.wipeAll = /*#__PURE__*/function () {
    var _wipeAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(id, owner, _temp) {
      var _ref10, _ref10$promise, promise;

      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              _ref10 = _temp === void 0 ? {} : _temp, _ref10$promise = _ref10.promise, promise = _ref10$promise === void 0 ? undefined : _ref10$promise;

              if (owner) {
                _context12.next = 5;
                break;
              }

              _context12.next = 4;
              return this.getOwner(id);

            case 4:
              owner = _context12.sent;

            case 5:
              return _context12.abrupt("return", this.proxyActions.safeWipeAll(this._managerAddress, this._adapterAddress('DAI'), this.getIdBytes(id), owner, {
                dsProxy: true,
                promise: promise,
                metadata: {
                  id: id
                }
              }));

            case 6:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function wipeAll(_x35, _x36, _x37) {
      return _wipeAll.apply(this, arguments);
    }

    return wipeAll;
  }();

  _proto.unsafeWipeAll = function unsafeWipeAll(id, _temp2) {
    var _ref11 = _temp2 === void 0 ? {} : _temp2,
        _ref11$promise = _ref11.promise,
        promise = _ref11$promise === void 0 ? undefined : _ref11$promise;

    return this.proxyActions.wipeAll(this._managerAddress, this._adapterAddress('DAI'), this.getIdBytes(id), {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id
      }
    });
  };

  _proto.wipeAllAndFree = function wipeAllAndFree(id, ilk, freeAmount, _ref12) {
    var promise = _ref12.promise;
    var isEth = ETH$3.isInstance(freeAmount);
    var method = isEth ? 'wipeAllAndFreeETH' : 'wipeAllAndFreeGem';
    return this.proxyActions[method](this._managerAddress, this._adapterAddress(ilk), this._adapterAddress('DAI'), this.getIdBytes(id), freeAmount.toFixed(this._precision(freeAmount, ilk)), {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id,
        ilk: ilk,
        freeAmount: freeAmount
      }
    });
  };

  _proto.give = function give(id, address, _ref13) {
    var promise = _ref13.promise;
    return this.proxyActions.give(this._managerAddress, this.getIdBytes(id), address, {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id
      }
    });
  };

  _proto.giveToProxy = function giveToProxy(id, address, _ref14) {
    var promise = _ref14.promise;
    return this.proxyActions.giveToProxy(this._contractAddress('PROXY_REGISTRY'), this._managerAddress, this.getIdBytes(id), address, {
      dsProxy: true,
      promise: promise,
      metadata: {
        id: id,
        address: address
      }
    });
  };

  _proto.getUrn = function getUrn(id) {
    if (!this._getUrnPromises[id]) {
      this._getUrnPromises[id] = this._manager.urns(id);
    }

    return this._getUrnPromises[id];
  };

  _proto.getOwner = function getOwner(id) {
    return this._manager.owns(this.getIdBytes(id));
  };

  _proto.getIdBytes = function getIdBytes(id, prefix) {
    if (prefix === void 0) {
      prefix = true;
    }

    assert(typeof id === 'number', 'ID must be a number');
    return (prefix ? '0x' : '') + padStart(id.toString(16), 24, '0');
  };

  _proto.reset = function reset() {
    this._getCdpIdsPromises = {};
    this._getUrnPromises = {};
  };

  _proto._contractAddress = function _contractAddress(name) {
    return this.get('smartContract').getContractAddress(name);
  };

  _proto._adapterAddress = function _adapterAddress(ilk) {
    return this.get(SYSTEM_DATA).adapterAddress(ilk);
  };

  _proto._precision = function _precision(amount, ilk) {
    return amount.type.symbol === 'ETH' ? 'wei' : this.get(CDP_TYPE).getCdpType(amount.type, ilk).decimals;
  };

  _proto._getFromInstanceCache = function _getFromInstanceCache(id, enabled) {
    if (!enabled) return;
    if (!this._instanceCache) this._instanceCache = {};
    var instance = this._instanceCache[id];
    if (instance) return instance;
  };

  _proto._putInInstanceCache = function _putInInstanceCache(id, instance, enabled) {
    if (!enabled) return;
    if (!this._instanceCache) this._instanceCache = {};
    this._instanceCache[id] = instance;
  };

  _proto.getNewCdpId = function getNewCdpId(txo) {
    var logs = txo.receipt.logs;
    var managerContract = this.get('smartContract').getContract('CDP_MANAGER');

    var _managerContract$inte = managerContract["interface"].encodeFilterTopics('NewCdp', []),
        topic = _managerContract$inte[0];

    var _logs$filter = logs.filter(function (e) {
      return e.topics[0].toLowerCase() === topic.toLowerCase();
    }),
        receiptEvent = _logs$filter[0];

    var _managerContract$inte2 = managerContract["interface"].parseLog({
      data: receiptEvent.data,
      topics: receiptEvent.topics
    }),
        eventArgs = _managerContract$inte2.args;

    assert(eventArgs['cdp'], 'could not find log for NewCdp event');
    return parseInt(eventArgs['cdp']);
  };

  _proto.getEventHistory = function getEventHistory$1(managedCdp) {
    if (!this._eventHistoryCache) this._eventHistoryCache = {};
    return getEventHistory(this, managedCdp, this._eventHistoryCache);
  };

  _proto.resetEventHistoryCache = function resetEventHistoryCache(id) {
    if (id === void 0) {
      id = null;
    }

    if (id !== null) delete this._eventHistoryCache[id];else this._eventHistoryCache = {};
  };

  _createClass(CdpManager, [{
    key: "proxyActions",
    get: function get() {
      return this.get('smartContract').getContract('PROXY_ACTIONS');
    }
  }, {
    key: "vat",
    get: function get() {
      return this.get(SYSTEM_DATA).vat;
    }
  }, {
    key: "_manager",
    get: function get() {
      return this.get('smartContract').getContract('CDP_MANAGER');
    }
  }, {
    key: "_managerAddress",
    get: function get() {
      return this._contractAddress('CDP_MANAGER');
    }
  }]);

  return CdpManager;
}(LocalService);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "open", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "reclaimCollateral", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "openLockAndDraw", null);

__decorate([tracksTransactionsWithOptions({
  numArguments: 5
}), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "lockAndDraw", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "lock", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "draw", null);

__decorate([tracksTransactionsWithOptions({
  numArguments: 5
}), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "wipeAndFree", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "wipe", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "unsafeWipe", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", Promise)], CdpManager.prototype, "wipeAll", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "unsafeWipeAll", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "wipeAllAndFree", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "give", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", void 0)], CdpManager.prototype, "giveToProxy", null);

function setMethod(isEth, isGnt, id) {
  if (id && isEth) {
    return 'lockETHAndDraw';
  } else if (isEth) {
    return 'openLockETHAndDraw';
  } else if (!id && isGnt) {
    return 'openLockGNTAndDraw';
  } else if (id) {
    return 'lockGemAndDraw';
  }

  return 'openLockGemAndDraw';
}
function transferToBag(_x38, _x39, _x40) {
  return _transferToBag.apply(this, arguments);
}

function _transferToBag() {
  _transferToBag = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(lockAmount, proxyAddress, cdpMgr) {
    var gntToken, gntAdapter, bagAddress;
    return runtime_1.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            gntToken = cdpMgr.get('token').getToken(GNT$1);
            gntAdapter = cdpMgr.get('smartContract').getContract('MCD_JOIN_GNT_A');
            _context13.next = 4;
            return gntAdapter.bags(proxyAddress);

          case 4:
            bagAddress = _context13.sent;
            return _context13.abrupt("return", gntToken.transfer(bagAddress, lockAmount));

          case 6:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  return _transferToBag.apply(this, arguments);
}

var SavingsService = /*#__PURE__*/function (_PublicService) {
  _inheritsLoose(SavingsService, _PublicService);

  function SavingsService(name) {
    if (name === void 0) {
      name = ServiceRoles.SAVINGS;
    }

    return _PublicService.call(this, name, ['smartContract', 'proxy', 'accounts', 'web3', ServiceRoles.SYSTEM_DATA]) || this;
  }

  var _proto = SavingsService.prototype;

  _proto.join = /*#__PURE__*/function () {
    var _join = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(amountInDai, _ref) {
      var promise;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              promise = _ref.promise;
              _context.next = 3;
              return this.get('proxy').ensureProxy();

            case 3:
              return _context.abrupt("return", this._proxyActions.join(this._daiAdapterAddress, this._pot.address, amountInDai.toFixed('wei'), {
                dsProxy: true,
                promise: promise
              }));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function join(_x, _x2) {
      return _join.apply(this, arguments);
    }

    return join;
  }();

  _proto.exit = /*#__PURE__*/function () {
    var _exit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(amountInDai, _ref2) {
      var promise;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              promise = _ref2.promise;
              _context2.next = 3;
              return this.get('proxy').ensureProxy();

            case 3:
              return _context2.abrupt("return", this._proxyActions.exit(this._daiAdapterAddress, this._pot.address, amountInDai.toFixed('wei'), {
                dsProxy: true,
                promise: promise
              }));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function exit(_x3, _x4) {
      return _exit.apply(this, arguments);
    }

    return exit;
  }();

  _proto.exitAll = /*#__PURE__*/function () {
    var _exitAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_ref3) {
      var promise;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              promise = _ref3.promise;
              _context3.next = 3;
              return this.get('proxy').ensureProxy();

            case 3:
              return _context3.abrupt("return", this._proxyActions.exitAll(this._daiAdapterAddress, this._pot.address, {
                dsProxy: true,
                promise: promise
              }));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function exitAll(_x5) {
      return _exitAll.apply(this, arguments);
    }

    return exitAll;
  }();

  _proto.balance = /*#__PURE__*/function () {
    var _balance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var proxy;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.get('proxy').currentProxy();

            case 2:
              proxy = _context4.sent;
              return _context4.abrupt("return", proxy ? this.balanceOf(proxy) : DAI(0));

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function balance() {
      return _balance.apply(this, arguments);
    }

    return balance;
  }();

  _proto.balanceOf = /*#__PURE__*/function () {
    var _balanceOf = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(guy) {
      var slice, chi;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = BigNumber;
              _context5.next = 3;
              return this._pot.pie(guy);

            case 3:
              _context5.t1 = _context5.sent._hex;
              slice = new _context5.t0(_context5.t1);
              _context5.next = 7;
              return this.chi();

            case 7:
              chi = _context5.sent;
              return _context5.abrupt("return", DAI(slice.times(chi).div(WAD).dp(18)));

            case 9:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function balanceOf(_x6) {
      return _balanceOf.apply(this, arguments);
    }

    return balanceOf;
  }();

  _proto.getTotalDai = /*#__PURE__*/function () {
    var _getTotalDai = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var totalPie, chi;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.t0 = BigNumber;
              _context6.next = 3;
              return this._pot.Pie();

            case 3:
              _context6.t1 = _context6.sent._hex;
              totalPie = new _context6.t0(_context6.t1);
              _context6.next = 7;
              return this.chi();

            case 7:
              chi = _context6.sent;
              return _context6.abrupt("return", DAI(totalPie.times(chi).div(WAD).dp(18)));

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getTotalDai() {
      return _getTotalDai.apply(this, arguments);
    }

    return getTotalDai;
  }();

  _proto.getYearlyRate = /*#__PURE__*/function () {
    var _getYearlyRate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var dsr;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = BigNumber;
              _context7.next = 3;
              return this._pot.dsr();

            case 3:
              _context7.t1 = _context7.sent._hex;
              dsr = new _context7.t0(_context7.t1).div(RAY);
              return _context7.abrupt("return", dsr.pow(SECONDS_PER_YEAR).minus(1));

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getYearlyRate() {
      return _getYearlyRate.apply(this, arguments);
    }

    return getYearlyRate;
  }();

  _proto.chi = /*#__PURE__*/function () {
    var _chi = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.t0 = BigNumber;
              _context8.next = 3;
              return this._pot.chi();

            case 3:
              _context8.t1 = _context8.sent._hex;
              return _context8.abrupt("return", new _context8.t0(_context8.t1).div(RAY));

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function chi() {
      return _chi.apply(this, arguments);
    }

    return chi;
  }();

  _proto.getEventHistory = function getEventHistory(address) {
    if (!this._eventHistoryCache) this._eventHistoryCache = {};
    return getDsrEventHistory(this, address, this._eventHistoryCache);
  };

  _proto.getEarningsToDate = /*#__PURE__*/function () {
    var _getEarningsToDate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(address) {
      var eventHistory, sum, balance;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              if (!this._eventHistoryCache) this._eventHistoryCache = {};
              _context9.next = 3;
              return getDsrEventHistory(this, address, this._eventHistoryCache);

            case 3:
              eventHistory = _context9.sent;
              sum = new BigNumber(0);
              eventHistory.forEach(function (_ref4) {
                var type = _ref4.type,
                    amount = _ref4.amount;
                if (type === 'DSR_DEPOSIT') sum = sum.plus(amount);
                if (type === 'DSR_WITHDRAW') sum = sum.minus(amount);
              });
              _context9.next = 8;
              return this.balanceOf(address);

            case 8:
              balance = _context9.sent;
              return _context9.abrupt("return", balance.gt(sum) ? balance.minus(sum) : DAI(0));

            case 10:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function getEarningsToDate(_x7) {
      return _getEarningsToDate.apply(this, arguments);
    }

    return getEarningsToDate;
  }();

  _proto.resetEventHistoryCache = function resetEventHistoryCache(address) {
    if (address === void 0) {
      address = null;
    }

    if (address !== null) delete this._eventHistoryCache[address];else this._eventHistoryCache = {};
  };

  _createClass(SavingsService, [{
    key: "_proxyActions",
    get: function get() {
      return this.get('smartContract').getContract('PROXY_ACTIONS_DSR');
    }
  }, {
    key: "_pot",
    get: function get() {
      return this.get('smartContract').getContract('MCD_POT');
    }
  }, {
    key: "_daiAdapterAddress",
    get: function get() {
      return this.get(ServiceRoles.SYSTEM_DATA).adapterAddress('DAI');
    }
  }]);

  return SavingsService;
}(PublicService);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], SavingsService.prototype, "join", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], SavingsService.prototype, "exit", null);

__decorate([tracksTransactions, __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], SavingsService.prototype, "exitAll", null);

var CdpType = /*#__PURE__*/function () {
  function CdpType(cdpTypeService, _ref, options) {
    var currency = _ref.currency,
        ilk = _ref.ilk,
        decimals = _ref.decimals;

    if (options === void 0) {
      options = {
        prefetch: true
      };
    }

    assert(currency && ilk, 'currency and ilk are required');
    this._cdpTypeService = cdpTypeService;
    this._systemData = cdpTypeService.get(ServiceRoles.SYSTEM_DATA);
    this._web3Service = this._systemData.get('smartContract').get('web3');
    this.currency = currency;
    this.decimals = decimals || 18;
    this.ilk = ilk;
    this._ilkBytes = stringToBytes(this.ilk);
    this.cache = {};
    if (options.prefetch) this.prefetch();
  }

  var _proto = CdpType.prototype;

  _proto.ilkInfo = /*#__PURE__*/function () {
    var _ilkInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(contract) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (contract === void 0) {
                contract = 'vat';
              }

              return _context.abrupt("return", this._systemData[contract].ilks(this._ilkBytes));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function ilkInfo(_x) {
      return _ilkInfo.apply(this, arguments);
    }

    return ilkInfo;
  }();

  _proto.prefetch = /*#__PURE__*/function () {
    var _prefetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var _this = this;

      var adapterAddress, _ref2, symbol;

      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this._prefetchPromise) {
                adapterAddress = this._systemData.adapterAddress(this.ilk);
                _ref2 = this.currency === ETH$3 ? WETH : this.currency, symbol = _ref2.symbol;
                this._prefetchPromise = Promise.all([this._systemData.get('token').getToken(symbol).balanceOf(adapterAddress).then(function (x) {
                  return _this.cache.adapterBalance = x;
                }), this.ilkInfo().then(function (x) {
                  return _this.cache.vatInfo = x;
                }), this.ilkInfo('cat').then(function (x) {
                  return _this.cache.catInfo = x;
                }), this.ilkInfo('jug').then(function (x) {
                  return _this.cache.jugInfo = x;
                }), this.ilkInfo('spot').then(function (x) {
                  return _this.cache.spotInfo = x;
                }), this._systemData.spot.par().then(function (x) {
                  return _this.cache.par = x;
                })]);
              }

              return _context2.abrupt("return", this._prefetchPromise);

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function prefetch() {
      return _prefetch.apply(this, arguments);
    }

    return prefetch;
  }();

  _proto.reset = /*#__PURE__*/function () {
    var _reset = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this._prefetchPromise = null;
              this.cache = {};

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function reset() {
      return _reset.apply(this, arguments);
    }

    return reset;
  }();

  _proto._getCached = function _getCached(name) {
    assert(this.cache[name], name + " is not cached");
    return this.cache[name];
  };

  _createClass(CdpType, [{
    key: "totalCollateral",
    get: function get() {
      return this.currency(this._getCached('adapterBalance'));
    }
  }, {
    key: "totalDebt",
    get: function get() {
      var _this$_getCached = this._getCached('vatInfo'),
          Art = _this$_getCached.Art,
          rate = _this$_getCached.rate;

      return DAI.wei(Art._hex).times(rate._hex).shiftedBy(-27);
    }
  }, {
    key: "debtCeiling",
    get: function get() {
      return debtCeiling(this._getCached('vatInfo').line);
    }
  }, {
    key: "liquidationRatio",
    get: function get() {
      return liquidationRatio(this._getCached('spotInfo').mat);
    }
  }, {
    key: "price",
    get: function get() {
      return price(this.currency, this._getCached('par'), this._getCached('vatInfo').spot, this.liquidationRatio);
    }
  }, {
    key: "liquidationPenalty",
    get: function get() {
      return liquidationPenalty(this._getCached('catInfo').chop);
    }
  }, {
    key: "annualStabilityFee",
    get: function get() {
      return annualStabilityFee(this._getCached('jugInfo').duty);
    }
  }, {
    key: "_pipAddress",
    get: function get() {
      var contract = 'PIP_' + this.currency.symbol;
      return this._systemData.get('smartContract').getContractAddress(contract);
    }
  }]);

  return CdpType;
}();

var CDP_TYPE$1 = ServiceRoles.CDP_TYPE,
    SYSTEM_DATA$1 = ServiceRoles.SYSTEM_DATA;

var CdpTypeService = /*#__PURE__*/function (_PublicService) {
  _inheritsLoose(CdpTypeService, _PublicService);

  function CdpTypeService(name) {
    var _this;

    if (name === void 0) {
      name = CDP_TYPE$1;
    }

    _this = _PublicService.call(this, name, [SYSTEM_DATA$1]) || this;
    _this.reset = _this.resetAllCdpTypes;
    return _this;
  }

  var _proto = CdpTypeService.prototype;

  _proto.initialize = function initialize(settings) {
    var _this2 = this;

    if (settings === void 0) {
      settings = {
        cdpTypes: undefined,
        prefetch: undefined
      };
    }

    this.settings = settings;
    this.cdpTypes = (settings.cdpTypes || []).map(function (cdpType) {
      return new CdpType(_this2, cdpType, {
        prefetch: settings.prefetch
      });
    });
  };

  _proto.connect = /*#__PURE__*/function () {
    var _connect = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.settings.prefetch) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return this.prefetchAllCdpTypes();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function connect() {
      return _connect.apply(this, arguments);
    }

    return connect;
  }();

  _proto.getCdpType = function getCdpType(currency, ilk) {
    var types = this.cdpTypes.filter(function (t) {
      return (!currency || t.currency.symbol === currency.symbol) && (!ilk || ilk === t.ilk);
    });
    if (types.length === 1) return types[0];
    var label = [currency && "currency " + currency.symbol, ilk && "ilk " + ilk].filter(function (x) {
      return x;
    }).join(', ');
    assert(types.length <= 1, label + " matches more than one cdp type");
    assert(types.length > 0, label + " matches no cdp type");
  };

  _proto.resetAllCdpTypes = function resetAllCdpTypes() {
    this.cdpTypes.forEach(function (type) {
      return type.reset();
    });
  };

  _proto.prefetchAllCdpTypes = /*#__PURE__*/function () {
    var _prefetchAllCdpTypes = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return Promise.all(this.cdpTypes.map(function (type) {
                return type.prefetch();
              }));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function prefetchAllCdpTypes() {
      return _prefetchAllCdpTypes.apply(this, arguments);
    }

    return prefetchAllCdpTypes;
  }();

  _createClass(CdpTypeService, [{
    key: "totalDebtAllCdpTypes",
    get: function get() {
      var debts = this.cdpTypes.map(function (ilk) {
        return ilk.totalDebt;
      });
      return debts.reduce(function (a, b) {
        return a.plus(b);
      });
    }
  }, {
    key: "totalCollateralValueAllCdpTypes",
    get: function get() {
      var collateralValues = this.cdpTypes.map(function (ilk) {
        return ilk.totalCollateral.times(ilk.price);
      });
      return collateralValues.reduce(function (a, b) {
        return a.plus(b);
      });
    }
  }, {
    key: "totalCollateralizationRatioAllCdpTypes",
    get: function get() {
      return collateralizationRatio(this.totalCollateralValueAllCdpTypes, this.totalDebtAllCdpTypes);
    }
  }]);

  return CdpTypeService;
}(PublicService);

var Auction = /*#__PURE__*/function () {
  function Auction(ilk, smartContractService) {
    switch (ilk) {
      case DAI.symbol:
        this.contract = smartContractService.getContract('MCD_FLAP');
        break;

      case 'MKR':
        this.contract = smartContractService.getContract('MCD_FLOP');
        break;

      default:
        this.contract = smartContractService.getContract('MCD_FLIP_' + ilk.replace(/-/g, '_'));
    }
  } // returns time in hours


  var _proto = Auction.prototype;

  _proto.getMaxBidLifetime =
  /*#__PURE__*/
  function () {
    var _getMaxBidLifetime = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.contract.ttl();

            case 2:
              _context.t0 = _context.sent;
              return _context.abrupt("return", _context.t0 / 3600);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getMaxBidLifetime() {
      return _getMaxBidLifetime.apply(this, arguments);
    }

    return getMaxBidLifetime;
  }() // returns time in days
  ;

  _proto.getMaxAuctionDuration =
  /*#__PURE__*/
  function () {
    var _getMaxAuctionDuration = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.contract.tau();

            case 2:
              _context2.t0 = _context2.sent;
              return _context2.abrupt("return", _context2.t0 / 86400);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getMaxAuctionDuration() {
      return _getMaxAuctionDuration.apply(this, arguments);
    }

    return getMaxAuctionDuration;
  }() // returns decimal representation of minimum percentage increase
  ;

  _proto.getMinBidIncrease =
  /*#__PURE__*/
  function () {
    var _getMinBidIncrease = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var beg;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.contract.beg();

            case 2:
              beg = _context3.sent;
              return _context3.abrupt("return", new BigNumber(beg._hex).div(WAD).minus(1).toNumber());

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getMinBidIncrease() {
      return _getMinBidIncrease.apply(this, arguments);
    }

    return getMinBidIncrease;
  }();

  return Auction;
}();

var AuctionService = /*#__PURE__*/function (_PublicService) {
  _inheritsLoose(AuctionService, _PublicService);

  function AuctionService(name) {
    if (name === void 0) {
      name = ServiceRoles.AUCTION;
    }

    return _PublicService.call(this, name, ['smartContract']) || this;
  }

  var _proto = AuctionService.prototype;

  _proto.getAuction = function getAuction(ilk) {
    return new Auction(ilk, this.get('smartContract'));
  };

  return AuctionService;
}(PublicService);

var SystemDataService = /*#__PURE__*/function (_PublicService) {
  _inheritsLoose(SystemDataService, _PublicService);

  function SystemDataService(name) {
    if (name === void 0) {
      name = ServiceRoles.SYSTEM_DATA;
    }

    return _PublicService.call(this, name, ['smartContract', 'token']) || this;
  }

  var _proto = SystemDataService.prototype;

  _proto.getAnnualBaseRate = /*#__PURE__*/function () {
    var _getAnnualBaseRate = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var base, baseBigNumber;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.jug.base();

            case 2:
              base = _context.sent;
              baseBigNumber = new BigNumber(base.toString()).dividedBy(RAY).plus(1);
              return _context.abrupt("return", baseBigNumber.pow(SECONDS_PER_YEAR).minus(1).toNumber());

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAnnualBaseRate() {
      return _getAnnualBaseRate.apply(this, arguments);
    }

    return getAnnualBaseRate;
  }();

  _proto.getSystemWideDebtCeiling = /*#__PURE__*/function () {
    var _getSystemWideDebtCeiling = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var Line;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.vat.Line();

            case 2:
              Line = _context2.sent;
              return _context2.abrupt("return", new BigNumber(Line.toString()).dividedBy(RAD).toNumber());

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getSystemWideDebtCeiling() {
      return _getSystemWideDebtCeiling.apply(this, arguments);
    }

    return getSystemWideDebtCeiling;
  }();

  _proto.adapterAddress = function adapterAddress(ilk) {
    var key = 'MCD_JOIN_' + ilk.replace(/-/g, '_');
    return this.get('smartContract').getContractAddress(key);
  };

  _proto.isGlobalSettlementInvoked = /*#__PURE__*/function () {
    var _isGlobalSettlementInvoked = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var live;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.get('smartContract').getContract('MCD_END').live();

            case 2:
              live = _context3.sent;
              return _context3.abrupt("return", live.eq(0));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function isGlobalSettlementInvoked() {
      return _isGlobalSettlementInvoked.apply(this, arguments);
    }

    return isGlobalSettlementInvoked;
  }();

  _proto.getSystemSurplus = /*#__PURE__*/function () {
    var _getSystemSurplus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var vowAddr, _yield$Promise$all, dai, sin;

      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              vowAddr = this.get('smartContract').getContractAddress('MCD_VOW');
              _context4.next = 3;
              return Promise.all([this.vat.dai(vowAddr), this.vat.sin(vowAddr)]);

            case 3:
              _yield$Promise$all = _context4.sent;
              dai = _yield$Promise$all[0];
              sin = _yield$Promise$all[1];
              return _context4.abrupt("return", DAI.rad(dai._hex).minus(DAI.rad(sin._hex)));

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getSystemSurplus() {
      return _getSystemSurplus.apply(this, arguments);
    }

    return getSystemSurplus;
  }();

  _proto.getTotalDai = /*#__PURE__*/function () {
    var _getTotalDai = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.t0 = DAI;
              _context5.next = 3;
              return this.vat.debt();

            case 3:
              _context5.t1 = _context5.sent._hex;
              return _context5.abrupt("return", _context5.t0.rad.call(_context5.t0, _context5.t1));

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getTotalDai() {
      return _getTotalDai.apply(this, arguments);
    }

    return getTotalDai;
  }() // Helpers ----------------------------------------------
  ;

  _createClass(SystemDataService, [{
    key: "cat",
    get: function get() {
      return this.get('smartContract').getContract('MCD_CAT');
    }
  }, {
    key: "jug",
    get: function get() {
      return this.get('smartContract').getContract('MCD_JUG');
    }
  }, {
    key: "vat",
    get: function get() {
      return this.get('smartContract').getContract('MCD_VAT');
    }
  }, {
    key: "spot",
    get: function get() {
      return this.get('smartContract').getContract('MCD_SPOT');
    }
  }]);

  return SystemDataService;
}(PublicService);

var wethAbi = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "src",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "guy",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "dst",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "src",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "dst",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "src",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "Withdrawal",
		type: "event"
	},
	{
		payable: true,
		stateMutability: "payable",
		type: "fallback"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "guy",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
		],
		name: "deposit",
		outputs: [
		],
		payable: true,
		stateMutability: "payable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "dst",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "address",
				name: "src",
				type: "address"
			},
			{
				internalType: "address",
				name: "dst",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				internalType: "uint256",
				name: "wad",
				type: "uint256"
			}
		],
		name: "withdraw",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	}
];

var ServiceRoles$1 = ServiceRoles;
var CDP_MANAGER$4 = ServiceRoles$1.CDP_MANAGER,
    CDP_TYPE$2 = ServiceRoles$1.CDP_TYPE,
    SYSTEM_DATA$2 = ServiceRoles$1.SYSTEM_DATA,
    AUCTION = ServiceRoles$1.AUCTION,
    SAVINGS = ServiceRoles$1.SAVINGS;
var addContracts = /*#__PURE__*/reduce(testnetAddresses, function (result, testnetAddress, name) {
  var abi = abiMap[name];

  if (!abi) {
    var prefix = Object.keys(abiMap).find(function (k) {
      return k.substring(k.length - 1) == '*' && k.substring(0, k.length - 1) == name.substring(0, k.length - 1);
    });
    if (prefix) abi = abiMap[prefix];
  }

  if (abi) {
    result[name] = {
      abi: abi,
      address: {
        testnet: testnetAddress,
        goerli: goerliAddresses[name],
        mainnet: mainnetAddresses[name]
      }
    };
  }

  return result;
}, {});
var ALLOWANCE_AMOUNT = /*#__PURE__*/new BigNumber('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
var McdPlugin = {
  addConfig: function addConfig(_, _temp) {
    var _ref3;

    var _ref = _temp === void 0 ? {} : _temp,
        _ref$cdpTypes = _ref.cdpTypes,
        cdpTypes = _ref$cdpTypes === void 0 ? defaultCdpTypes : _ref$cdpTypes,
        _ref$addressOverrides = _ref.addressOverrides,
        addressOverrides = _ref$addressOverrides === void 0 ? null : _ref$addressOverrides,
        _ref$prefetch = _ref.prefetch,
        prefetch = _ref$prefetch === void 0 ? true : _ref$prefetch;

    if (addressOverrides) {
      addContracts = mapValues(addContracts, function (contractDetails, name) {
        return _extends({}, contractDetails, {
          address: addressOverrides[name] || contractDetails.address
        });
      });
    }

    var tokens = uniqBy(cdpTypes, 'currency').map(function (_ref2) {
      var currency = _ref2.currency,
          address = _ref2.address,
          abi = _ref2.abi,
          decimals = _ref2.decimals;
      var data = address && abi ? {
        address: address,
        abi: abi
      } : addContracts[currency.symbol];
      assert(data, "No address and ABI found for \"" + currency.symbol + "\"");
      return {
        currency: currency,
        abi: data.abi,
        address: data.address,
        decimals: data.decimals || decimals
      };
    });
    BigNumber.config({
      POW_PRECISION: 100
    });
    return _ref3 = {
      smartContract: {
        addContracts: addContracts
      },
      token: {
        erc20: [{
          currency: DAI,
          address: addContracts.MCD_DAI.address
        }, {
          currency: WETH,
          address: addContracts.ETH.address,
          abi: wethAbi
        }].concat(tokens)
      },
      additionalServices: [CDP_MANAGER$4, CDP_TYPE$2, AUCTION, SYSTEM_DATA$2, SAVINGS]
    }, _ref3[CDP_TYPE$2] = [CdpTypeService, {
      cdpTypes: cdpTypes,
      prefetch: prefetch
    }], _ref3[CDP_MANAGER$4] = CdpManager, _ref3[SAVINGS] = SavingsService, _ref3[AUCTION] = AuctionService, _ref3[SYSTEM_DATA$2] = SystemDataService, _ref3;
  }
};

export default McdPlugin;
export { AAVE$3 as AAVE, ALLOWANCE_AMOUNT, BAL$3 as BAL, BAT$3 as BAT, COMP$3 as COMP, DAI, DGD$1 as DGD, DSR_DAI, ETH$3 as ETH, GNT$1 as GNT, GUSD$3 as GUSD, KNC$3 as KNC, LINK$3 as LINK, LRC$3 as LRC, MANA$3 as MANA, MATIC$3 as MATIC, MKR, McdPlugin, OMG$1 as OMG, PAXUSD$3 as PAXUSD, RENBTC$3 as RENBTC, REP$1 as REP, SAI$2 as SAI, ServiceRoles$1 as ServiceRoles, TUSD$3 as TUSD, UNI$3 as UNI, UNIV2AAVEETH$3 as UNIV2AAVEETH, UNIV2DAIETH$3 as UNIV2DAIETH, UNIV2DAIUSDC$3 as UNIV2DAIUSDC, UNIV2DAIUSDT$3 as UNIV2DAIUSDT, UNIV2ETHUSDT$3 as UNIV2ETHUSDT, UNIV2LINKETH$3 as UNIV2LINKETH, UNIV2UNIETH$3 as UNIV2UNIETH, UNIV2USDCETH$3 as UNIV2USDCETH, UNIV2WBTCDAI$3 as UNIV2WBTCDAI, UNIV2WBTCETH$3 as UNIV2WBTCETH, USD, USDC$3 as USDC, USDT$3 as USDT, USD_ETH, WBTC$3 as WBTC, WETH, WSTETH$3 as WSTETH, YFI$3 as YFI, ZRX$3 as ZRX, defaultCdpTypes, defaultTokens };
//# sourceMappingURL=dai-plugin-mcd.esm.js.map
