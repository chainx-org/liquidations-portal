import { PrivateService } from '@makerdao/services-core';
export default class Web3Service extends PrivateService {
    _blockListeners: any;
    _info: any;
    _ethersSigner: any;
    _web3: any;
    _transactionSettings: any;
    _confirmedBlockCount: any;
    _defaultEmitter: any;
    eth: any;
    _pollingInterval: any;
    _networkId: any;
    _currentBlockId: any;
    _currentBlock: any;
    _newBlocksSubscription: any;
    _updateBlocksInterval: any;
    constructor(name?: string);
    currentAddress(): any;
    getEthersSigner(): any;
    web3Provider(): any;
    transactionSettings(): any;
    confirmedBlockCount(): any;
    web3Contract(abi: any, address: any): any;
    initialize(settings: any): void;
    subscribe(...args: any[]): any;
    estimateGas(...args: any[]): any;
    wait(...args: any[]): any;
    getBalance(...args: any[]): any;
    getAccounts(...args: any[]): any;
    getBlock(...args: any[]): any;
    getPastLogs(...args: any[]): any;
    getStorageAt(...args: any[]): any;
    getTransaction(...args: any[]): any;
    getTransactionReceipt(...args: any[]): any;
    connect(): Promise<void>;
    authenticate(): Promise<void>;
    sendTransaction(...args: any[]): Promise<unknown>;
    networkId(): any;
    get network(): any;
    get networkName(): string;
    get rpcUrl(): any;
    blockNumber(): any;
    onNewBlock(callback: any): void;
    waitForBlockNumber(blockNumber: any): Promise<any>;
    _listenForNewBlocks(): void;
    _updateBlockNumber(blockNumber: any): void;
    _stopListeningForNewBlocks(): void;
}
