! function (t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports, require("@makerdao/services-core"), require("lodash/fp"), require("invariant"), require("eth-lib/lib/account"), require("web3-provider-engine/dist/es5/subproviders/wallet"), require("web3-provider-engine/dist/es5"), require("web3-provider-engine/dist/es5/subproviders/websocket"), require("web3-provider-engine/dist/es5/subproviders/rpc"), require("web3-provider-engine/dist/es5/subproviders/subscriptions"), require("web3-provider-engine/dist/es5/subproviders/provider"), require("assert"), require("bignumber.js"), require("debug"), require("tslib"), require("lodash-es"), require("ethers"), require("@makerdao/currency"), require("eventemitter2"), require("isomorphic-fetch"), require("@makerdao/multicall"), require("rxjs"), require("rxjs/operators"), require("util"), require("web3")) : "function" == typeof define && define.amd ? define(["exports", "@makerdao/services-core", "lodash/fp", "invariant", "eth-lib/lib/account", "web3-provider-engine/dist/es5/subproviders/wallet", "web3-provider-engine/dist/es5", "web3-provider-engine/dist/es5/subproviders/websocket", "web3-provider-engine/dist/es5/subproviders/rpc", "web3-provider-engine/dist/es5/subproviders/subscriptions", "web3-provider-engine/dist/es5/subproviders/provider", "assert", "bignumber.js", "debug", "tslib", "lodash-es", "ethers", "@makerdao/currency", "eventemitter2", "isomorphic-fetch", "@makerdao/multicall", "rxjs", "rxjs/operators", "util", "web3"], e) : e((t = t || self)["@makerdao/dai"] = {}, t.servicesCore, t.fp, t.invariant, t.Account, t.Wallet, t.Web3ProviderEngine, t.WebsocketSubprovider, t.RpcSource, t.SubscriptionSubprovider, t.ProviderSubprovider, t.assert, t.BigNumber, t.debug, t.tslib, t.lodashEs, t.ethers, t.currency, t.EventEmitterObj, t.fetch, t.multicall$1, t.rxjs, t.operators, t.util, t.Web3)
}(this, (function (t, e, n, a, r, i, s, o, u, c, p, y, d, l, m, f, b, h, v, _, w, g, x, A, T) {
    "use strict";
    a = a && Object.prototype.hasOwnProperty.call(a, "default") ? a.default : a, r = r && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r, i = i && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i, s = s && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s, o = o && Object.prototype.hasOwnProperty.call(o, "default") ? o.default : o, u = u && Object.prototype.hasOwnProperty.call(u, "default") ? u.default : u, c = c && Object.prototype.hasOwnProperty.call(c, "default") ? c.default : c, p = p && Object.prototype.hasOwnProperty.call(p, "default") ? p.default : p;
    var k = "default" in y ? y.default : y;

    function S(t, e, n, a, r, i, s) {
        try {
            var o = t[i](s),
                u = o.value
        } catch (t) {
            return void n(t)
        }
        o.done ? e(u) : Promise.resolve(u).then(a, r)
    }

    function M(t) {
        return function () {
            var e = this,
                n = arguments;
            return new Promise((function (a, r) {
                var i = t.apply(e, n);

                function s(t) {
                    S(i, a, r, s, o, "next", t)
                }

                function o(t) {
                    S(i, a, r, s, o, "throw", t)
                }
                s(void 0)
            }))
        }
    }

    function E(t, e) {
        for (var n = 0; n < e.length; n++) {
            var a = e[n];
            a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(t, a.key, a)
        }
    }

    function C(t, e, n) {
        return e && E(t.prototype, e), n && E(t, n), t
    }

    function O() {
        return (O = Object.assign || function (t) {
            for (var e = 1; e < arguments.length; e++) {
                var n = arguments[e];
                for (var a in n) Object.prototype.hasOwnProperty.call(n, a) && (t[a] = n[a])
            }
            return t
        }).apply(this, arguments)
    }

    function P(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, R(t, e)
    }

    function I(t) {
        return (I = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
            return t.__proto__ || Object.getPrototypeOf(t)
        })(t)
    }

    function R(t, e) {
        return (R = Object.setPrototypeOf || function (t, e) {
            return t.__proto__ = e, t
        })(t, e)
    }

    function B() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () {}))), !0
        } catch (t) {
            return !1
        }
    }

    function L(t, e, n) {
        return (L = B() ? Reflect.construct : function (t, e, n) {
            var a = [null];
            a.push.apply(a, e);
            var r = new(Function.bind.apply(t, a));
            return n && R(r, n.prototype), r
        }).apply(null, arguments)
    }

    function F(t) {
        var e = "function" == typeof Map ? new Map : void 0;
        return (F = function (t) {
            if (null === t || -1 === Function.toString.call(t).indexOf("[native code]")) return t;
            if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e) {
                if (e.has(t)) return e.get(t);
                e.set(t, n)
            }

            function n() {
                return L(t, arguments, I(this).constructor)
            }
            return n.prototype = Object.create(t.prototype, {
                constructor: {
                    value: n,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), R(n, t)
        })(t)
    }

    function j(t, e) {
        if (null == t) return {};
        var n, a, r = {},
            i = Object.keys(t);
        for (a = 0; a < i.length; a++) e.indexOf(n = i[a]) >= 0 || (r[n] = t[n]);
        return r
    }

    function D(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t
    }

    function N(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var n = 0, a = new Array(e); n < e; n++) a[n] = t[n];
        return a
    }

    function U(t, e) {
        var n = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
        if (n) return (n = n.call(t)).next.bind(n);
        if (Array.isArray(t) || (n = function (t, e) {
                if (t) {
                    if ("string" == typeof t) return N(t, void 0);
                    var n = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? N(t, void 0) : void 0
                }
            }(t)) || e && t && "number" == typeof t.length) {
            n && (t = n);
            var a = 0;
            return function () {
                return a >= t.length ? {
                    done: !0
                } : {
                    done: !1,
                    value: t[a++]
                }
            }
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
    }

    function W(t, e) {
        return t(e = {
            exports: {}
        }, e.exports), e.exports
    }
    d = d && Object.prototype.hasOwnProperty.call(d, "default") ? d.default : d, l = l && Object.prototype.hasOwnProperty.call(l, "default") ? l.default : l, v = v && Object.prototype.hasOwnProperty.call(v, "default") ? v.default : v, _ = _ && Object.prototype.hasOwnProperty.call(_, "default") ? _.default : _, T = T && Object.prototype.hasOwnProperty.call(T, "default") ? T.default : T;
    var G = W((function (t) {
        var e = function (t) {
            var e = Object.prototype,
                n = e.hasOwnProperty,
                a = "function" == typeof Symbol ? Symbol : {},
                r = a.iterator || "@@iterator",
                i = a.asyncIterator || "@@asyncIterator",
                s = a.toStringTag || "@@toStringTag";

            function o(t, e, n, a) {
                var r = Object.create((e && e.prototype instanceof p ? e : p).prototype),
                    i = new x(a || []);
                return r._invoke = function (t, e, n) {
                    var a = "suspendedStart";
                    return function (r, i) {
                        if ("executing" === a) throw new Error("Generator is already running");
                        if ("completed" === a) {
                            if ("throw" === r) throw i;
                            return {
                                value: void 0,
                                done: !0
                            }
                        }
                        for (n.method = r, n.arg = i;;) {
                            var s = n.delegate;
                            if (s) {
                                var o = _(s, n);
                                if (o) {
                                    if (o === c) continue;
                                    return o
                                }
                            }
                            if ("next" === n.method) n.sent = n._sent = n.arg;
                            else if ("throw" === n.method) {
                                if ("suspendedStart" === a) throw a = "completed", n.arg;
                                n.dispatchException(n.arg)
                            } else "return" === n.method && n.abrupt("return", n.arg);
                            a = "executing";
                            var p = u(t, e, n);
                            if ("normal" === p.type) {
                                if (a = n.done ? "completed" : "suspendedYield", p.arg === c) continue;
                                return {
                                    value: p.arg,
                                    done: n.done
                                }
                            }
                            "throw" === p.type && (a = "completed", n.method = "throw", n.arg = p.arg)
                        }
                    }
                }(t, n, i), r
            }

            function u(t, e, n) {
                try {
                    return {
                        type: "normal",
                        arg: t.call(e, n)
                    }
                } catch (t) {
                    return {
                        type: "throw",
                        arg: t
                    }
                }
            }
            t.wrap = o;
            var c = {};

            function p() {}

            function y() {}

            function d() {}
            var l = {};
            l[r] = function () {
                return this
            };
            var m = Object.getPrototypeOf,
                f = m && m(m(A([])));
            f && f !== e && n.call(f, r) && (l = f);
            var b = d.prototype = p.prototype = Object.create(l);

            function h(t) {
                ["next", "throw", "return"].forEach((function (e) {
                    t[e] = function (t) {
                        return this._invoke(e, t)
                    }
                }))
            }

            function v(t, e) {
                var a;
                this._invoke = function (r, i) {
                    function s() {
                        return new e((function (a, s) {
                            ! function a(r, i, s, o) {
                                var c = u(t[r], t, i);
                                if ("throw" !== c.type) {
                                    var p = c.arg,
                                        y = p.value;
                                    return y && "object" == typeof y && n.call(y, "__await") ? e.resolve(y.__await).then((function (t) {
                                        a("next", t, s, o)
                                    }), (function (t) {
                                        a("throw", t, s, o)
                                    })) : e.resolve(y).then((function (t) {
                                        p.value = t, s(p)
                                    }), (function (t) {
                                        return a("throw", t, s, o)
                                    }))
                                }
                                o(c.arg)
                            }(r, i, a, s)
                        }))
                    }
                    return a = a ? a.then(s, s) : s()
                }
            }

            function _(t, e) {
                var n = t.iterator[e.method];
                if (void 0 === n) {
                    if (e.delegate = null, "throw" === e.method) {
                        if (t.iterator.return && (e.method = "return", e.arg = void 0, _(t, e), "throw" === e.method)) return c;
                        e.method = "throw", e.arg = new TypeError("The iterator does not provide a 'throw' method")
                    }
                    return c
                }
                var a = u(n, t.iterator, e.arg);
                if ("throw" === a.type) return e.method = "throw", e.arg = a.arg, e.delegate = null, c;
                var r = a.arg;
                return r ? r.done ? (e[t.resultName] = r.value, e.next = t.nextLoc, "return" !== e.method && (e.method = "next", e.arg = void 0), e.delegate = null, c) : r : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, c)
            }

            function w(t) {
                var e = {
                    tryLoc: t[0]
                };
                1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e)
            }

            function g(t) {
                var e = t.completion || {};
                e.type = "normal", delete e.arg, t.completion = e
            }

            function x(t) {
                this.tryEntries = [{
                    tryLoc: "root"
                }], t.forEach(w, this), this.reset(!0)
            }

            function A(t) {
                if (t) {
                    var e = t[r];
                    if (e) return e.call(t);
                    if ("function" == typeof t.next) return t;
                    if (!isNaN(t.length)) {
                        var a = -1,
                            i = function e() {
                                for (; ++a < t.length;)
                                    if (n.call(t, a)) return e.value = t[a], e.done = !1, e;
                                return e.value = void 0, e.done = !0, e
                            };
                        return i.next = i
                    }
                }
                return {
                    next: T
                }
            }

            function T() {
                return {
                    value: void 0,
                    done: !0
                }
            }
            return y.prototype = b.constructor = d, d.constructor = y, d[s] = y.displayName = "GeneratorFunction", t.isGeneratorFunction = function (t) {
                var e = "function" == typeof t && t.constructor;
                return !!e && (e === y || "GeneratorFunction" === (e.displayName || e.name))
            }, t.mark = function (t) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(t, d) : (t.__proto__ = d, s in t || (t[s] = "GeneratorFunction")), t.prototype = Object.create(b), t
            }, t.awrap = function (t) {
                return {
                    __await: t
                }
            }, h(v.prototype), v.prototype[i] = function () {
                return this
            }, t.AsyncIterator = v, t.async = function (e, n, a, r, i) {
                void 0 === i && (i = Promise);
                var s = new v(o(e, n, a, r), i);
                return t.isGeneratorFunction(n) ? s : s.next().then((function (t) {
                    return t.done ? t.value : s.next()
                }))
            }, h(b), b[s] = "Generator", b[r] = function () {
                return this
            }, b.toString = function () {
                return "[object Generator]"
            }, t.keys = function (t) {
                var e = [];
                for (var n in t) e.push(n);
                return e.reverse(),
                    function n() {
                        for (; e.length;) {
                            var a = e.pop();
                            if (a in t) return n.value = a, n.done = !1, n
                        }
                        return n.done = !0, n
                    }
            }, t.values = A, x.prototype = {
                constructor: x,
                reset: function (t) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = !1, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(g), !t)
                        for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = void 0)
                },
                stop: function () {
                    this.done = !0;
                    var t = this.tryEntries[0].completion;
                    if ("throw" === t.type) throw t.arg;
                    return this.rval
                },
                dispatchException: function (t) {
                    if (this.done) throw t;
                    var e = this;

                    function a(n, a) {
                        return s.type = "throw", s.arg = t, e.next = n, a && (e.method = "next", e.arg = void 0), !!a
                    }
                    for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                        var i = this.tryEntries[r],
                            s = i.completion;
                        if ("root" === i.tryLoc) return a("end");
                        if (i.tryLoc <= this.prev) {
                            var o = n.call(i, "catchLoc"),
                                u = n.call(i, "finallyLoc");
                            if (o && u) {
                                if (this.prev < i.catchLoc) return a(i.catchLoc, !0);
                                if (this.prev < i.finallyLoc) return a(i.finallyLoc)
                            } else if (o) {
                                if (this.prev < i.catchLoc) return a(i.catchLoc, !0)
                            } else {
                                if (!u) throw new Error("try statement without catch or finally");
                                if (this.prev < i.finallyLoc) return a(i.finallyLoc)
                            }
                        }
                    }
                },
                abrupt: function (t, e) {
                    for (var a = this.tryEntries.length - 1; a >= 0; --a) {
                        var r = this.tryEntries[a];
                        if (r.tryLoc <= this.prev && n.call(r, "finallyLoc") && this.prev < r.finallyLoc) {
                            var i = r;
                            break
                        }
                    }
                    i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
                    var s = i ? i.completion : {};
                    return s.type = t, s.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, c) : this.complete(s)
                },
                complete: function (t, e) {
                    if ("throw" === t.type) throw t.arg;
                    return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), c
                },
                finish: function (t) {
                    for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                        var n = this.tryEntries[e];
                        if (n.finallyLoc === t) return this.complete(n.completion, n.afterLoc), g(n), c
                    }
                },
                catch: function (t) {
                    for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                        var n = this.tryEntries[e];
                        if (n.tryLoc === t) {
                            var a = n.completion;
                            if ("throw" === a.type) {
                                var r = a.arg;
                                g(n)
                            }
                            return r
                        }
                    }
                    throw new Error("illegal catch attempt")
                },
                delegateYield: function (t, e, n) {
                    return this.delegate = {
                        iterator: A(t),
                        resultName: e,
                        nextLoc: n
                    }, "next" === this.method && (this.arg = void 0), c
                }
            }, t
        }(t.exports);
        try {
            regeneratorRuntime = e
        } catch (t) {
            Function("r", "regeneratorRuntime = r")(e)
        }
    }));

    function H(t) {
        return Y.apply(this, arguments)
    }

    function Y() {
        return (Y = M(G.mark((function t(e) {
            var n, a, r, i, y, d, l;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        a = (n = e.web3).provider, r = new s({
                            pollingInterval: n.pollingInterval || 4e3
                        }), i = {
                            engine: r
                        }, y = function () {
                            var t = X(a),
                                e = new c;
                            return e.on("data", (function (t, e) {
                                return r.emit("data", t, e)
                            })), r.addProvider(e), new u({
                                rpcUrl: t
                            })
                        }, d = function () {
                            var t = X(a),
                                e = new c;
                            return e.on("data", (function (t, e) {
                                return r.emit("data", t, e)
                            })), r.addProvider(e), new o({
                                rpcUrl: t
                            })
                        }, l = function () {
                            if (!a.inject) throw new Error("'inject' must be supplied with ProviderType.INJECT");
                            return new p(a.inject)
                        }, t.t0 = a.type, t.next = "BROWSER" === t.t0 ? 9 : "WEBSOCKET" === t.t0 ? 13 : "HTTP" === t.t0 ? 15 : "INFURA" === t.t0 ? 17 : "INJECT" === t.t0 ? 19 : 21;
                        break;
                    case 9:
                        return t.next = 11, z();
                    case 11:
                        return i.provider = t.sent, t.abrupt("break", 22);
                    case 13:
                        return i.provider = d(), t.abrupt("break", 22);
                    case 15:
                        return i.provider = y(), t.abrupt("break", 22);
                    case 17:
                        return i.provider = "wss" === a.protocol ? d() : y(), t.abrupt("break", 22);
                    case 19:
                        return i.provider = l(), t.abrupt("break", 22);
                    case 21:
                        throw new Error("provider type must be defined");
                    case 22:
                        return r.addProvider(i.provider), t.abrupt("return", i);
                    case 24:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }

    function z() {
        return K.apply(this, arguments)
    }

    function K() {
        return (K = M(G.mark((function t() {
            var e;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        if ("undefined" != typeof window) {
                            t.next = 2;
                            break
                        }
                        throw new Error("Cannot use ProviderType.BROWSER because window is undefined");
                    case 2:
                        if (e = function (t) {
                                var e = new p(t);
                                return e.isWindowProvider = !0, e
                            }, !window.ethereum) {
                            t.next = 9;
                            break
                        }
                        return t.next = 6, window.ethereum.enable();
                    case 6:
                        return t.abrupt("return", e(window.ethereum));
                    case 9:
                        if (!window.web3) {
                            t.next = 11;
                            break
                        }
                        return t.abrupt("return", e(window.web3.currentProvider));
                    case 11:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }

    function X(t) {
        var e = t.network,
            n = t.protocol,
            a = t.infuraProjectId,
            r = t.type,
            i = t.url;
        switch (r) {
            case "HTTP":
            case "WEBSOCKET":
                return i;
            case "INFURA":
                return function (t, e, n) {
                    if (void 0 === t && (t = "https"), !n) throw new Error("Cannot use infura without a project ID");
                    var a = t + "://" + e + ".infura.io";
                    return (a += "wss" === t ? "/ws" : "") + "/v3/" + n
                }(n, e, a);
            default:
                throw new Error("Invalid web3 provider type: " + r)
        }
    }

    function q(t) {
        var e = t.key;
        if ("string" != typeof e || !e.match(/^(0x)?[0-9a-fA-F]{64}$/)) throw new Error("Invalid private key format");
        var n = e.startsWith("0x") ? [e, e.replace(/^0x/, "")] : ["0x" + e, e],
            a = n[1],
            s = r.fromPrivate(n[0]),
            o = Buffer.from(a, "hex");
        return {
            subprovider: new i({
                getAddressString: function () {
                    return s.address.toLowerCase()
                },
                getPrivateKey: function () {
                    return o
                }
            }, {}),
            address: s.address
        }
    }

    function V(t, e) {
        return J.apply(this, arguments)
    }

    function J() {
        return (J = M(G.mark((function t(e, n) {
            var a, r, i, s;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        return s = (a = void 0 === n ? {} : n).address, k(!((i = void 0 === (r = a.offset) ? 0 : r) && s), "Cannot set both address and offset"), t.abrupt("return", new Promise((function (t, n) {
                            return e.handleRequest({
                                method: "eth_accounts",
                                params: [],
                                id: 1
                            }, null, (function (e, a) {
                                if (e) return n(e);
                                if (s) {
                                    var r = a.find((function (t) {
                                        return t.toLowerCase() === s.toLowerCase()
                                    }));
                                    k(r, "No matching address found in provider."), t(r.toLowerCase())
                                } else t("string" == typeof a[i] ? a[i].toLowerCase() : a[i])
                            }))
                        })));
                    case 3:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }

    function Q(t, e) {
        return $.apply(this, arguments)
    }

    function $() {
        return ($ = M(G.mark((function t(e, n) {
            var a, r, i;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        return a = e.offset, r = e.address, i = new Proxy(n, {}), t.t0 = i, t.next = 5, V(i, {
                            offset: a,
                            address: r
                        });
                    case 5:
                        return t.t1 = t.sent, t.abrupt("return", {
                            subprovider: t.t0,
                            address: t.t1
                        });
                    case 7:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }

    function Z() {
        return tt.apply(this, arguments)
    }

    function tt() {
        return (tt = M(G.mark((function t() {
            var e;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        return t.next = 2, z();
                    case 2:
                        return t.t0 = e = t.sent, t.next = 6, V(e);
                    case 6:
                        return t.t1 = t.sent, t.abrupt("return", {
                            subprovider: t.t0,
                            address: t.t1
                        });
                    case 8:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }
    var et = "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        nt = ["type", "autoSwitch"],
        at = l("dai:AccountsService"),
        rt = n.pick(["name", "type", "address"]),
        it = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "accounts"), (n = t.call(this, e, ["event"]) || this)._accounts = {}, n._accountFactories = {
                    privateKey: q,
                    provider: Q,
                    browser: Z
                }, n
            }
            P(e, t);
            var r = e.prototype;
            return r.initialize = function () {
                var t = M(G.mark((function t(e) {
                    var a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === e && (e = {}), this._settings = n.omit("web3", e), t.next = 4, H(e);
                            case 4:
                                this._engine = (a = t.sent).engine, this._provider = a.provider;
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), r.connect = function () {
                var t = M(G.mark((function t() {
                    var e, n, a, r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                e = Object.keys(this._settings), n = 0, a = e;
                            case 2:
                                if (!(n < a.length)) {
                                    t.next = 9;
                                    break
                                }
                                return r = a[n], t.next = 6, this.addAccount(r, this._settings[r]);
                            case 6:
                                n++, t.next = 2;
                                break;
                            case 9:
                                if (0 !== e.length) {
                                    t.next = 12;
                                    break
                                }
                                return t.next = 12, this.addAccount("default", {
                                    type: "provider"
                                });
                            case 12:
                                this._engine.start();
                            case 13:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), r.getProvider = function () {
                return this._engine
            }, r.addAccountType = function (t, e) {
                this._accountFactories[t] && a(!1), this._accountFactories[t] = e
            }, r.addAccount = function () {
                var t = M(G.mark((function t(e, n) {
                    var r, i, s, o, u, c, p;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (void 0 === n && (n = {}), e && "string" != typeof e && (n = e, e = null), i = (r = n).type, s = r.autoSwitch, o = j(r, nt), this._engine || a(!1), !e || !this._accounts[e]) {
                                    t.next = 6;
                                    break
                                }
                                throw new Error("An account with this name already exists.");
                            case 6:
                                return (u = this._accountFactories[i]) || a(!1), t.next = 10, u(o, this._provider);
                            case 10:
                                if ((c = t.sent).address) {
                                    t.next = 14;
                                    break
                                }
                                return at('Not adding account "' + e + '" (no address found)'), t.abrupt("return");
                            case 14:
                                if (c.address = c.address.toLowerCase(), !this._getAccountWithAddress(c.address)) {
                                    t.next = 17;
                                    break
                                }
                                throw new Error("An account with this address already exists.");
                            case 17:
                                return e || (e = c.address), p = O({
                                    name: e,
                                    type: i,
                                    autoSwitch: s || !1
                                }, c), this._accounts[e] = p, this._currentAccount && "default" !== e || this.useAccount(e), this.hasAccount() && this.get("event").emit("accounts/ADD", {
                                    account: rt(p)
                                }), t.abrupt("return", p);
                            case 23:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), r.listAccounts = function () {
                return n.map(rt, this._accounts)
            }, r.useAccount = function (t) {
                var e, n, r = this._accounts[t];
                r || a(!1), this._autoSwitchCheckHandle && clearInterval(this._autoSwitchCheckHandle), "browser" === r.type && (k((e = r.address, !(n = st()) || n.toLowerCase() === e), "cannot use a browser account that is not currently selected"), r.autoSwitch && (this._autoSwitchCheckHandle = setInterval(this._autoSwitchCheckAccountChange(r.address), 500))), this._currentAccount && (this._engine.stop(), this._engine.removeProvider(this.currentWallet())), this._currentAccount = t, this._engine.addProvider(this.currentWallet(), 0), this._engine.start(), this.hasAccount() && this.get("event").emit("accounts/CHANGE", {
                    account: this.currentAccount()
                })
            }, r._autoSwitchCheckAccountChange = function (t) {
                var e = this;
                return M(G.mark((function n() {
                    var a;
                    return G.wrap((function (n) {
                        for (;;) switch (n.prev = n.next) {
                            case 0:
                                if ((a = st().toLowerCase()) === t) {
                                    n.next = 6;
                                    break
                                }
                                if (e._getAccountWithAddress(a)) {
                                    n.next = 5;
                                    break
                                }
                                return n.next = 5, e.addAccount({
                                    type: "browser",
                                    autoSwitch: !0
                                });
                            case 5:
                                e.useAccountWithAddress(a);
                            case 6:
                            case "end":
                                return n.stop()
                        }
                    }), n)
                })))
            }, r._getAccountWithAddress = function (t) {
                return Object.values(this._accounts).find((function (e) {
                    return e.address.toUpperCase() === t.toUpperCase()
                }))
            }, r.useAccountWithAddress = function (t) {
                var e = this._getAccountWithAddress(t);
                if (!e) throw new Error("No account found with address " + t);
                this.useAccount(e.name)
            }, r.hasAccount = function () {
                return !!this._currentAccount
            }, r.hasNonProviderAccount = function () {
                return this.hasAccount() && "provider" != this.currentAccount().type
            }, r.currentAccount = function () {
                return this.hasAccount() || a(!1), rt(this._accounts[this._currentAccount])
            }, r.currentAddress = function () {
                return this.hasAccount() || a(!1), this._accounts[this._currentAccount].address
            }, r.currentWallet = function () {
                return this._accounts[this._currentAccount].subprovider
            }, e
        }(e.PublicService);

    function st() {
        return void 0 !== window.ethereum ? window.ethereum.selectedAddress : window.web3.eth.defaultAccount
    }
    var ot = ut({});

    function ut(t) {
        var e = t.numArguments;
        return function (t, n, a) {
            var r = a.value,
                i = e || r.length;
            return a.value = function () {
                for (var t = this, e = arguments.length, n = new Array(e), a = 0; a < e; a++) n[a] = arguments[a];
                var s, o = n[n.length - 1];
                "object" == typeof o && null !== o && o.constructor === Object ? (n = n.slice(0, n.length - 1), s = o) : s = {};
                var u = M(G.mark((function e() {
                    var a;
                    return G.wrap((function (e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.next = 2, 0;
                            case 2:
                                return s.promise || (s.promise = u), a = [].concat(n, f.times(i - 1 - n.length, (function () {})), [s]), e.abrupt("return", r.apply(t, a));
                            case 5:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                })))();
                return u
            }, a
        }
    }
    var ct = new d(et).shiftedBy(-18),
        pt = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "allowance"), (n = t.call(this, e, ["token", "event"]) || this)._shouldMinimizeAllowance = !1, n
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                t && t.useMinimizeAllowancePolicy && (this._shouldMinimizeAllowance = !0)
            }, n.requireAllowance = function () {
                var t = M(G.mark((function t(e, n, a) {
                    var r, i, s, o, u, c, p, y;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return i = void 0 === (r = a.estimate) ? ct : r, s = a.promise, o = this.get("token").getToken(e), u = this.get("token").get("web3").currentAddress(), t.next = 5, o.allowance(u, n);
                            case 5:
                                if (!(c = t.sent).lt(ct.div(2)) || this._shouldMinimizeAllowance) {
                                    t.next = 12;
                                    break
                                }
                                return t.next = 9, o.approveUnlimited(n, {
                                    promise: s
                                });
                            case 9:
                                return p = t.sent, this.get("event").emit("allowance/APPROVE", {
                                    transaction: p
                                }), t.abrupt("return", p);
                            case 12:
                                if (!c.lt(i) || !this._shouldMinimizeAllowance) {
                                    t.next = 17;
                                    break
                                }
                                return t.next = 15, o.approve(n, i, {
                                    promise: s
                                });
                            case 15:
                                y = t.sent, this.get("event").emit("allowance/APPROVE", {
                                    transaction: y
                                });
                            case 17:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a) {
                    return t.apply(this, arguments)
                }
            }(), n.removeAllowance = function () {
                var t = M(G.mark((function t(e, n, a) {
                    var r, i;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return r = a.promise, i = this.get("token").getToken(e), t.next = 4, i.allowance(this.get("token").get("web3").currentAddress(), n);
                            case 4:
                                if (0 == parseInt(t.sent)) {
                                    t.next = 7;
                                    break
                                }
                                return t.abrupt("return", i.approve(n, "0", {
                                    promise: r
                                }));
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a) {
                    return t.apply(this, arguments)
                }
            }(), e
        }(e.PrivateService);
    m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object, Object, Object]), m.__metadata("design:returntype", Promise)], pt.prototype, "requireAllowance", null), m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object, Object, Object]), m.__metadata("design:returntype", Promise)], pt.prototype, "removeAllowance", null);
    var yt = function (t) {
            function e(e) {
                return void 0 === e && (e = "cache"), t.call(this, e) || this
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                void 0 === t && (t = {}), t.storage && (this._storage = t.storage)
            }, n.isEnabled = function () {
                return !!this._storage
            }, n.has = function (t) {
                return !!this._storage && t in this._storage
            }, n.fetch = function (t) {
                return this._storage ? this._storage[t] : void 0
            }, n.store = function (t, e) {
                this._storage && (this._storage[t] = e)
            }, e
        }(e.LocalService),
        dt = [{
            constant: !1,
            inputs: [{
                name: "guy",
                type: "address"
            }, {
                name: "wad",
                type: "uint256"
            }],
            name: "approve",
            outputs: [{
                name: "",
                type: "bool"
            }],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
        }, {
            constant: !0,
            inputs: [],
            name: "totalSupply",
            outputs: [{
                name: "",
                type: "uint256"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
        }, {
            constant: !1,
            inputs: [{
                name: "src",
                type: "address"
            }, {
                name: "dst",
                type: "address"
            }, {
                name: "wad",
                type: "uint256"
            }],
            name: "transferFrom",
            outputs: [{
                name: "",
                type: "bool"
            }],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
        }, {
            constant: !0,
            inputs: [{
                name: "guy",
                type: "address"
            }],
            name: "balanceOf",
            outputs: [{
                name: "",
                type: "uint256"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
        }, {
            constant: !1,
            inputs: [{
                name: "dst",
                type: "address"
            }, {
                name: "wad",
                type: "uint256"
            }],
            name: "transfer",
            outputs: [{
                name: "",
                type: "bool"
            }],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
        }, {
            constant: !0,
            inputs: [{
                name: "src",
                type: "address"
            }, {
                name: "guy",
                type: "address"
            }],
            name: "allowance",
            outputs: [{
                name: "",
                type: "uint256"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                name: "src",
                type: "address"
            }, {
                indexed: !0,
                name: "guy",
                type: "address"
            }, {
                indexed: !1,
                name: "wad",
                type: "uint256"
            }],
            name: "Approval",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                name: "src",
                type: "address"
            }, {
                indexed: !0,
                name: "dst",
                type: "address"
            }, {
                indexed: !1,
                name: "wad",
                type: "uint256"
            }],
            name: "Transfer",
            type: "event"
        }],
        lt = {
            daiV1: {
                tub: [{
                    constant: !1,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "join",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "sin",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "skr",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "gov",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "era",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "ink",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "rho",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "air",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "rhi",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "flow",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "cap",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "bite",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "draw",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "bid",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "cupi",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "axe",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "tag",
                    outputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "off",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "vox",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "gap",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "rap",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "wipe",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "gem",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tap_",
                        type: "address"
                    }],
                    name: "turn",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "per",
                    outputs: [{
                        name: "ray",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "exit",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "pip_",
                        type: "address"
                    }],
                    name: "setPip",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "pie",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "fit_",
                        type: "uint256"
                    }, {
                        name: "jam",
                        type: "uint256"
                    }],
                    name: "cage",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "rum",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "sai",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "param",
                        type: "bytes32"
                    }, {
                        name: "val",
                        type: "uint256"
                    }],
                    name: "mold",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "tax",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "drip",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "free",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "mat",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "pep",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "out",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "lock",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "shut",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "guy",
                        type: "address"
                    }],
                    name: "give",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "fit",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "chi",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "vox_",
                        type: "address"
                    }],
                    name: "setVox",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "pip",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "pep_",
                        type: "address"
                    }],
                    name: "setPep",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "fee",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "lad",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "din",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "ask",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "safe",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "pit",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "tab",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "open",
                    outputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "tap",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    name: "cups",
                    outputs: [{
                        name: "lad",
                        type: "address"
                    }, {
                        name: "ink",
                        type: "uint256"
                    }, {
                        name: "art",
                        type: "uint256"
                    }, {
                        name: "ire",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    inputs: [{
                        name: "sai_",
                        type: "address"
                    }, {
                        name: "sin_",
                        type: "address"
                    }, {
                        name: "skr_",
                        type: "address"
                    }, {
                        name: "gem_",
                        type: "address"
                    }, {
                        name: "gov_",
                        type: "address"
                    }, {
                        name: "pip_",
                        type: "address"
                    }, {
                        name: "pep_",
                        type: "address"
                    }, {
                        name: "vox_",
                        type: "address"
                    }, {
                        name: "pit_",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "lad",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "LogNewCup",
                    type: "event"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }]
            },
            dappHub: {
                dsValue: [{
                    constant: !1,
                    inputs: [{
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "wut",
                        type: "bytes32"
                    }],
                    name: "poke",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "read",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "peek",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }, {
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "void",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }],
                dsEthToken: [{
                    constant: !0,
                    inputs: [],
                    name: "name",
                    outputs: [{
                        name: "",
                        type: "string"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "guy",
                        type: "address"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "approve",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "totalSupply",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "src",
                        type: "address"
                    }, {
                        name: "dst",
                        type: "address"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "transferFrom",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "withdraw",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "decimals",
                    outputs: [{
                        name: "",
                        type: "uint8"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "balanceOf",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "symbol",
                    outputs: [{
                        name: "",
                        type: "string"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "dst",
                        type: "address"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "transfer",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "deposit",
                    outputs: [],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }, {
                        name: "",
                        type: "address"
                    }],
                    name: "allowance",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    payable: !0,
                    stateMutability: "payable",
                    type: "fallback"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "src",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "Approval",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "src",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "dst",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "Transfer",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "dst",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "Deposit",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "src",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "Withdrawal",
                    type: "event"
                }],
                dsGuard: [{
                    constant: !1,
                    inputs: [{
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "src",
                        type: "address"
                    }, {
                        name: "dst",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "forbid",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "src",
                        type: "bytes32"
                    }, {
                        name: "dst",
                        type: "bytes32"
                    }, {
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "forbid",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "ANY",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "src_",
                        type: "address"
                    }, {
                        name: "dst_",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }],
                    name: "canCall",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "src",
                        type: "address"
                    }, {
                        name: "dst",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "permit",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "src",
                        type: "bytes32"
                    }, {
                        name: "dst",
                        type: "bytes32"
                    }, {
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "permit",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "src",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "dst",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "LogPermit",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "src",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "dst",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "sig",
                        type: "bytes32"
                    }],
                    name: "LogForbid",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }],
                dsChief: [{
                    constant: !0,
                    inputs: [],
                    name: "IOU",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "who",
                        type: "address"
                    }],
                    name: "getUserRoles",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "GOV",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "code",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }],
                    name: "getCapabilityRoles",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "code",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }],
                    name: "isCapabilityPublic",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "MAX_YAYS",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "whom",
                        type: "address"
                    }],
                    name: "lift",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "yays",
                        type: "address[]"
                    }],
                    name: "etch",
                    outputs: [{
                        name: "slate",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "approvals",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "who",
                        type: "address"
                    }, {
                        name: "role",
                        type: "uint8"
                    }, {
                        name: "enabled",
                        type: "bool"
                    }],
                    name: "setUserRole",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "role",
                        type: "uint8"
                    }, {
                        name: "code",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }, {
                        name: "enabled",
                        type: "bool"
                    }],
                    name: "setRoleCapability",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "who",
                        type: "address"
                    }, {
                        name: "role",
                        type: "uint8"
                    }],
                    name: "hasUserRole",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "slate",
                        type: "bytes32"
                    }],
                    name: "vote",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "caller",
                        type: "address"
                    }, {
                        name: "code",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }],
                    name: "canCall",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "bytes32"
                    }, {
                        name: "",
                        type: "uint256"
                    }],
                    name: "slates",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "code",
                        type: "address"
                    }, {
                        name: "sig",
                        type: "bytes4"
                    }, {
                        name: "enabled",
                        type: "bool"
                    }],
                    name: "setPublicCapability",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "who",
                        type: "address"
                    }, {
                        name: "enabled",
                        type: "bool"
                    }],
                    name: "setRootUser",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "votes",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "free",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "lock",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "yays",
                        type: "address[]"
                    }],
                    name: "vote",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "who",
                        type: "address"
                    }],
                    name: "isUserRoot",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "deposits",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "hat",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    inputs: [{
                        name: "GOV",
                        type: "address"
                    }, {
                        name: "IOU",
                        type: "address"
                    }, {
                        name: "MAX_YAYS",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "slate",
                        type: "bytes32"
                    }],
                    name: "Etch",
                    type: "event"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }],
                dsSpell: [{
                    constant: !0,
                    inputs: [],
                    name: "data",
                    outputs: [{
                        name: "",
                        type: "bytes"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "cast",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "done",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "mana",
                    outputs: [{
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "whom",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    inputs: [{
                        name: "whom_",
                        type: "address"
                    }, {
                        name: "mana_",
                        type: "uint256"
                    }, {
                        name: "data_",
                        type: "bytes"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }],
                dsSpellBook: [{
                    constant: !1,
                    inputs: [{
                        name: "whom",
                        type: "address"
                    }, {
                        name: "mana",
                        type: "uint256"
                    }, {
                        name: "data",
                        type: "bytes"
                    }],
                    name: "make",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }],
                dsProxy: [{
                    constant: !1,
                    inputs: [{
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "_target",
                        type: "address"
                    }, {
                        name: "_data",
                        type: "bytes"
                    }],
                    name: "execute",
                    outputs: [{
                        name: "response",
                        type: "bytes"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "_code",
                        type: "bytes"
                    }, {
                        name: "_data",
                        type: "bytes"
                    }],
                    name: "execute",
                    outputs: [{
                        name: "target",
                        type: "address"
                    }, {
                        name: "response",
                        type: "bytes"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "cache",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "_cacheAddr",
                        type: "address"
                    }],
                    name: "setCache",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    inputs: [{
                        name: "_cacheAddr",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    payable: !0,
                    stateMutability: "payable",
                    type: "fallback"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }]
            },
            exchangesV1: {
                makerOtc: [{
                    inputs: [{
                        internalType: "uint64",
                        name: "close_time",
                        type: "uint64"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "pair",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "maker",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "pay_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "buy_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint64",
                        name: "timestamp",
                        type: "uint64"
                    }],
                    name: "LogBump",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "bool",
                        name: "isEnabled",
                        type: "bool"
                    }],
                    name: "LogBuyEnabled",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "address",
                        name: "keeper",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "LogDelete",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "address",
                        name: "keeper",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "LogInsert",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "LogItemUpdate",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "pair",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "maker",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "pay_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "buy_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint64",
                        name: "timestamp",
                        type: "uint64"
                    }],
                    name: "LogKill",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "pair",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "maker",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "pay_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "buy_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint64",
                        name: "timestamp",
                        type: "uint64"
                    }],
                    name: "LogMake",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "bool",
                        name: "isEnabled",
                        type: "bool"
                    }],
                    name: "LogMatchingEnabled",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "address",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint256",
                        name: "min_amount",
                        type: "uint256"
                    }],
                    name: "LogMinSell",
                    type: "event"
                }, {
                    anonymous: !0,
                    inputs: [{
                        indexed: !0,
                        internalType: "bytes4",
                        name: "sig",
                        type: "bytes4"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "guy",
                        type: "address"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "foo",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "bar",
                        type: "bytes32"
                    }, {
                        indexed: !1,
                        internalType: "uint256",
                        name: "wad",
                        type: "uint256"
                    }, {
                        indexed: !1,
                        internalType: "bytes",
                        name: "fax",
                        type: "bytes"
                    }],
                    name: "LogNote",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        internalType: "address",
                        name: "authority",
                        type: "address"
                    }],
                    name: "LogSetAuthority",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        internalType: "address",
                        name: "owner",
                        type: "address"
                    }],
                    name: "LogSetOwner",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "LogSortedOffer",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "bytes32",
                        name: "pair",
                        type: "bytes32"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "maker",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "taker",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "take_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint128",
                        name: "give_amt",
                        type: "uint128"
                    }, {
                        indexed: !1,
                        internalType: "uint64",
                        name: "timestamp",
                        type: "uint64"
                    }],
                    name: "LogTake",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        indexed: !1,
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        indexed: !0,
                        internalType: "address",
                        name: "buy_gem",
                        type: "address"
                    }],
                    name: "LogTrade",
                    type: "event"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !1,
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "LogUnsortedOffer",
                    type: "event"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "address",
                        name: "",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "",
                        type: "address"
                    }],
                    name: "_best",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "address",
                        name: "",
                        type: "address"
                    }],
                    name: "_dust",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    name: "_near",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    name: "_rank",
                    outputs: [{
                        internalType: "uint256",
                        name: "next",
                        type: "uint256"
                    }, {
                        internalType: "uint256",
                        name: "prev",
                        type: "uint256"
                    }, {
                        internalType: "uint256",
                        name: "delb",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "address",
                        name: "",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "",
                        type: "address"
                    }],
                    name: "_span",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "authority",
                    outputs: [{
                        internalType: "contract DSAuthority",
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "bytes32",
                        name: "id_",
                        type: "bytes32"
                    }],
                    name: "bump",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }, {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256"
                    }],
                    name: "buy",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "max_fill_amount",
                        type: "uint256"
                    }],
                    name: "buyAllAmount",
                    outputs: [{
                        internalType: "uint256",
                        name: "fill_amt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "buyEnabled",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "cancel",
                    outputs: [{
                        internalType: "bool",
                        name: "success",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "close_time",
                    outputs: [{
                        internalType: "uint64",
                        name: "",
                        type: "uint64"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "del_rank",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "dustId",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "sell_gem",
                        type: "address"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }],
                    name: "getBestOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "getBetterOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }],
                    name: "getBuyAmount",
                    outputs: [{
                        internalType: "uint256",
                        name: "fill_amt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "getFirstUnsortedOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }],
                    name: "getMinSell",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "getNextUnsortedOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "getOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "sell_gem",
                        type: "address"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }],
                    name: "getOfferCount",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "getOwner",
                    outputs: [{
                        internalType: "address",
                        name: "owner",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }],
                    name: "getPayAmount",
                    outputs: [{
                        internalType: "uint256",
                        name: "fill_amt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "getTime",
                    outputs: [{
                        internalType: "uint64",
                        name: "",
                        type: "uint64"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "getWorseOffer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }, {
                        internalType: "uint256",
                        name: "pos",
                        type: "uint256"
                    }],
                    name: "insert",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "isActive",
                    outputs: [{
                        internalType: "bool",
                        name: "active",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "isClosed",
                    outputs: [{
                        internalType: "bool",
                        name: "closed",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "id",
                        type: "uint256"
                    }],
                    name: "isOfferSorted",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }],
                    name: "kill",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "last_offer_id",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint128",
                        name: "pay_amt",
                        type: "uint128"
                    }, {
                        internalType: "uint128",
                        name: "buy_amt",
                        type: "uint128"
                    }],
                    name: "make",
                    outputs: [{
                        internalType: "bytes32",
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "matchingEnabled",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "pos",
                        type: "uint256"
                    }],
                    name: "offer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "pos",
                        type: "uint256"
                    }, {
                        internalType: "bool",
                        name: "rounding",
                        type: "bool"
                    }],
                    name: "offer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }],
                    name: "offer",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    name: "offers",
                    outputs: [{
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "buy_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "owner",
                        type: "address"
                    }, {
                        internalType: "uint64",
                        name: "timestamp",
                        type: "uint64"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "owner",
                    outputs: [{
                        internalType: "address",
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "pay_amt",
                        type: "uint256"
                    }, {
                        internalType: "contract ERC20",
                        name: "buy_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "min_fill_amount",
                        type: "uint256"
                    }],
                    name: "sellAllAmount",
                    outputs: [{
                        internalType: "uint256",
                        name: "fill_amt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "contract DSAuthority",
                        name: "authority_",
                        type: "address"
                    }],
                    name: "setAuthority",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "bool",
                        name: "buyEnabled_",
                        type: "bool"
                    }],
                    name: "setBuyEnabled",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "bool",
                        name: "matchingEnabled_",
                        type: "bool"
                    }],
                    name: "setMatchingEnabled",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "contract ERC20",
                        name: "pay_gem",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "dust",
                        type: "uint256"
                    }],
                    name: "setMinSell",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "address",
                        name: "owner_",
                        type: "address"
                    }],
                    name: "setOwner",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "stop",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "stopped",
                    outputs: [{
                        internalType: "bool",
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        internalType: "bytes32",
                        name: "id",
                        type: "bytes32"
                    }, {
                        internalType: "uint128",
                        name: "maxTakeAmount",
                        type: "uint128"
                    }],
                    name: "take",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }]
            },
            general: {
                erc20: dt
            },
            proxies: {
                oasisProxy: [{
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }, {
                        name: "wethToken",
                        type: "address"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "sellAllAmountBuyEth",
                    outputs: [{
                        name: "wethAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "sellAllAmount",
                    outputs: [{
                        name: "buyAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "maxPayAmt",
                        type: "uint256"
                    }],
                    name: "buyAllAmount",
                    outputs: [{
                        name: "payAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "wethAmt",
                        type: "uint256"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "maxPayAmt",
                        type: "uint256"
                    }],
                    name: "createAndBuyAllAmountBuyEth",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "createAndSellAllAmountBuyEth",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "wethAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }],
                    name: "createAndBuyAllAmountPayEth",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "wethAmt",
                        type: "uint256"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "createAndSellAllAmountPayEth",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "maxPayAmt",
                        type: "uint256"
                    }],
                    name: "createAndBuyAllAmount",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }, {
                        name: "wethToken",
                        type: "address"
                    }],
                    name: "buyAllAmountPayEth",
                    outputs: [{
                        name: "wethAmt",
                        type: "uint256"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "factory",
                        type: "address"
                    }, {
                        name: "otc",
                        type: "address"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "payAmt",
                        type: "uint256"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "createAndSellAllAmount",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "buyAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "wethToken",
                        type: "address"
                    }, {
                        name: "buyToken",
                        type: "address"
                    }, {
                        name: "minBuyAmt",
                        type: "uint256"
                    }],
                    name: "sellAllAmountPayEth",
                    outputs: [{
                        name: "buyAmt",
                        type: "uint256"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "otc",
                        type: "address"
                    }, {
                        name: "wethToken",
                        type: "address"
                    }, {
                        name: "wethAmt",
                        type: "uint256"
                    }, {
                        name: "payToken",
                        type: "address"
                    }, {
                        name: "maxPayAmt",
                        type: "uint256"
                    }],
                    name: "buyAllAmountBuyEth",
                    outputs: [{
                        name: "payAmt",
                        type: "uint256"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    inputs: [{
                        name: "wethToken_",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    payable: !0,
                    stateMutability: "payable",
                    type: "fallback"
                }],
                saiProxy: [{
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "draw",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "jam",
                        type: "uint256"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }, {
                        name: "otc_",
                        type: "address"
                    }],
                    name: "wipeAndFree",
                    outputs: [],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "lockAndDraw",
                    outputs: [],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "lockAndDraw",
                    outputs: [{
                        name: "cup",
                        type: "bytes32"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "registry_",
                        type: "address"
                    }, {
                        name: "tub_",
                        type: "address"
                    }],
                    name: "createAndOpen",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "otc_",
                        type: "address"
                    }],
                    name: "shut",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }, {
                        name: "otc_",
                        type: "address"
                    }],
                    name: "wipe",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "wipe",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }],
                    name: "open",
                    outputs: [{
                        name: "",
                        type: "bytes32"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "shut",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }],
                    name: "lock",
                    outputs: [],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "registry_",
                        type: "address"
                    }, {
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "createOpenLockAndDraw",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "lad",
                        type: "address"
                    }],
                    name: "give",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "registry_",
                        type: "address"
                    }, {
                        name: "tub_",
                        type: "address"
                    }],
                    name: "createOpenAndLock",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "jam",
                        type: "uint256"
                    }],
                    name: "free",
                    outputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "tub_",
                        type: "address"
                    }, {
                        name: "cup",
                        type: "bytes32"
                    }, {
                        name: "jam",
                        type: "uint256"
                    }, {
                        name: "wad",
                        type: "uint256"
                    }],
                    name: "wipeAndFree",
                    outputs: [],
                    payable: !0,
                    stateMutability: "payable",
                    type: "function"
                }],
                dsProxyFactory: [{
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "isProxy",
                    outputs: [{
                        name: "",
                        type: "bool"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [],
                    name: "cache",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [],
                    name: "build",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "owner",
                        type: "address"
                    }],
                    name: "build",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    inputs: [],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }, {
                    anonymous: !1,
                    inputs: [{
                        indexed: !0,
                        name: "sender",
                        type: "address"
                    }, {
                        indexed: !0,
                        name: "owner",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "proxy",
                        type: "address"
                    }, {
                        indexed: !1,
                        name: "cache",
                        type: "address"
                    }],
                    name: "Created",
                    type: "event"
                }],
                proxyRegistry: [{
                    constant: !1,
                    inputs: [],
                    name: "build",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    constant: !0,
                    inputs: [{
                        name: "",
                        type: "address"
                    }],
                    name: "proxies",
                    outputs: [{
                        name: "",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "view",
                    type: "function"
                }, {
                    constant: !1,
                    inputs: [{
                        name: "owner",
                        type: "address"
                    }],
                    name: "build",
                    outputs: [{
                        name: "proxy",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "function"
                }, {
                    inputs: [{
                        name: "factory_",
                        type: "address"
                    }],
                    payable: !1,
                    stateMutability: "nonpayable",
                    type: "constructor"
                }]
            },
            multicall: [{
                constant: !1,
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "target",
                        type: "address"
                    }, {
                        internalType: "bytes",
                        name: "callData",
                        type: "bytes"
                    }],
                    internalType: "struct Multicall.Call[]",
                    name: "calls",
                    type: "tuple[]"
                }],
                name: "aggregate",
                outputs: [{
                    internalType: "uint256",
                    name: "blockNumber",
                    type: "uint256"
                }, {
                    internalType: "bytes[]",
                    name: "returnData",
                    type: "bytes[]"
                }],
                payable: !1,
                stateMutability: "nonpayable",
                type: "function"
            }, {
                constant: !0,
                inputs: [{
                    internalType: "uint256",
                    name: "blockNumber",
                    type: "uint256"
                }],
                name: "getBlockHash",
                outputs: [{
                    internalType: "bytes32",
                    name: "blockHash",
                    type: "bytes32"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "getCurrentBlockCoinbase",
                outputs: [{
                    internalType: "address",
                    name: "coinbase",
                    type: "address"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "getCurrentBlockDifficulty",
                outputs: [{
                    internalType: "uint256",
                    name: "difficulty",
                    type: "uint256"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "getCurrentBlockGasLimit",
                outputs: [{
                    internalType: "uint256",
                    name: "gaslimit",
                    type: "uint256"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "getCurrentBlockTimestamp",
                outputs: [{
                    internalType: "uint256",
                    name: "timestamp",
                    type: "uint256"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [{
                    internalType: "address",
                    name: "addr",
                    type: "address"
                }],
                name: "getEthBalance",
                outputs: [{
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "getLastBlockHash",
                outputs: [{
                    internalType: "bytes32",
                    name: "blockHash",
                    type: "bytes32"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }],
            cageFree: [{
                inputs: [{
                    internalType: "address",
                    name: "_tap",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "_weth",
                    type: "address"
                }],
                payable: !1,
                stateMutability: "nonpayable",
                type: "constructor"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "address",
                    name: "sender",
                    type: "address"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount",
                    type: "uint256"
                }],
                name: "FreeCash",
                type: "event"
            }, {
                payable: !0,
                stateMutability: "payable",
                type: "fallback"
            }, {
                constant: !1,
                inputs: [{
                    internalType: "uint256",
                    name: "wad",
                    type: "uint256"
                }],
                name: "freeCash",
                outputs: [{
                    internalType: "uint256",
                    name: "cashoutBalance",
                    type: "uint256"
                }],
                payable: !1,
                stateMutability: "nonpayable",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "sai",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "tap",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }, {
                constant: !0,
                inputs: [],
                name: "weth",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                payable: !1,
                stateMutability: "view",
                type: "function"
            }]
        },
        mt = function (t) {
            function e(e) {
                return void 0 === e && (e = "proxy"), t.call(this, e, ["web3"]) || this
            }
            P(e, t);
            var n = e.prototype;
            return n.authenticate = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.next = 2, this.getProxyAddress();
                            case 2:
                                this._currentProxy = t.sent;
                            case 3:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.setSmartContractService = function (t) {
                this._smartContractService = t
            }, n._proxyRegistry = function () {
                return this._smartContractService.getContract("PROXY_REGISTRY")
            }, n._resetDefaults = function (t) {
                this._currentProxy = t, this._currentAddress = this.get("web3").currentAddress()
            }, n.currentProxy = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.abrupt("return", this._currentAddress === this.get("web3").currentAddress() ? this._currentProxy : this.getProxyAddress());
                            case 1:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.ensureProxy = function () {
                var t = M(G.mark((function t(e) {
                    var n, a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return n = e.promise, t.next = 3, this.currentProxy();
                            case 3:
                                if (!(a = t.sent)) {
                                    t.next = 6;
                                    break
                                }
                                return t.abrupt("return", a);
                            case 6:
                                return t.next = 8, this.build({
                                    promise: n
                                });
                            case 8:
                                return t.abrupt("return", this._currentProxy);
                            case 9:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.build = function () {
                var t = M(G.mark((function t(e) {
                    var n, a, r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return n = e.promise, t.next = 3, this.currentProxy();
                            case 3:
                                if (!(a = t.sent)) {
                                    t.next = 6;
                                    break
                                }
                                throw new Error("This account already has a proxy deployed at " + a);
                            case 6:
                                return t.next = 8, this._proxyRegistry().build({
                                    promise: n
                                });
                            case 8:
                                return this._currentProxy = (r = t.sent).receipt.logs[0].address, t.abrupt("return", r);
                            case 11:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.execute = function (t, e, n, a, r) {
                if (!r && "string" != typeof this._currentProxy) throw new Error("No proxy found for current account");
                var i = this.getUnwrappedProxyContract(r || this._currentProxy),
                    s = t.interface.encodeFunctionData(e, n);
                return i["execute(address,bytes)"](t.address, s, a)
            }, n.getProxyAddress = function () {
                var t = M(G.mark((function t(e) {
                    var n, a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === e && (e = !1), n = e || this.get("web3").currentAddress(), t.next = 4, this._proxyRegistry().proxies(n);
                            case 4:
                                return "0x0000000000000000000000000000000000000000" === (a = t.sent) && (a = null), e || this._resetDefaults(a), t.abrupt("return", a);
                            case 8:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.getOwner = function () {
                var t = M(G.mark((function t(e) {
                    var n;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return n = this._getWrappedProxyContract(e), t.abrupt("return", n.owner());
                            case 2:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.setOwner = function () {
                var t = M(G.mark((function t(e, n) {
                    var a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === n && (n = this._currentProxy), a = this._getWrappedProxyContract(n), t.abrupt("return", a.setOwner(e));
                            case 3:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), n._getWrappedProxyContract = function (t) {
                return this._smartContractService.getContractByAddressAndAbi(t, lt.dappHub.dsProxy)
            }, n.getUnwrappedProxyContract = function (t) {
                return new b.Contract(t, lt.dappHub.dsProxy, this.get("web3").getEthersSigner())
            }, e
        }(e.PrivateService);
    m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object]), m.__metadata("design:returntype", Promise)], mt.prototype, "ensureProxy", null), m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object]), m.__metadata("design:returntype", Promise)], mt.prototype, "build", null);
    var ft = {
            MKR: "MKR",
            WETH: "WETH",
            PETH: "PETH",
            ETH: "ETH"
        },
        bt = {
            SAI_PIP: "SAI_PIP",
            SAI_TUB: "SAI_TUB",
            MAKER_OTC: "MAKER_OTC",
            OASIS_PROXY: "OASIS_PROXY",
            SAI_PROXY: "SAI_PROXY",
            PROXY_REGISTRY: "PROXY_REGISTRY",
            DS_PROXY_FACTORY: "DS_PROXY_FACTORY",
            DS_PROXY: "DS_PROXY",
            MULTICALL: "MULTICALL",
            SAI_CAGEFREE: "SAI_CAGEFREE"
        },
        ht = {
            mainnet: {
                SAI_GEM: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                GOV_OLD: "0xC66eA802717bFb9833400264Dd12c2bCeAa34a6d",
                SAI_GOV: "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
                SAI_PIP: "0x729D19f657BD0614b4985Cf1D82531c67569197B",
                SAI_PEP: "0x99041F808D598B782D5a3e498681C2452A31da08",
                SAI_PIT: "0x69076e44a9c70a67d5b79d95795aba299083c275",
                SAI_ADM: "0x8E2a84D6adE1E7ffFEe039A35EF5F19F13057152",
                SAI: "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359",
                SAI_SIN: "0x79f6d0f646706e1261acf0b93dcb864f357d4680",
                SAI_SKR: "0xf53ad2c6851052a81b42133467480961b2321c09",
                SAI_DAD: "0x315cbb88168396d12e1a255f9cb935408fe80710",
                SAI_MOM: "0xf2c5369cffb8ea6284452b0326e326dbfdcb867c",
                SAI_VOX: "0x9b0f70df76165442ca6092939132bbaea77f2d7a",
                SAI_TUB: "0x448a5065aebb8e423f0896e6c5d525c040f59af3",
                SAI_TAP: "0xbda109309f9fafa6dd6a9cb9f1df4085b27ee8ef",
                SAI_TOP: "0x9b0ccf7c8994e19f39b2b4cf708e0a7df65fa8a3",
                MAKER_OTC: "0x794e6e91555438aFc3ccF1c5076A74F42133d08D",
                SAI_PROXY: "0x190c2cfc69e68a8e8d5e2b9e2b9cc3332caff77b",
                OASIS_PROXY: "0x793ebbe21607e4f04788f89c7a9b97320773ec59",
                PROXY_REGISTRY: "0x4678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe4",
                DS_PROXY_FACTORY: "0xa26e15c895efc0616177b7c1e7270a4c7d51c997",
                MULTICALL: "0x5e227ad1969ea493b43f840cff78d08a6fc17796"
            },
            kovan: {
                SAI_GEM: "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
                SAI_GOV: "0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD",
                SAI_PIP: "0xa5aa4e07f5255e14f02b385b1f04b35cc50bdb66",
                SAI_PEP: "0x02998f73fabb52282664094b0ff87741a1ce9030",
                SAI_PIT: "0xbd747742b0f1f9791d3e6b85f8797a0cf4fbf10b",
                SAI_ADM: "0x74d41Fd874234D9beA31fF6b090Ba1D0b9Dc8785",
                SAI: "0xC4375B7De8af5a38a93548eb8453a498222C4fF2",
                SAI_SIN: "0xdcdca4371befceafa069ca1e2afd8b925b69e57b",
                SAI_SKR: "0xf4d791139cE033Ad35DB2B2201435fAd668B1b64",
                SAI_DAD: "0x6a884c7af48e29a20be9ff04bdde112b5596fcee",
                SAI_MOM: "0x72ee9496b0867dfe5e8b280254da55e51e34d27b",
                SAI_VOX: "0xbb4339c0ab5b1d9f14bd6e3426444a1e9d86a1d9",
                SAI_TUB: "0xa71937147b55Deb8a530C7229C442Fd3F31b7db2",
                SAI_TAP: "0xc936749d2d0139174ee0271bd28325074fdbc654",
                SAI_TOP: "0x5f00393547561da3030ebf30e52f5dc0d5d3362c",
                MAKER_OTC: "0xe325acB9765b02b8b418199bf9650972299235F4",
                SAI_PROXY: "0xadb7c74bce932fc6c27dda3ac2344707d2fbb0e6",
                OASIS_PROXY: "0xee419971e63734fed782cfe49110b1544ae8a773",
                PROXY_REGISTRY: "0x64a436ae831c1672ae81f674cab8b6775df3475c",
                DS_PROXY_FACTORY: "0xe11e3b391f7e8bc47247866af32af67dd58dc800",
                MULTICALL: "0xc6d81a2e375eee15a20e6464b51c5fc6bb949fda"
            },
            goerli: {
                PROXY_REGISTRY: "0x46759093D8158db8BB555aC7C6F98070c56169ce",
                MULTICALL: "0xb8c864B60e9467398800Df34da39BF4f0c459461"
            },
            sherpax: {
                "DEPLOYER": "0x6725b0e53ED3B3b9E8540F819e688B7303DB44cc",
                "CHANGELOG": "0xf3687deBecc20aEe70d525fAB07076a380CdDdcB",
                "MULTICALL": "0xe440AC03760696B8bCF0b64C607Bd92c71883E83",
                "FAUCET": "0x4B8Df1F6dD58061C1f800Ab5D5BD638988521f41",
                "MCD_DEPLOY": "0x272D0F3bd0e6D7020eD7a17a7B3ea0B53971B6c5",
                "FLIP_FAB": "0xa19cb026bd574f5d446ff4b27b175aaf79a2813d",
                "CLIP_FAB": "0x6ca9b3bae9808efbbe75b320293fa310e090125c",
                "CALC_FAB": "0x128143ec54af7adf57b51de319611b46b7832b05",
                "MCD_GOV": "0xd6BD3D4B148585Ac383a0971D3e5DcE838a82802",
                "GOV_GUARD": "0x2C1729d717BC2A977E6307065bb6113ED72Ba557",
                "MCD_IOU": "0xa9fE7b7F594A863767Da9573ca4aBb81E1E22501",
                "MCD_ADM": "0x058B3F62b9d2590F65D65e440802f6ab97C05cdb",
                "VOTE_PROXY_FACTORY": "0x3E6F5024913cD4F0Ff305a00Ce9B308B420EAc07",
                "VOTE_DELEGATE_PROXY_FACTORY": "0x49Fd972A4cdA1015958485080A59682C416ab2cb",
                "MCD_VAT": "0xf32e6C648Db7d4e9898f6B9F742BdeeDF5F7552B",
                "MCD_JUG": "0x00E0164c6560562D95E3AABe8268c9Ad5893eB39",
                "MCD_CAT": "0x4E0808f6313c7616f7defb964D906babFeC26300",
                "MCD_DOG": "0x7d60A84a4586e983b49F539d54e9E46C00481178",
                "MCD_VOW": "0xf565D8Fe0d9417E3f1A05C7859DDAe419582Ea08",
                "MCD_JOIN_DAI": "0x9f2D52E8723a13d9a8f4D668Dd43f76d3352b876",
                "MCD_FLAP": "0x91ebf138688d1203aFB78E94286759389606c1AA",
                "MCD_FLOP": "0x661e6063Ce07BEEE3722F023347Db535827b63d5",
                "MCD_PAUSE": "0x25B5B82ECF33C84Fd38c124614Bb736710e9a2dc",
                "MCD_PAUSE_PROXY": "0x30264A79f0Eaf2491FAcf93a15f14158509212e5",
                "MCD_GOV_ACTIONS": "0x19326996c5a545f5AEd9e8CC75f6A7E26698A18b",
                "MCD_DAI": "0xb779DB09645Fc7637337309158D992d6819bfC36",
                "MCD_SPOT": "0x52aA17c7f366Dbf1BCb74B7886D82C7bc5306D3c",
                "MCD_POT": "0x2e7bf381315a47852A180A3e9CB9307536623706",
                "MCD_END": "0x5d0FDdB16d4f2838Ed1A73F33B2DACE62E3d5d8f",
                "MCD_ESM": "0x0ca04FD1016e5EdA08A364f3B9e77ba093dAe82b",
                "PROXY_ACTIONS": "0xBf17A07Bb187d7e876D5b886aB32018D9c011674",
                "PROXY_ACTIONS_END": "0x616b82239486016e8a015f50482b793bF4779BAB",
                "PROXY_ACTIONS_DSR": "0x5ed2e8A828f6DE0e42111eBf8E3c485196d1ff7c",
                "CDP_MANAGER": "0xb4481AC81Da3c5e5FF32242eE8Ce8aC835E95B7a",
                "DSR_MANAGER": "0x226fb880fD912de9488264981e51D183EAa93Ee6",
                "GET_CDPS": "0x87E316A7dE6514b9D98f12Fe3553a220d35E2BfF",
                "ILK_REGISTRY": "0x35ede2e003ca7B6da3187aDE459d7a9b6948e4AF",
                "OSM_MOM": "0x36f456A70f4970916C14584aF59582d353543433",
                "FLIPPER_MOM": "0xc9d1C7c29ec9Cf935784826d733ae1Fe5f535EA7",
                "CLIPPER_MOM": "0x099677d0F078787620228435B058944DC8D72643",
                "MCD_IAM_AUTO_LINE": "0xDa80bA3F60C05a3B0e4DEFfAE567D9366bb603d3",
                "MCD_FLASH": "0x58F6FE7b44b49a487767ABb303c85Bb47ea3bd67",
                "MCD_VEST_DAI": "0xB5C1e869168bEd89BFce3b48f49D95c2693862b0",
                "MCD_VEST_MKR": "0x820eccb8746223C2b2eFb799B1E4c3fC6e8bEFc1",
                "MCD_VEST_MKR_TREASURY": "0x74255258baD84dd8d958B0300d9437B0ca9a995D",
                "PROXY_FACTORY": "0x66CAb75aFce3DD3d94aaFa08A03cdd7B57C05cd3",
                "PROXY_REGISTRY": "0x9dE275d0105EEa5e967083db98F0E9CE7acC5409",
                "WBTC": "0xa0fDF025240860cd22e7AfCdAe461BcaF5B177EB",
                "VAL_WBTC": "0xd18DE97C3AC3746e1933BdCF6363D2603838aD55",
                "PIP_WBTC": "0xd18DE97C3AC3746e1933BdCF6363D2603838aD55",
                "MCD_JOIN_WBTC_A": "0x9431776CF30a1cd2BEbcbAa6B93387858373fF9B",
                "MCD_CLIP_WBTC_A": "0x7236E676490F63b675Fb3b101e8f58FF3881b593",
                "MCD_CLIP_CALC_WBTC_A": "0x7F4C6fA40b8C7C63f6220bFD89BaaDbe410ff0E5",
                "MCD_JOIN_WBTC_B": "0x7E3854F2ef10dd83bdA3FB816766c0bB3Dcfd47b",
                "MCD_CLIP_WBTC_B": "0x71287D51B7cFAd36E9095198530fF194f583cbDA",
                "MCD_CLIP_CALC_WBTC_B": "0x485A80CB7bc7c50B87A396395b71c8673c889Aee",
                "PROXY_PAUSE_ACTIONS": "0x1e77e341df12E33afc95FF784b88db519c25e9c2",
                "PROXY_DEPLOYER": "0xA7Aa5F399839C2861354832389E9F0cff59382cA"
            },
            testnet: {
                ETH_FROM: "0x16fb96a5fa0427af0c8f7cf1eb4870231c8154b6",
                SAI: "0xC226F3CD13d508bc319F4f4290172748199d6612",
                MAKER_OTC: "0x06ef37A95603cb52e2dFF4C2b177C84Cdb3cE989",
                PROXY_REGISTRY: "0x72b59ACcB5a9a9e47296fbeF741bF2Bc82FFDE62",
                DS_PROXY: "0x0x570074CCb147ea3dE2E23fB038D4d78324278886",
                SAI_PROXY: "0x2348a875b1631307577be0935F289e0Fb9316169",
                OASIS_PROXY: "0xc72B03c37735Cf122c27dc352E5F25f75bEEA389",
                REDEEMER: "0x2DaF1c09275B0b72277909377Eb20CCf10eFA02E",
                OLD_MKR: "0xa3bFc24194007416fa73fC6E3A7D3B245f647d6E",
                OLD_CHIEF: "0x1d24598fa8B77811E68243A2746CC553E68ca03B",
                OLD_IOU: "0xf686915ceb592ac6089da1cffc21e141337d92be",
                POLLING: "0x9A2810a12197CB844af4BA74a4b81bC1CA727130",
                BATCH_POLLING: "0xa9D33Ce18803b0742460ffb1b33B6c40f95178BC",
                OLD_VOTE_PROXY_FACTORY: "0x26ea0dd33Aa37e15D95a9Ae166092a139Ad62013",
                LINE_SPELL: "0xb0ae8c0856259C6fe000F8e2C14507E5FC167D48",
                SAI_CAGEFREE: "0xa7F1b1B3f05F8d5fcEB8daCC893570b9e5d82bFf",
                MULTICALL: "0x5AE5677589cf9992290918CcD1828dcBD73D842c",
                SAI_GEM: "0x7ba25f791fa76c3ef40ac98ed42634a8bc24c238",
                SAI_GOV: "0x1c3ac7216250edc5b9daa5598da0579688b9dbd5",
                SAI_PIP: "0xb7092ee7a8c4c85431962662310bbdcd4fd519e9",
                SAI_PEP: "0xc0ee05307ae4a5316f34874a3525d10c94b3c217",
                SAI_PIT: "0x0000000000000000000000000000000000000123",
                SAI_ADM: "0x4986C24C7f752C2ac2D738F1270639Dd9E9D7BF5",
                SAI_SIN: "0xE9E2B40d676Fc998EdE8c676D9f529CCbbc13740",
                SAI_SKR: "0xA6164A2e88e258A663772ED4912a0865af8f6d06",
                SAI_DAD: "0x7b61731911E46Da837E3dcD2d8797DE684c8cEd1",
                SAI_MOM: "0x603D52D6AE2b98A49f8f32817ad4EfFe7E8A2502",
                SAI_VOX: "0xE16bf7AaFeB33cC921d6D311E0ff33C4faA836dD",
                SAI_TUB: "0xE82CE3D6Bf40F2F9414C8d01A35E3d9eb16a1761",
                SAI_TAP: "0x6896659267C3C9FD055d764327199A98E571e00D",
                SAI_TOP: "0x2774031B3898fbe414F929b3223cE1039325e7Dc"
            }
        };

    function vt(t) {
        var e;
        return (e = {})[ft.SAI] = [{
            version: 1,
            address: t.SAI,
            abi: lt.general.erc20,
            decimals: 18
        }], e[ft.WETH] = [{
            version: 1,
            address: t.SAI_GEM,
            abi: lt.dappHub.dsEthToken,
            decimals: 18
        }], e[ft.PETH] = [{
            version: 1,
            address: t.SAI_SKR,
            abi: lt.general.erc20,
            decimals: 18
        }], e[ft.MKR] = [{
            version: 1,
            address: t.GOV_OLD || "0x0000000000000000000000000000000000000001",
            abi: lt.general.erc20,
            decimals: 18
        }, {
            version: 2,
            address: t.SAI_GOV,
            abi: lt.general.erc20,
            decimals: 18
        }], e[bt.SAI_PIP] = [{
            version: 1,
            address: t.SAI_PIP,
            abi: lt.dappHub.dsValue
        }], e[bt.SAI_TUB] = [{
            version: 1,
            address: t.SAI_TUB,
            abi: lt.daiV1.tub
        }], e[bt.MAKER_OTC] = [{
            version: 1,
            address: t.MAKER_OTC,
            abi: lt.exchangesV1.makerOtc
        }], e[bt.MULTICALL] = [{
            version: 1,
            address: t.MULTICALL,
            abi: lt.multicall
        }], e[bt.SAI_CAGEFREE] = [{
            version: 1,
            address: t.SAI_CAGEFREE,
            abi: lt.cageFree
        }], e[bt.SAI_PROXY] = [{
            version: 1,
            address: t.SAI_PROXY,
            abi: lt.proxies.saiProxy
        }], e[bt.OASIS_PROXY] = [{
            version: 1,
            address: t.OASIS_PROXY,
            abi: lt.proxies.oasisProxy
        }], e[bt.DS_PROXY_FACTORY] = [{
            version: 1,
            address: t.DS_PROXY_FACTORY,
            abi: lt.proxies.dsProxyFactory
        }], e[bt.DS_PROXY] = [{
            version: 1,
            abi: lt.dappHub.dsProxy
        }], e[bt.PROXY_REGISTRY] = [{
            version: 1,
            address: t.PROXY_REGISTRY,
            abi: lt.proxies.proxyRegistry
        }], e
    }

    function _t(t) {
        return vt(ht[t])
    }
    var wt = [{
            name: "mainnet",
            networkId: 1,
            contracts: _t("mainnet")
        }, {
            name: "morden",
            networkId: 2
        }, {
            name: "ropsten",
            networkId: 3
        }, {
            name: "rinkeby",
            networkId: 4
        }, {
            name: "goerli",
            networkId: 5,
            contracts: _t("goerli")
        }, {
            name: "sherpax",
            networkId: 1506,
            contracts: _t("sherpax")
        }, {
            name: "kovan",
            networkId: 42,
            contracts: _t("kovan")
        }, {
            name: "test",
            networkId: 1337,
            contracts: _t("testnet")
        }, {
            name: "test",
            networkId: 999,
            contracts: _t("testnet")
        }],
        gt = f.values(ft).reduce((function (t, e) {
            return t[e] = h.createCurrency(e), t
        }), {
            USD: h.createCurrency("USD")
        }),
        xt = h.createGetCurrency(gt),
        At = gt.ETH,
        Tt = gt.MKR,
        kt = gt.PETH,
        St = gt.WETH,
        Mt = gt.USD,
        Et = h.createCurrencyRatio(Mt, At),
        Ct = h.createCurrencyRatio(Mt, Tt),
        Ot = h.createCurrencyRatio(Mt, kt),
        Pt = h.createCurrencyRatio(Mt, St);
    Object.assign(gt, {
        USD_ETH: Et,
        USD_MKR: Ct,
        USD_PETH: Ot,
        USD_WETH: Pt
    });
    var It = ["unit"],
        Rt = function () {
            function t(t, e, n, a, r) {
                void 0 === n && (n = 18), this._contract = t, this._web3 = e, this._decimals = n, this.symbol = a, this._currency = r || gt[a]
            }
            var e = t.prototype;
            return e.allowance = function () {
                var t = M(G.mark((function t(e, n) {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.t0 = this, t.next = 3, this._contract.allowance(e, n);
                            case 3:
                                return t.t1 = t.sent, t.abrupt("return", t.t0._valueFromContract.call(t.t0, t.t1));
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), e.balance = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.abrupt("return", this.balanceOf(this._web3.currentAddress()));
                            case 1:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), e.balanceOf = function () {
                var t = M(G.mark((function t(e) {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.t0 = this, t.next = 3, this._contract.balanceOf(e);
                            case 3:
                                return t.t1 = t.sent, t.abrupt("return", t.t0._valueFromContract.call(t.t0, t.t1));
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), e.totalSupply = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.t0 = this, t.next = 3, this._contract.totalSupply();
                            case 3:
                                return t.t1 = t.sent, t.abrupt("return", t.t0._valueFromContract.call(t.t0, t.t1));
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), e.address = function () {
                return this._contract.address
            }, e._valueForContract = function (t, e) {
                return void 0 === e && (e = this._currency), this._getCurrency(t, e).toFixed(this._decimals)
            }, e._valueFromContract = function (t) {
                return this._currency(t.toString(), -1 * this._decimals)
            }, e.approve = function (t, e, n) {
                var a = void 0 === n ? {} : n,
                    r = a.unit,
                    i = void 0 === r ? this._currency : r,
                    s = j(a, It);
                return this._contract.approve(t, this._valueForContract(e, i), O({
                    metadata: {
                        action: {
                            name: "approve",
                            spender: t,
                            allowance: this._getCurrency(e, i),
                            allowing: "0" != e
                        }
                    }
                }, s))
            }, e.approveUnlimited = function (t, e) {
                return void 0 === e && (e = {}), t || (t = this._web3.currentAddress()), this._contract.approve(t, b.ethers.BigNumber.from(et), O({
                    metadata: {
                        action: {
                            name: "approve",
                            spender: t,
                            allowance: Number.MAX_SAFE_INTEGER,
                            allowing: !0,
                            unlimited: !0
                        }
                    }
                }, e))
            }, e.transfer = function (t, e, n) {
                var a = void 0 === n ? {} : n,
                    r = a.unit,
                    i = void 0 === r ? this._currency : r,
                    s = a.promise,
                    o = void 0 === s ? void 0 : s;
                return this._contract.transfer(t, this._valueForContract(e, i), {
                    metadata: {
                        action: {
                            name: "transfer",
                            from: this._web3.currentAddress(),
                            to: t,
                            amount: this._getCurrency(e, i)
                        }
                    },
                    promise: o
                })
            }, e.transferFrom = function (t, e, n, a) {
                var r = void 0 === a ? {} : a,
                    i = r.unit,
                    s = void 0 === i ? this._currency : i,
                    o = r.promise,
                    u = void 0 === o ? void 0 : o;
                return this._contract.transferFrom(t, e, this._valueForContract(n, s), {
                    metadata: {
                        action: {
                            name: "transfer",
                            from: t,
                            to: e,
                            amount: xt(n, s)
                        }
                    },
                    promise: u
                })
            }, e._getCurrency = function (t, e) {
                return e == this._currency ? this._currency(t) : xt(t, e)
            }, t
        }(),
        Bt = function () {
            function t(t, e, n) {
                this._web3 = t, this._gasService = e, this._transactionManager = n
            }
            var e = t.prototype;
            return e.allowance = function (t, e) {
                return Promise.resolve(Number.MAX_SAFE_INTEGER)
            }, e.balance = function () {
                return this.balanceOf(this._web3.currentAddress())
            }, e.balanceOf = function () {
                var t = M(G.mark((function t(e) {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.t0 = At, t.next = 3, this._web3.getBalance(e);
                            case 3:
                                return t.t1 = t.sent, t.abrupt("return", t.t0.wei.call(t.t0, t.t1));
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), e.approve = function (t, e) {
                return Promise.resolve(!0)
            }, e.approveUnlimited = function (t) {
                return Promise.resolve(!0)
            }, e.transfer = function () {
                var t = M(G.mark((function t(e, n, a) {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.abrupt("return", this.transferFrom(this._web3.currentAddress(), e, n, a));
                            case 1:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a) {
                    return t.apply(this, arguments)
                }
            }(), e.transferFrom = function () {
                var t = M(G.mark((function t(e, n, a, r) {
                    var i, s, o, u;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return o = r.promise, u = b.ethers.BigNumber.from(xt(a, s = void 0 === (i = r.unit) ? At : i).toFixed("wei"))._hex, t.abrupt("return", this._transactionManager.sendTransaction({
                                    from: e,
                                    to: n,
                                    value: u
                                }, {
                                    metadata: {
                                        action: {
                                            name: "transfer",
                                            from: e,
                                            to: n,
                                            amount: xt(a, s)
                                        }
                                    },
                                    promise: o
                                }));
                            case 3:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a, r) {
                    return t.apply(this, arguments)
                }
            }(), t
        }();
    m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object, Object, Object]), m.__metadata("design:returntype", Promise)], Bt.prototype, "transfer", null), m.__decorate([ot, m.__metadata("design:type", Function), m.__metadata("design:paramtypes", [Object, Object, Object, Object]), m.__metadata("design:returntype", Promise)], Bt.prototype, "transferFrom", null);
    var Lt = ["unit"],
        Ft = ["unit"],
        jt = function (t) {
            function e(e, n, a) {
                return t.call(this, e, n, a, "WETH") || this
            }
            P(e, t);
            var n = e.prototype;
            return n.name = function () {
                return this._contract.name()
            }, n.deposit = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.unit,
                    r = void 0 === a ? At : a,
                    i = j(n, Lt);
                return this._contract.deposit(O({
                    value: this._valueForContract(t, r)
                }, i))
            }, n.withdraw = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.unit,
                    r = void 0 === a ? St : a,
                    i = j(n, Ft),
                    s = this._valueForContract(t, r);
                return this._contract.withdraw(s, i)
            }, e
        }(Rt),
        Dt = function (t) {
            function e(e, n, a) {
                var r;
                return (r = t.call(this, e, n, 18, "PETH") || this)._tub = a, r
            }
            P(e, t);
            var n = e.prototype;
            return n.join = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.unit,
                    r = n.promise,
                    i = void 0 === r ? void 0 : r,
                    s = this._valueForContract(t, void 0 === a ? St : a);
                return this._tub.join(s, {
                    promise: i
                })
            }, n.exit = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.unit,
                    r = n.promise,
                    i = void 0 === r ? void 0 : r,
                    s = this._valueForContract(t, void 0 === a ? kt : a);
                return this._tub.exit(s, {
                    promise: i
                })
            }, n.wrapperRatio = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.t0 = St, t.next = 3, this._tub.per();
                            case 3:
                                return t.t1 = t.sent._hex, t.abrupt("return", t.t0.ray.call(t.t0, t.t1));
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.joinPrice = function () {
                var t = M(G.mark((function t(e, n) {
                    var a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === n && (n = St), a = this._valueForContract(e, n), t.t0 = St, t.next = 5, this._tub.ask(a);
                            case 5:
                                return t.t1 = t.sent._hex, t.abrupt("return", t.t0.wei.call(t.t0, t.t1));
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), n.exitPrice = function () {
                var t = M(G.mark((function t(e, n) {
                    var a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === n && (n = St), a = this._valueForContract(e, n), t.t0 = St, t.next = 5, this._tub.bid(a);
                            case 5:
                                return t.t1 = t.sent._hex, t.abrupt("return", t.t0.wei.call(t.t0, t.t1));
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), e
        }(Rt),
        Nt = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "token"), (n = t.call(this, e, ["smartContract", "web3", "gas", "transactionManager"]) || this)._tokens = ft, n._addedTokens = {}, n
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                if (void 0 === t && (t = {}), t.erc20)
                    for (var e, n = U(t.erc20); !(e = n()).done;) {
                        var a = e.value,
                            r = a.symbol || a.currency.symbol;
                        this._tokens[r] = r, this._addedTokens[r] = [a]
                    }
                this._addressOverrides = t.addressOverrides || {}
            }, n.getTokens = function () {
                return Object.keys(this._tokens)
            }, n.getToken = function (t, e) {
                if (t.symbol && (t = t.symbol), k(t, "Symbol is blank"), k(this.getTokens().indexOf(t) >= 0, 'Symbol "' + t + '" is not recognized'), t === ft.ETH) return new Bt(this.get("web3"), this.get("gas"), this.get("transactionManager"));
                var n = this._getTokenInfo(t, e),
                    a = n.address,
                    r = n.decimals,
                    i = n.abi,
                    s = n.currency,
                    o = this.get("smartContract"),
                    u = o.getContractByAddressAndAbi(a, i || dt);
                if (t === ft.WETH) return new jt(u, this.get("web3"), r);
                if (t === ft.PETH) {
                    if (18 !== r) throw new Error("PethToken code hardcodes 18 decimal places.");
                    var c = o.getContract(bt.SAI_TUB);
                    return new Dt(u, this.get("web3"), c)
                }
                return new Rt(u, this.get("web3"), r || 18, t, s)
            }, n._getTokenInfo = function (t, e) {
                var n = this.get("web3"),
                    a = n.networkName,
                    r = this._addedTokens[t] || this._getNetworkMapping(n.network)[t];
                k(r, 'Cannot find token info for "' + t + '"');
                var i = e ? r[e - 1] : r[r.length - 1];
                return this._addressOverrides[t] && (i.address = this._addressOverrides[t]), "string" == typeof i.address ? i : O({}, i, {
                    address: i.address["test" === a ? "testnet" : a]
                })
            }, n._getNetworkMapping = function (t) {
                var e = wt.filter((function (e) {
                    return e.networkId === t
                }));
                if (e.length < 1) throw new Error("networkId not found");
                return e[0].contracts
            }, n._selectTokenVersions = function (t) {
                var e = [];
                for (var n in ft) "ETH" === n && (e.ETH = [1]), n in t && function () {
                    var a = [];
                    t[n].forEach((function (t) {
                        a.push(t.version)
                    })), e[n] = a
                }();
                return e
            }, e
        }(e.PrivateService);

    function Ut(t) {
        return function () {
            for (var e = this, n = arguments.length, a = new Array(n), r = 0; r < n; r++) a[r] = arguments[r];
            return new Promise((function (n, r) {
                t.apply(e, a.concat((function (t, e) {
                    return t ? r(t) : n(e)
                })))
            }))
        }
    }

    function Wt(t) {
        return new Promise((function (e) {
            return setTimeout(e, t)
        }))
    }
    var Gt = function () {
        var t = 0,
            e = new WeakMap;
        return function (n) {
            return e.has(n) || e.set(n, ++t), e.get(n)
        }
    }();

    function Ht(t) {
        return function () {
            return Promise.all(Object.entries(t).map((function (t) {
                var e = t[0];
                return (0, t[1])().then((function (t) {
                    return [e, t]
                }))
            }))).then((function (t) {
                for (var e, n = {}, a = U(t); !(e = a()).done;) {
                    var r = e.value;
                    n[r[0]] = r[1]
                }
                return n
            }))
        }
    }

    function Yt(t) {
        var e = t.type,
            n = t.getState,
            a = t.emit,
            r = t.curr,
            i = void 0 === r ? {} : r,
            s = t.live,
            o = void 0 !== s && s;
        return {
            ping: function () {
                return M(G.mark((function t() {
                    var r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (o) {
                                    t.next = 2;
                                    break
                                }
                                return t.abrupt("return");
                            case 2:
                                return t.prev = 2, t.next = 5, n();
                            case 5:
                                f.isEqual(i, r = t.sent) || (a(e, r), i = r), t.next = 13;
                                break;
                            case 9:
                                t.prev = 9, t.t0 = t.catch(2), a("error", "Failed to get latest " + e + " state. Message -> " + t.t0);
                            case 13:
                            case "end":
                                return t.stop()
                        }
                    }), t, null, [
                        [2, 9]
                    ])
                })))()
            },
            heat: function () {
                return M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (!o) {
                                    t.next = 2;
                                    break
                                }
                                return t.abrupt("return");
                            case 2:
                                return t.prev = 2, t.next = 5, n();
                            case 5:
                                i = t.sent, o = !0, t.next = 13;
                                break;
                            case 9:
                                t.prev = 9, t.t0 = t.catch(2), a("error", "Failed to get initial " + e + " state. Message -> " + t.t0);
                            case 13:
                            case "end":
                                return t.stop()
                        }
                    }), t, null, [
                        [2, 9]
                    ])
                })))()
            },
            cool: function () {
                o && (o = !1)
            },
            type: function () {
                return e
            },
            live: function () {
                return o
            }
        }
    }
    var zt = v.EventEmitter2,
        Kt = function () {
            function t(t) {
                this._emitter = new zt({
                    wildcard: !0,
                    delimiter: "/"
                }), this._polls = [], this._block = null, this._sequenceNum = 1, this._disposeSelf = t, this.emit = this.emit.bind(this)
            }
            var e = t.prototype;
            return e.emit = function (t, e, n) {
                if (void 0 === e && (e = {}), void 0 === n && (n = this._getBlock()), 0 !== this._emitter.listeners(t).length) {
                    var a = {
                        payload: e,
                        block: n,
                        type: t,
                        sequence: this._sequenceNum
                    };
                    this._sequenceNum++, this._emitter.emit(t, a)
                }
            }, e.on = function (t, e) {
                var n = this;
                this._emitter.on(t, e), this._polls.forEach((function (t) {
                    return n._emitter.listeners(t.type()).length > 0 && t.heat()
                }))
            }, e.removeListener = function (t, e) {
                var n = this;
                this._emitter.removeListener(t, e), this._polls.forEach((function (t) {
                    return 0 === n._emitter.listeners(t.type()).length && t.cool()
                }))
            }, e.registerPollEvents = function (t) {
                for (var e = 0, n = Object.entries(t); e < n.length; e++) {
                    var a = n[e],
                        r = a[0],
                        i = Ht(a[1]),
                        s = Yt({
                            type: r,
                            emit: this.emit,
                            getState: i
                        });
                    this._polls.push(s)
                }
                return this
            }, e.ping = function (t) {
                this._setBlock(t), this._polls.forEach((function (t) {
                    return t.ping()
                }))
            }, e.dispose = function () {
                this.emit = function () {}, this.on = function () {}, this._disposeSelf()
            }, e._setBlock = function (t) {
                void 0 !== t && (this._block = t)
            }, e._getBlock = function () {
                return this._block
            }, e._startPolls = function () {
                this._polls.forEach((function (t) {
                    return t.heat()
                }))
            }, e._stopPolls = function () {
                this._polls.forEach((function (t) {
                    return t.cool()
                }))
            }, t
        }(),
        Xt = l("dai:EventService"),
        qt = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "event"), (n = t.call(this, e, []) || this)._block = null, n.emitters = {}, n.buildEmitter({
                    defaultEmitter: !0
                }), n.ping = n.ping.bind(D(n)), n
            }
            P(e, t);
            var n = e.prototype;
            return n.ping = function (t) {
                Object.values(this.emitters).forEach((function (e) {
                    return e.ping(t)
                }))
            }, n.on = function (t, e, n) {
                void 0 === n && (n = this._defaultEmitter()), n.on(t, e)
            }, n.emit = function (t, e, n, a) {
                void 0 === a && (a = this._defaultEmitter()), a.emit(t, e, n)
            }, n.removeListener = function (t, e, n) {
                void 0 === n && (n = this._defaultEmitter()), n.removeListener(t, e)
            }, n.registerPollEvents = function (t, e) {
                return void 0 === e && (e = this._defaultEmitter()), e.registerPollEvents(t)
            }, n.buildEmitter = function (t) {
                var e = this,
                    n = (void 0 === t ? {} : t).defaultEmitter,
                    a = void 0 !== n && n ? "default" : "-" + Math.random().toString(36).substring(2, 7) + Math.random().toString(36).substring(2, 7),
                    r = this._disposeEmitter.bind(this, a),
                    i = new Kt(r);
                return i.on("error", (function (t) {
                    return e._logError(a, t.payload)
                })), this.emitters[a] = i, i
            }, n._disposeEmitter = function (t) {
                "default" === t ? this._logError(t, "cannot dispose default emitter") : delete this.emitters[t]
            }, n._defaultEmitter = function () {
                return this.emitters.default
            }, n._logError = function (t, e) {
                Xt("Problem encountered in emitter " + t + " -> " + e)
            }, e
        }(e.PrivateService),
        Vt = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "gas"), (n = t.call(this, e, ["web3"]) || this)._fallback = 4e6, n._multiplier = 1.55, n._transactionSpeed = "fast", n
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                t && (this._parseConfig(t.limit, "limit"), this._parseConfig(t.price, "price")), this._settings = t || {}, this._gasStationDataPromise = this.disablePrice ? Promise.resolve({}) : this.fetchGasStationData()
            }, n._parseConfig = function (t, e) {
                return void 0 === t && (t = "default"), "default" === t || "object" == typeof t ? this._setProperties(t, e) : this[e] = t
            }, n._setProperties = function (t, e) {
                var n = this;
                if ("default" !== t) return f.map(t, (function (t, a) {
                    "disable" === a ? n["disable" + e.charAt(0).toUpperCase() + e.slice(1)] = t : n[a] = t
                }))
            }, n.fetchGasStationData = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.prev = 0, t.next = 3, _("https://ethgasstation.info/json/ethgasAPI.json?api-key=" + this._settings.apiKey);
                            case 3:
                                return t.abrupt("return", t.sent.json());
                            case 7:
                                t.prev = 7, t.t0 = t.catch(0), console.error("Error fetching gas data; disabling preset gas price", t.t0), this.disablePrice = !0;
                            case 11:
                            case "end":
                                return t.stop()
                        }
                    }), t, this, [
                        [0, 7]
                    ])
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.getGasPrice = function () {
                var t = M(G.mark((function t(e) {
                    var n, a, r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (!this.price) {
                                    t.next = 2;
                                    break
                                }
                                return t.abrupt("return", this.price);
                            case 2:
                                return n = e || this.transactionSpeed, t.next = 5, this._gasStationDataPromise;
                            case 5:
                                return a = t.sent, r = this.get("web3")._web3.utils.toWei((a[n] / 10).toString(), "gwei"), t.abrupt("return", r);
                            case 8:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.getWaitTime = function () {
                var t = M(G.mark((function t(e) {
                    var n;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return n = e || this.transactionSpeed, t.next = 3, this._gasStationDataPromise;
                            case 3:
                                return t.abrupt("return", t.sent[n + "Wait"]);
                            case 5:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.estimateGasLimit = function () {
                var t = M(G.mark((function t(e) {
                    var n, a, r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (!this.limit) {
                                    t.next = 2;
                                    break
                                }
                                return t.abrupt("return", this.limit);
                            case 2:
                                if (!this.disableLimit) {
                                    t.next = 4;
                                    break
                                }
                                return t.abrupt("return", this.fallback);
                            case 4:
                                return n = [], t.prev = 5, t.next = 8, Promise.all([this.get("web3").getBlock("latest"), this.get("web3").estimateGas(e)]);
                            case 8:
                                n = t.sent, t.next = 14;
                                break;
                            case 11:
                                return t.prev = 11, t.t0 = t.catch(5), t.abrupt("return", this.fallback);
                            case 14:
                                if (a = n[0].gasLimit, r = n[1], this.multiplier || this.absolute) {
                                    t.next = 20;
                                    break
                                }
                                return t.abrupt("return", Math.min(this.absolute, a));
                            case 20:
                                if (this.absolute) {
                                    t.next = 24;
                                    break
                                }
                                return t.abrupt("return", Math.min(parseInt(r * this.multiplier), a));
                            case 24:
                                return t.abrupt("return", Math.min(parseInt(r * this.multiplier), this.absolute, a));
                            case 25:
                            case "end":
                                return t.stop()
                        }
                    }), t, this, [
                        [5, 11]
                    ])
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n.removeMultiplier = function () {
                this._multiplier = null
            }, n.removeAbsolute = function () {
                this._absolute = null
            }, n.removeFallback = function () {
                this._fallback = null
            }, C(e, [{
                key: "multiplier",
                get: function () {
                    return this._multiplier
                },
                set: function (t) {
                    if (t <= 0) throw new Error("Gas limit multiplier must be greater than 0");
                    this._multiplier = t
                }
            }, {
                key: "absolute",
                get: function () {
                    return this._absolute
                },
                set: function (t) {
                    if (t <= 0) throw new Error("Absolute gas limit must be greater than 0");
                    this._absolute = t
                }
            }, {
                key: "fallback",
                get: function () {
                    return this._fallback
                },
                set: function (t) {
                    if (t <= 0) throw new Error("Fallback gas limit must be greater than 0");
                    this._fallback = t
                }
            }, {
                key: "transactionSpeed",
                get: function () {
                    return this._transactionSpeed
                },
                set: function (t) {
                    var e = ["average", "fast", "fastest", "safeLow"];
                    if (!e.includes(t)) throw new Error("Invalid transaction speed -- options are " + e);
                    this._transactionSpeed = t
                }
            }]), e
        }(e.PublicService),
        Jt = ["useWeb3Provider", "interval", "rpcUrl"],
        Qt = l("dai:MulticallService"),
        $t = l("dai:MulticallService:observables"),
        Zt = function (t) {
            return t.map((function (t) {
                if (t instanceof Error) throw t
            }))
        },
        te = function (t) {
            return void 0 === f.find(t, (function (t) {
                return t instanceof Error
            }))
        },
        ee = function (t) {
            return function (e) {
                return x.catchError((function (e) {
                    return $t("Caught nested error in " + t + ": " + e), g.from([new Error(e)])
                }))(e)
            }
        },
        ne = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "multicall"), (n = t.call(this, e, ["web3", "smartContract"]) || this)._schemas = [], n._schemaByObservableKey = {}, n._schemaInstances = {}, n._subjects = {}, n._observables = {}, n._watcherUpdates = null, n._schemaSubscribers = {}, n._totalSchemaSubscribers = 0, n._totalActiveSchemas = 0, n._multicallResultCache = {}, n._addresses = {}, n._removeSchemaTimers = {}, n._schemas = [], n._schemaByObservableKey = {}, n._schemaInstances = {}, n._subjects = {}, n._observables = {}, n._watcherUpdates = null, n._schemaSubscribers = {}, n._totalSchemaSubscribers = 0, n._totalActiveSchemas = 0, n._multicallResultCache = {}, n._addresses = {}, n._removeSchemaTimers = {}, n
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                void 0 === t && (t = {
                    addresses: void 0,
                    removeSchemaDelay: 1e3,
                    debounceTime: 1,
                    latestDebounceTime: 1,
                    latestTimeout: 1e4
                }), this._addresses = t.addresses || this.get("smartContract").getContractAddresses(), this._removeSchemaDelay = t.removeSchemaDelay || 1e3, this._debounceTime = t.debounceTime || 1, this._latestDebounceTime = t.latestDebounceTime || 1, this._latestTimeout = t.latestTimeout || 1e4
            }, n.authenticate = function () {
                this._connectedAddress = this.get("web3").currentAddress()
            }, n.createWatcher = function (t) {
                var e = this,
                    n = void 0 === t ? {} : t,
                    a = n.useWeb3Provider,
                    r = void 0 !== a && a,
                    i = n.interval,
                    s = void 0 === i ? "block" : i,
                    o = n.rpcUrl,
                    u = void 0 === o ? "" : o,
                    c = j(n, Jt),
                    p = this.get("web3");
                c = O({
                    multicallAddress: this.get("smartContract").getContractAddress("MULTICALL")
                }, c);
                var y = "block" === s;
                return y && (s = 6e4), r ? c.web3 = p._web3 : u || (u = p.rpcUrl), this._watcher = w.createWatcher([], O({}, c, {
                    interval: s,
                    rpcUrl: u
                })), y ? (Qt("Watcher created with poll on new block mode using " + (u ? "rpcUrl: " + u : "web3 provider")), p.onNewBlock((function (t) {
                    Qt("Polling after new block detected (" + t + ")"), e._watcher.poll()
                }))) : Qt("Watcher created with " + s + "ms polling interval using " + (r ? "web3 provider" : "rpcUrl: " + u)), this._watcher.onPoll((function (t) {
                    var e = t.latestBlockNumber;
                    return Qt("Sending network request #" + t.id + (e ? " (latest block: " + e + ")" : ""))
                })), this._watcher.onNewBlock((function (t) {
                    return Qt("Latest block: " + t)
                })), this._watcher.onError((function (t) {
                    return console.error("Multicall error:", t)
                })), this._watcher
            }, n.tap = function (t) {
                return Qt("Watcher tapped"), this._watcher.tap(t)
            }, n.start = function () {
                return Qt("Watcher started"), this._watcher.start()
            }, n.stop = function () {
                return this._flushPendingSchemaRemovals(), Qt("Watcher stopped"), this._watcher.stop()
            }, n.restart = function () {
                this.stop(), this.start()
            }, n.schemaByObservableKey = function (t) {
                if (!t) throw new Error("Invalid observable key");
                if (!this._schemaByObservableKey[t]) throw new Error("No registered schema definition found with observable key: " + t);
                return this._schemaByObservableKey[t]
            }, n.registerSchemas = function (t) {
                var e = this;
                if ("object" != typeof t) throw new Error("Schemas must be object or array");
                (t = Array.isArray(t) ? t.map((function (t) {
                    return O({}, t)
                })) : Object.keys(t).map((function (e) {
                    return O({
                        key: e
                    }, t[e])
                }))).forEach((function (t) {
                    if (!t.key) throw new Error("Schema definitions must have a unique key");
                    if (t.return || t.returns || (t.returns = [t.key]), t.return && t.returns) throw new Error("Ambiguous return definitions in schema: found both return and returns property");
                    if (t.return && (t.returns = [t.return]), !Array.isArray(t.returns)) throw new Error("Schema must contain return/returns property");
                    t.returns = t.returns.map((function (n) {
                        if (Array.isArray(n) || (n = [n]), void 0 !== e._schemaByObservableKey[n[0]]) throw new Error("Observable with key " + n[0] + " already registered");
                        if (e._schemaByObservableKey[n[0]] = t, n.length > 2) throw new Error("Returns array format should be [key, transform]");
                        return n
                    }))
                })), this._schemas = [].concat(this._schemas, t), $t("Registered " + t.length + " schemas")
            }, n.latest = function (t) {
                for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), a = 1; a < e; a++) n[a - 1] = arguments[a];
                var r = t + (n.length > 0 ? "." : "") + n.join(".");
                return this._watch.apply(this, [{
                    depth: 0,
                    throwIfError: !0
                }, t].concat(n)).pipe(x.catchError((function (t) {
                    throw new Error(t)
                })), x.takeUntil(g.timer(this._latestTimeout)), x.throwIfEmpty((function () {
                    return new Error("Timed out waiting for latest value of: " + r)
                })), x.debounceTime(this._latestDebounceTime), x.take(1)).toPromise()
            }, n.watch = function (t) {
                for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), a = 1; a < e; a++) n[a - 1] = arguments[a];
                return this._watch.apply(this, [{
                    depth: 0
                }, t].concat(n))
            }, n._watch = function (t, e) {
                for (var n, a = this, r = t.depth, i = t.throwIfError, s = void 0 !== i && i, o = this.schemaByObservableKey(e), u = o.generate.length, c = arguments.length, p = new Array(c > 2 ? c - 2 : 0), y = 2; y < c; y++) p[y - 2] = arguments[y];
                if (p.length < u) return g.throwError("Observable " + e + " expects at least " + u + " argument(s)");
                var d = e + (p.length > 0 ? "." : "") + p.join(".");
                if (null != o && null != (n = o.validate) && n.args) {
                    var l, m = (l = o.validate).args.apply(l, p);
                    if (m) return $t("Input validation failed for observable: " + d + " (depth: " + r + ")"), g.throwError(m)
                }
                var b = this._createSchemaInstance.apply(this, [o].concat(p)),
                    h = b.computed;
                $t("watch() called for " + (h ? "computed " : "base ") + "observable: " + d + " (depth: " + r + ")");
                var v = f.get(this._observables, d);
                if (v) return h ? ($t("Returning existing computed observable: " + d + " (depth: " + r + ")"), 0 === r && (v = v.pipe(x.debounceTime(this._debounceTime))), s && (v = v.pipe(x.tap(Zt))), v.pipe(x.filter(te), x.map((function (t) {
                    return h.apply(void 0, t)
                })))) : ($t("Returning existing base observable: " + d), v);
                if (h) {
                    var _ = "function" == typeof b.dependencies ? b.dependencies({
                            watch: this.watch.bind(this),
                            get: this.get.bind(this)
                        }) : b.dependencies,
                        w = function t(e) {
                            var n = e[0],
                                i = e.slice(1);
                            if (n instanceof Promise || Array.isArray(n)) return g.from(n);
                            if ("function" == typeof n) return g.from(n());
                            var s = i.map((function (t) {
                                    return !Array.isArray(t)
                                })),
                                o = s.every((function (t) {
                                    return !0 === t
                                }));
                            return Array.isArray(i) && 0 === i.length ? a._watch({
                                depth: r + 1
                            }, n) : o ? a._watch.apply(a, [{
                                depth: r + 1
                            }, n].concat(i)) : g.combineLatest(i.map((function (e, n) {
                                return s[n] ? [e] : t(e)
                            }))).pipe(x.flatMap((function (t) {
                                return a._watch.apply(a, [{
                                    depth: r + 1
                                }, n].concat(t)).pipe(ee(n))
                            })))
                        },
                        A = _.map(w),
                        T = g.combineLatest(A);
                    return $t("Created new computed observable: " + d + " (depth: " + r + ")"), f.set(this._observables, d, T), 0 === r && (T = T.pipe(x.debounceTime(this._debounceTime))), s && (T = T.pipe(x.tap(Zt))), T.pipe(x.filter(te), x.map((function (t) {
                        return h.apply(void 0, t)
                    })))
                }
                var k = b.id,
                    S = b.path;
                void 0 === this._schemaSubscribers[S] && (this._schemaSubscribers[S] = 0);
                var M = new g.ReplaySubject(1);
                f.set(this._subjects, d, M), void 0 !== this._multicallResultCache[d] && this._handleResult(M, d, this._multicallResultCache[d]);
                var E = g.Observable.create((function (t) {
                    a._totalSchemaSubscribers++, $t("Observer subscribed to " + k + " (" + (a._schemaSubscribers[S] + 1) + " subscribers)"), 1 == ++a._schemaSubscribers[S] && a._addSchemaToMulticall(b), a._watcherUpdates || a._subscribeToWatcherUpdates();
                    var e = M.subscribe(t);
                    return function () {
                        a._totalSchemaSubscribers--, 0 == --a._schemaSubscribers[S] && a._removeSchemaFromMulticall(b.id), e.unsubscribe(), $t("Observer unsubscribed from " + k + " (" + a._schemaSubscribers[S] + " subscribers)")
                    }
                }));
                return $t("Created new base observable: " + d), f.set(this._observables, d, E), E
            }, n._createSchemaInstance = function (t) {
                for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), a = 1; a < e; a++) n[a - 1] = arguments[a];
                var r = n.join("."),
                    i = t.key + (r ? "." : "") + r;
                if (this._schemaInstances[i]) return this._schemaInstances[i];
                var s = t.generate.apply(t, n);
                if (this._schemaInstances[i] = s, s.args = [].concat(n), !s.computed) {
                    var o = s.returns,
                        u = s.transforms,
                        c = void 0 === u ? {} : u;
                    s.path = i, o || (s.returns = t.returns.map((function (t) {
                        var e = t[0],
                            n = e + (r ? "." : "") + r;
                        return c[e] ? [n, c[e]] : 2 == t.length ? [n, t[1]] : [n]
                    })));
                    var p = s.target,
                        y = s.contract;
                    if (!p && !y) throw new Error("Schema must specify target address or contract");
                    if (!p && !this._addresses[y]) throw new Error("Can't find contract address for " + y);
                    s.target = p || this._addresses[y]
                }
                return s
            }, n._addSchemaToMulticall = function (t) {
                var e, n = t.id,
                    a = t.target,
                    r = t.call,
                    i = t.returns;
                if (this._removeSchemaTimers[n]) return $t("Cancelled pending schema removal: " + n), clearTimeout(this._removeSchemaTimers[n]), void delete this._removeSchemaTimers[n];
                this._totalActiveSchemas++, this._watcher.tap((function (t) {
                    return [].concat(t, [{
                        id: n,
                        target: a,
                        call: r,
                        returns: i
                    }])
                })), $t("Schema added to multicall: " + n), null != (e = process) && e.browser ? $t("Active schemas (" + this._totalActiveSchemas + " total):", this.activeSchemaIds) : $t("Active schemas (" + this._totalActiveSchemas + " total): " + this.activeSchemaIds.join(","))
            }, n._removeSchemaImmediately = function (t) {
                var e;
                void 0 !== this._removeSchemaTimers[t] && delete this._removeSchemaTimers[t], $t("Schema removed from multicall: " + t), this._watcher.tap((function (e) {
                    return e.filter((function (e) {
                        return e.id !== t
                    }))
                })), 0 == --this._totalActiveSchemas ? ($t("No remaining active schemas"), $t("Unsubscribed from watcher updates"), this._watcherUpdates.unsub(), this._watcherUpdates = null) : null != (e = process) && e.browser ? $t("Active schemas (" + this._totalActiveSchemas + " total):", this.activeSchemaIds) : $t("Active schemas (" + this._totalActiveSchemas + " remaining): " + this.activeSchemaIds.join(","))
            }, n._removeSchemaFromMulticall = function (t) {
                var e = this;
                this._removeSchemaTimers[t] = setTimeout((function () {
                    return e._removeSchemaImmediately(t)
                }), this._removeSchemaDelay)
            }, n._flushPendingSchemaRemovals = function () {
                var t = Object.keys(this._removeSchemaTimers);
                if (0 !== t.length) {
                    $t("Flushing " + t.length + " pending schema removals");
                    for (var e = 0, n = t; e < n.length; e++) {
                        var a = n[e];
                        $t("Forcing schema removal: " + a), clearTimeout(this._removeSchemaTimers[a]), this._removeSchemaImmediately(a)
                    }
                }
            }, n._handleResult = function (t, e, n) {
                var a = this._validateResult(t, e, n);
                a ? t.error(a) : t.next(n)
            }, n._validateResult = function (t, e, n) {
                var a, r = e.split("."),
                    i = r[0],
                    s = r.slice(1),
                    o = this._schemaByObservableKey[i],
                    u = o.key + (s.length > 0 ? "." : "") + s.join("."),
                    c = this._schemaInstances[u];
                if (null != (a = o.validate) && a.hasOwnProperty(i)) try {
                    var p = o.validate[i].call({
                        args: c.args
                    }, n, c.args);
                    if (p) throw new Error(p);
                    return
                } catch (t) {
                    return $t("Validation error for " + e + " result:", n), t
                }
            }, n._subscribeToWatcherUpdates = function () {
                var t = this;
                $t("Subscribed to watcher updates"), this._watcherUpdates = this._watcher.subscribe((function (e) {
                    var n = f.get(t._subjects, e.type);
                    if (n) {
                        var a, r = null != (a = e.value) && a._isBigNumber ? e.value.toString() + " (BigNumber)" : e.value;
                        $t("Got watcher update for " + e.type + ":", r), t._handleResult(n, e.type, e.value)
                    } else t._multicallResultCache[e.type] = e.value
                }))
            }, C(e, [{
                key: "observableKeys",
                get: function () {
                    return Object.keys(this._schemaByObservableKey)
                }
            }, {
                key: "watcher",
                get: function () {
                    return this._watcher
                }
            }, {
                key: "activeSchemas",
                get: function () {
                    return this._watcher.schemas.filter((function (t) {
                        return t.id
                    }))
                }
            }, {
                key: "activeSchemaIds",
                get: function () {
                    return this.activeSchemas.map((function (t) {
                        return t.id
                    }))
                }
            }, {
                key: "totalActiveSchemas",
                get: function () {
                    return this._totalActiveSchemas
                }
            }, {
                key: "totalSchemaSubscribers",
                get: function () {
                    return this._totalSchemaSubscribers
                }
            }]), e
        }(e.PublicService),
        ae = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "nonce"), (n = t.call(this, e, ["web3", "accounts"]) || this)._counts = {}, n
            }
            P(e, t);
            var n = e.prototype;
            return n.connect = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return this._accountsService = this.get("accounts"), this._web3Service = this.get("web3"), t.next = 4, this.setCounts();
                            case 4:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n._getTxCount = function () {
                var t = M(G.mark((function t(e) {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.abrupt("return", Ut(this._web3Service._web3.eth.getTransactionCount)(e, "pending"));
                            case 1:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n._compareNonceCounts = function (t, e) {
                return t > this._counts[e] ? t : this._counts[e]
            }, n._removeDuplicateAddresses = function (t) {
                var e = [];
                return t.map((function (t) {
                    e.includes(t.address) || e.push(t.address)
                })), e
            }, n.setCounts = function () {
                var t = M(G.mark((function t() {
                    var e, n, a = this;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.next = 2, this._accountsService.listAccounts();
                            case 2:
                                if (0 !== (e = t.sent).length) {
                                    t.next = 5;
                                    break
                                }
                                return t.abrupt("return");
                            case 5:
                                return n = this._removeDuplicateAddresses(e), t.abrupt("return", new Promise((function (t) {
                                    e.map(function () {
                                        var e = M(G.mark((function e(r) {
                                            return G.wrap((function (e) {
                                                for (;;) switch (e.prev = e.next) {
                                                    case 0:
                                                        return e.next = 2, a._getTxCount(r.address);
                                                    case 2:
                                                        a._counts[r.address] = e.sent, Object.keys(a._counts).length === n.length && t();
                                                    case 5:
                                                    case "end":
                                                        return e.stop()
                                                }
                                            }), e)
                                        })));
                                        return function (t) {
                                            return e.apply(this, arguments)
                                        }
                                    }())
                                })));
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.getNonce = function () {
                var t = M(G.mark((function t() {
                    var e, n, a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return e = this._web3Service.currentAddress(), t.next = 3, this._getTxCount(e);
                            case 3:
                                return n = t.sent, this._counts[e] ? (a = this._compareNonceCounts(n, e), this._counts[e] += 1) : (this._counts[e] = n, a = n, this._counts[e] += 1), t.abrupt("return", a);
                            case 6:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), e
        }(e.PublicService),
        re = function () {},
        ie = function (t) {
            function e(e) {
                return void 0 === e && (e = "event"), t.call(this, e) || this
            }
            P(e, t);
            var n = e.prototype;
            return n.on = function () {}, n.emit = function () {}, n.ping = function () {}, n.removeListener = function () {}, n.registerPollEvents = function () {}, n.buildEmitter = function () {
                return {
                    emit: re,
                    on: re,
                    removeListener: re,
                    registerPollEvents: re,
                    ping: re,
                    dispose: re
                }
            }, e
        }(e.LocalService),
        se = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "smartContract"), (n = t.call(this, e, ["web3", "transactionManager"]) || this).getContractByName = n.getContract, n.getContractAddressByName = n.getContractAddress, n
            }
            P(e, t);
            var n = e.prototype;
            return n.initialize = function (t) {
                void 0 === t && (t = {}), t.addContracts && (this._addedContracts = Object.keys(t.addContracts).reduce((function (e, n) {
                    return e[n] = [O({}, t.addContracts[n], {
                        version: 1
                    })], e
                }), {})), this._addressOverrides = t.addressOverrides || {}, this.get("transactionManager").get("proxy").setSmartContractService(this)
            }, n.getContractByAddressAndAbi = function (t, e, n) {
                var a = void 0 === n ? {} : n,
                    r = a.name,
                    i = a.wrap,
                    s = void 0 === i || i;
                k(t, 'Missing address for contract "' + r + '"'), r || (r = this.lookupContractName(t));
                var o = this.get("web3"),
                    u = o.get("accounts").hasAccount() ? o.getEthersSigner() : o.getEthersSigner().provider;
                return function (t, e, n, a) {
                    for (var r, i = {}, s = U(n); !(r = s()).done;) {
                        var o = r.value,
                            u = o.type,
                            c = o.name,
                            p = o.inputs,
                            y = !1 === o.constant || !["pure", "view"].includes(o.stateMutability);
                        if ("function" === u && y) {
                            if (p.length > 0) {
                                var d = c + "(" + p.map((function (t) {
                                    return t.type
                                })).join(",") + ")";
                                i[d] = !0
                            }
                            i[c] = !0
                        }
                    }
                    return new Proxy({
                        wrappedContract: t
                    }, {
                        get: function (n, r) {
                            return r in n ? n[r] : a && i[r] ? function () {
                                for (var n = arguments.length, i = new Array(n), s = 0; s < n; s++) i[s] = arguments[s];
                                var o = i[i.length - 1],
                                    u = "object" == typeof o && null !== o && o.constructor === Object ? i.length - 1 : i.length;
                                for (var c in t.interface.functions) t.interface.functions[c].name === r && t.interface.functions[c].inputs.length === u && (r = c);
                                return a.sendContractCall(t, r, i, e)
                            } : t[r]
                        },
                        set: function (e, n, a) {
                            return t[n] = a, !0
                        }
                    })
                }(new b.Contract(t, e, u), r, e, s && this.get("transactionManager"))
            }, n.getContractAddress = function (t, e) {
                return this._getContractInfo(t, (void 0 === e ? {} : e).version).address
            }, n.getContractAddresses = function () {
                return f.mapValues(this._getAllContractInfo(), (function (t) {
                    return ue(t).address
                }))
            }, n.getContract = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.wrap,
                    r = void 0 === a || a,
                    i = this._getContractInfo(t, n.version);
                return this.getContractByAddressAndAbi(i.address, i.abi, {
                    name: t,
                    wrap: r
                })
            }, n.lookupContractName = function (t) {
                t = t.toUpperCase();
                for (var e = this._getAllContractInfo(), n = 0, a = Object.keys(e); n < a.length; n++) {
                    var r = a[n];
                    if (e[r].find((function (e) {
                            return e.address && e.address.toUpperCase() === t
                        }))) return r
                }
                return null
            }, n.hasContract = function (t) {
                return Object.keys(bt).indexOf(t) > -1 || Object.keys(ft).indexOf(t) > -1 || Object.keys(this._addedContracts || {}).indexOf(t) > -1
            }, n.getWeb3ContractByName = function (t) {
                var e = this._getContractInfo(t),
                    n = e.abi,
                    a = e.address;
                return this.get("web3").web3Contract(n, a)
            }, n._getContractInfo = function (t, e) {
                k(this.hasContract(t), 'No contract found for "' + t + '"');
                var n = oe(this._getAllContractInfo()[t], e);
                return k(n, "Cannot find contract " + t + ", version " + e), k(n.address, "Contract " + t + " has no address"), n
            }, n._getAllContractInfo = function () {
                var t = this,
                    e = this.get("web3").networkName,
                    n = wt.find((function (t) {
                        return t.name === e
                    }));
                if (k(n, 'Network "' + e + '" not found in mapping.'), n.contracts || (n.contracts = vt(this._addressOverrides)), this._contractInfoCache || (this._contractInfoCache = {}), !this._contractInfoCache[e]) {
                    var a = this._addedContracts ? O({}, n.contracts, this._addedContracts) : n.contracts;
                    this._contractInfoCache[e] = f.mapValues(a, (function (n, a) {
                        var r = ue(n),
                            i = ce(t._addressOverrides[a], e) || ce(r.address, e);
                        return i !== r.address ? n.map((function (t) {
                            return t === r ? O({}, r, {
                                address: i
                            }) : t
                        })) : n
                    }))
                }
                return this._contractInfoCache[e]
            }, e
        }(e.PrivateService);

    function oe(t, e) {
        return e || (e = Math.max.apply(Math, t.map((function (t) {
            return t.version
        })))), t.find((function (t) {
            return t.version === e
        }))
    }

    function ue(t) {
        return oe(t)
    }

    function ce(t, e) {
        if (t) return "string" == typeof t ? t : t[e] ? t[e] : e.startsWith("test") && t.testnet ? t.testnet : void 0
    }
    var pe = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "timer"), (n = t.call(this, e) || this)._timers = {}, n
            }
            P(e, t);
            var n = e.prototype;
            return n.createTimer = function (t, e, n, a) {
                this.disposeTimer(t), this._timers[t] = {
                    repeating: n,
                    id: (n ? setInterval : setTimeout)(a, e)
                }
            }, n.disposeTimer = function (t) {
                if (this._timers.hasOwnProperty(t)) {
                    var e = this._timers[t];
                    (e.repeating ? clearInterval : clearTimeout)(e.id)
                }
            }, n.disposeAllTimers = function () {
                for (var t, e = U(this.listTimers()); !(t = e()).done;) this.disposeTimer(t.value)
            }, n.listTimers = function () {
                return Object.keys(this._timers)
            }, e
        }(e.LocalService),
        ye = {
            initialized: "initialized",
            pending: "pending",
            mined: "mined",
            error: "error",
            finalized: "finalized"
        },
        de = {
            transaction: {
                initialized: [ye.pending, ye.error],
                pending: [ye.error, ye.mined],
                mined: [ye.finalized, ye.error],
                finalized: [],
                error: []
            }
        },
        le = ye.initialized,
        me = ye.pending,
        fe = ye.mined,
        be = ye.finalized,
        he = ye.error,
        ve = [le, me, fe, be],
        _e = function () {
            function t(t) {
                this._state = new e.StateMachine(le, de.transaction), this._businessObject = t
            }
            var n = t.prototype;
            return n.setPending = function () {
                this._state.transitionTo(me)
            }, n.setMined = function () {
                this._state.transitionTo(fe)
            }, n.setFinalized = function () {
                this._state.transitionTo(be)
            }, n.setError = function (t) {
                this.error = t, this._state.transitionTo(he)
            }, n.state = function () {
                return this._state.state()
            }, n.isInitialized = function () {
                return this._state.inState(le)
            }, n.isPending = function () {
                return this._state.inState(me)
            }, n.isMined = function () {
                return this._state.inState(fe)
            }, n.isFinalized = function () {
                return this._state.inState(be)
            }, n.isError = function () {
                return this._state.inState(he)
            }, n._returnValue = function () {
                return this._businessObject || this
            }, n.inOrPastState = function (t) {
                var e = this.state();
                if (t === e) return !0;
                if (t === he) return this.isError();
                var n = ve.indexOf(e),
                    a = ve.indexOf(t);
                if (-1 === n || -1 === a) throw new Error("invalid state");
                return n >= a
            }, n._onStateChange = function (t, e, n) {
                var a = this;
                this._state.onStateChanged((function (r, i) {
                    r === t && i === e && n(a._returnValue())
                }))
            }, n.onPending = function (t) {
                return this._onStateChange(le, me, t)
            }, n.onMined = function (t) {
                return this._onStateChange(me, fe, t)
            }, n.onFinalized = function (t) {
                return this._onStateChange(fe, be, t)
            }, n.onConfirmed = function (t) {
                return this.onFinalized(t)
            }, n.onError = function (t) {
                var e = this;
                this._state.onStateChanged((function (n, a) {
                    a === he && t(e.error, e._returnValue())
                }))
            }, n.on = function (t, e) {
                if (t === he) return this.onError(e);
                if (!Object.keys(ye).includes(t)) throw new Error('Unrecognized state "' + t + '"');
                var n = ve[ve.indexOf(t) - 1];
                return this._onStateChange(n, t, e)
            }, t
        }(),
        we = l("dai:TransactionObject"),
        ge = function (t) {
            function e(e, n, a) {
                var r, i = void 0 === a ? {} : a,
                    s = i.metadata;
                return (r = t.call(this, i.businessObject) || this)._transaction = e, r._web3Service = n.get("web3"), r._nonceService = n.get("nonce"), r._timeStampSubmitted = new Date, r.metadata = s || {}, r._confirmedBlockCount = r._web3Service.confirmedBlockCount(), r
            }
            P(e, t);
            var n = e.prototype;
            return n.timeStampSubmitted = function () {
                return this._timeStampSubmitted
            }, n.timeStamp = function () {
                return this._timeStampMined
            }, n.fees = function () {
                return this._fees
            }, n.mine = function () {
                var t = this;
                return this._dataPromise || (this._dataPromise = this._getTransactionData()), this._dataPromise.then((function () {
                    return t._returnValue()
                }))
            }, n.isFinalized = function () {
                return this._blockNumberWhenMined + this._confirmedBlockCount <= this._web3Service.blockNumber() && this.setFinalized(), t.prototype.isFinalized.call(this)
            }, n.confirm = function () {
                var t = M(G.mark((function t(e) {
                    var n;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return void 0 === e && (e = this._confirmedBlockCount), this._confirmedBlockCount = e, t.next = 4, this.mine();
                            case 4:
                                if (!(parseInt(e) <= 0)) {
                                    t.next = 6;
                                    break
                                }
                                return t.abrupt("return");
                            case 6:
                                return n = this.receipt.blockNumber + e, t.next = 9, this._web3Service.waitForBlockNumber(n);
                            case 9:
                                return t.next = 11, this._web3Service.getTransactionReceipt(this.hash);
                            case 11:
                                if (t.sent.blockHash === this.receipt.blockHash) {
                                    t.next = 14;
                                    break
                                }
                                throw new Error("transaction block hash changed");
                            case 14:
                                return this.setFinalized(), t.abrupt("return", this._returnValue());
                            case 16:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n._getTransactionData = function () {
                var t = M(G.mark((function t() {
                    var e, n, a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.prev = 0, t.next = 3, this._transaction;
                            case 3:
                                if (this.hash = t.sent, this.hash.hash && (this.hash = this.hash.hash), this.setPending(), n && n.blockHash) {
                                    t.next = 10;
                                    break
                                }
                                return t.next = 9, this._keepWaitingForTx();
                            case 9:
                                n = t.sent;
                            case 10:
                                return e = n.gasPrice, this._timeStampMined = new Date, this._blockNumberWhenMined = n.blockNumber, t.next = 15, this._waitForReceipt();
                            case 15:
                                if (this.receipt = t.sent, this.receipt.gasUsed && e && (this._fees = At.wei(e).times(this.receipt.gasUsed)), "0x1" != this.receipt.status && 1 != this.receipt.status) {
                                    t.next = 21;
                                    break
                                }
                                this.setMined(), t.next = 25;
                                break;
                            case 21:
                                throw we((a = (this.metadata.contract ? this.metadata.contract + "." + this.metadata.method : "transaction") + " " + this.hash + " reverted") + "\n" + JSON.stringify(this.receipt, null, "  ")), new Error(a);
                            case 25:
                                t.next = 33;
                                break;
                            case 27:
                                return t.prev = 27, t.t0 = t.catch(0), t.next = 31, this._nonceService.setCounts();
                            case 31:
                                throw this.setError(t.t0), t.t0;
                            case 33:
                                return t.abrupt("return", this);
                            case 34:
                            case "end":
                                return t.stop()
                        }
                    }), t, this, [
                        [0, 27]
                    ])
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n._waitForReceipt = function (t, e) {
                var n = this;
                void 0 === t && (t = 15), void 0 === e && (e = 1);
                var a = Promise.resolve(this._web3Service.getTransactionReceipt(this.hash));
                return t < 1 ? a : a.then((function (a) {
                    return a || (we("Receipt is null. Retrying " + t + " more time(s)"), Wt(1500 * e).then((function () {
                        return n._waitForReceipt(t - 1, e + 1)
                    })))
                }))
            }, n._keepWaitingForTx = function () {
                var t = M(G.mark((function t() {
                    var e, n, a, r;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                n = new Date, we("waiting for transaction " + this.hash.substring(8) + "... to mine"), a = 0;
                            case 3:
                                if (!(a < 720)) {
                                    t.next = 15;
                                    break
                                }
                                return t.next = 6, this._web3Service.getTransaction(this.hash);
                            case 6:
                                if (!((e = t.sent) || {}).blockHash) {
                                    t.next = 9;
                                    break
                                }
                                return t.abrupt("break", 15);
                            case 9:
                                return we("not mined yet"), t.next = 12, Wt(5e3);
                            case 12:
                                a++, t.next = 3;
                                break;
                            case 15:
                                if (!e || e.blockHash) {
                                    t.next = 17;
                                    break
                                }
                                throw new Error("This transaction is taking longer than it should. Check its status on etherscan or try again. Tx hash:", this.hash);
                            case 17:
                                return r = (new Date - n) / 1e3, we("mined " + this.metadata.contract + "." + this.metadata.method + " with nonce " + e.nonce + " " + this.hash.substring(8) + "... done in " + r + "s"), t.abrupt("return", e);
                            case 20:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), e
        }(_e),
        xe = l("dai:TransactionManager"),
        Ae = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "transactionManager"), (n = t.call(this, e, ["web3", "nonce", "proxy", "gas"]) || this)._newTxListeners = [], n._tracker = new Te, n
            }
            P(e, t);
            var n = e.prototype;
            return n.sendContractCall = function (t, e, n, a) {
                var r = this;
                xe("sendContractCall: " + a + "." + e + " " + A.inspect(n)), n || (n = []);
                var i, s, o, u = {
                        contract: a,
                        method: e.replace(/\(.*\)$/g, ""),
                        args: n
                    },
                    c = n[n.length - 1];
                return "object" == typeof c && c.constructor === Object ? (i = c, n = n.slice(0, n.length - 1), i.metadata && (u = O({}, u, i.metadata), delete i.metadata), f.has(i, "promise") && (i.promise && (s = i.promise), delete i.promise), i.businessObject && (o = i.businessObject, delete i.businessObject), f.has(i, "value") || (i.value = 0)) : i = {}, this._createTransactionObject(M(G.mark((function a() {
                    return G.wrap((function (a) {
                        for (;;) switch (a.prev = a.next) {
                            case 0:
                                return a.next = 2, r._buildTransactionOptions(i, t, e, n);
                            case 2:
                                return a.abrupt("return", r._execute(t, e, n, a.sent));
                            case 4:
                            case "end":
                                return a.stop()
                        }
                    }), a)
                })))(), {
                    businessObject: o,
                    metadata: u,
                    promise: s
                })
            }, n.sendTransaction = function (t, e) {
                var n = this;
                return this._createTransactionObject(M(G.mark((function e() {
                    var a;
                    return G.wrap((function (e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.next = 2, n._buildTransactionOptions(t);
                            case 2:
                                return a = e.sent, e.abrupt("return", n.get("web3").sendTransaction(a));
                            case 4:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                })))(), e)
            }, n.onNewTransaction = function (t) {
                this._newTxListeners.push(t)
            }, n.onTransactionUpdate = function (t) {
                var e = this;
                return this._tracker._globalListeners.push(t), {
                    unsub: function () {
                        var n = e._tracker._globalListeners.indexOf(t); - 1 !== n && e._tracker._globalListeners.splice(n, 1)
                    }
                }
            }, n.getTransaction = function (t, e) {
                return this._tracker.get(Gt(t), e)
            }, n.confirm = function () {
                var t = M(G.mark((function t(e, n) {
                    var a;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return t.next = 2, e;
                            case 2:
                                return a = this._tracker.getAll(Gt(e)), t.abrupt("return", Promise.all(a.map((function (t) {
                                    return t.confirm(n)
                                }))));
                            case 4:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n) {
                    return t.apply(this, arguments)
                }
            }(), n.isMined = function (t) {
                return this._tracker.get(Gt(t)).isMined()
            }, n.listen = function (t, e) {
                this._tracker.listen(Gt(t), "function" == typeof e ? {
                    pending: function (t) {
                        return e(t, "pending")
                    },
                    mined: function (t) {
                        return e(t, "mined")
                    },
                    confirmed: function (t) {
                        return e(t, "confirmed")
                    },
                    error: function (t, n) {
                        return e(t, "error", n)
                    }
                } : e)
            }, n._execute = function (t, e, n, a) {
                return a.dsProxy ? ("string" == typeof a.dsProxy && (r = a.dsProxy), delete a.dsProxy, this.get("proxy").execute(t, e, n, a, r)) : t[e].apply(t, n.concat([a]));
                var r
            }, n._createTransactionObject = function (t, e) {
                var n = void 0 === e ? {} : e,
                    a = n.promise,
                    r = new ge(t, this, {
                        businessObject: n.businessObject,
                        metadata: n.metadata
                    });
                this._newTxListeners.forEach((function (t) {
                    return t(r)
                }));
                var i = r.mine();
                return this._tracker.store(Gt(i), r), a && this._tracker.store(Gt(a), r, {
                    globalTxStateUpdates: !1
                }), i
            }, n._buildTransactionOptions = function () {
                var t = M(G.mark((function t(e, n, a, r) {
                    var i;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (!n || e.gasLimit) {
                                    t.next = 4;
                                    break
                                }
                                return t.next = 3, this._getGasLimit(e, n, a, r);
                            case 3:
                                e.gasLimit = t.sent;
                            case 4:
                                if (this.get("gas").disablePrice) {
                                    t.next = 9;
                                    break
                                }
                                return i = e.transactionSpeed, t.next = 8, this.get("gas").getGasPrice(i);
                            case 8:
                                e.gasPrice = t.sent;
                            case 9:
                                return t.t0 = O, t.t1 = {}, t.t2 = e, t.t3 = this.get("web3").transactionSettings(), t.next = 15, this.get("nonce").getNonce();
                            case 15:
                                return t.t4 = t.sent, t.t5 = {
                                    nonce: t.t4
                                }, t.abrupt("return", (0, t.t0)(t.t1, t.t2, t.t3, t.t5));
                            case 18:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a, r) {
                    return t.apply(this, arguments)
                }
            }(), n._getGasLimit = function () {
                var t = M(G.mark((function t(e, n, a, r) {
                    var i, s, o, u;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (i = {}, s = n.interface.encodeFunctionData(a, r), !e.dsProxy) {
                                    t.next = 8;
                                    break
                                }
                                return t.next = 5, this.get("proxy").currentProxy();
                            case 5:
                                o = t.sent, u = this.get("proxy").getUnwrappedProxyContract(o), s = u.interface.encodeFunctionData("execute(address,bytes)", [n.address, s]);
                            case 8:
                                return e.value && (i.value = e.value), i = O({
                                    from: this.get("web3").currentAddress(),
                                    to: e.dsProxy ? o : n.address,
                                    data: s
                                }, i), t.abrupt("return", this.get("gas").estimateGasLimit(i));
                            case 11:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e, n, a, r) {
                    return t.apply(this, arguments)
                }
            }(), e
        }(e.PublicService),
        Te = function () {
            function t() {
                this._listeners = {}, this._globalListeners = [], this._transactions = {}
            }
            var e = t.prototype;
            return e.store = function (t, e, n) {
                var a = this;
                void 0 === n && (n = {
                    globalTxStateUpdates: !0
                }), this._init(t), this._transactions[t].push(e);
                for (var r, i = function () {
                        var i = r.value;
                        e.on(i, (function () {
                            n.globalTxStateUpdates && a._globalListeners.forEach((function (t) {
                                return e.error ? t(e, i, e.error) : t(e, i)
                            })), a._listeners[t][i].forEach((function (t) {
                                return e.error ? t(e, e.error) : t(e)
                            }))
                        }))
                    }, s = U(this.constructor.states); !(r = s()).done;) i();
                n.globalTxStateUpdates && this._globalListeners.forEach((function (t) {
                    return t(e, "initialized")
                })), this._listeners[t].initialized.forEach((function (t) {
                    return e.error ? t(e, e.error) : t(e)
                })), this.clearExpiredTransactions()
            }, e.listen = function (t, e) {
                var n = this;
                this._init(t);
                var a = function (a) {
                    var i = e[a];
                    "confirmed" === a && (a = "finalized"), n._listeners[t][a].push(i), n._transactions[t].forEach((function (t) {
                        return t && t.inOrPastState(a) && (t.error ? i(t, t.error) : i(t))
                    })), r = a
                };
                for (var r in e) a(r)
            }, e.getAll = function (t) {
                return this._transactions[t]
            }, e.get = function (t) {
                var e = this._transactions[t];
                if (!e || 0 === e.length) throw new Error("No transactions for key " + t);
                return e.length > 1 && console.warn("Key " + t + " matches " + e.length + " transactions; returning the first."), e[0]
            }, e.clearExpiredTransactions = function () {
                var t = this;
                f.each(this._transactions, (function (e, n) {
                    e.forEach((function (e) {
                        var a = ((new Date).getTime() - new Date(e._timeStampMined).getTime()) / 6e4;
                        if ((e.isError() || e.isFinalized()) && a > 5) {
                            var r = t._transactions[n].indexOf(e);
                            t._transactions[n].splice(r, 1), 0 === t._transactions[n].length && (delete t._transactions[n], delete t._listeners[n])
                        }
                    }))
                }))
            }, e._init = function (t) {
                this._transactions[t] || (this._transactions[t] = []), this._listeners[t] || (this._listeners[t] = this.constructor.states.reduce((function (t, e) {
                    return t[e] = [], t
                }), {}))
            }, t
        }();
    Te.states = ["initialized", "pending", "mined", "finalized", "error"];
    var ke = new(function () {
            function t() {
                this._list = []
            }
            var e = t.prototype;
            return e.push = function (t) {
                this._list.push(t)
            }, e.disconnectAll = function () {
                var t = this;
                return Promise.all(this._list, (function (t) {
                    return t.manager()._disconnect()
                })).then((function () {
                    return t._list = []
                }))
            }, t
        }()),
        Se = l("dai:Web3Service"),
        Me = function (t) {
            function e(e) {
                var n;
                return void 0 === e && (e = "web3"), (n = t.call(this, e, ["accounts", "timer", "cache", "event"]) || this)._blockListeners = {}, n._info = {}, ke.push(D(n)), n
            }
            P(e, t);
            var n = e.prototype;
            return n.currentAddress = function () {
                return this.get("accounts").currentAddress()
            }, n.getEthersSigner = function () {
                var t, e, n;
                return this._ethersSigner || (this._ethersSigner = (e = (t = this).web3Provider(), {
                    getAddress: function () {
                        return t.currentAddress()
                    },
                    estimateGas: function (e) {
                        return t.estimateGas(e)
                    },
                    sendTransaction: function (e) {
                        return t.sendTransaction(O({}, e, {
                            from: t.currentAddress()
                        }))
                    },
                    call: n = Ut(t._web3.eth.call),
                    isSigner: function () {
                        return !0
                    },
                    _isSigner: !0,
                    provider: new Proxy(e, {
                        get: function (t, e) {
                            switch (e) {
                                case "resolveName":
                                    return function (t) {
                                        return t
                                    };
                                case "_isProvider":
                                    return !0;
                                case "call":
                                    return n;
                                default:
                                    return t[e]
                            }
                        }
                    })
                })), this._ethersSigner
            }, n.web3Provider = function () {
                return this._web3.currentProvider
            }, n.transactionSettings = function () {
                return this._transactionSettings
            }, n.confirmedBlockCount = function () {
                return this._confirmedBlockCount
            }, n.web3Contract = function (t, e) {
                return new this._web3.eth.Contract(t, e)
            }, n.initialize = function (t) {
                var e = this;
                Se("initializing..."), this._defaultEmitter = this.get("event"), this._web3 = new T, this._web3.setProvider(this.get("accounts").getProvider()), this.eth = new Proxy(this, {
                    get: function (t, e) {
                        return "string" == typeof e && console.warn("use ." + e + " instead of .eth." + e), t[e]
                    }
                }), this.manager().onDisconnected((function () {
                    return e._stopListeningForNewBlocks()
                })), this._defaultEmitter.emit("web3/INITIALIZED", {
                    provider: t.provider
                }), this._transactionSettings = t.transactionSettings, this._confirmedBlockCount = t.confirmedBlockCount || 5, this._pollingInterval = t.pollingInterval || 4e3
            }, n.subscribe = function () {
                var t;
                return (t = this._web3.eth).subscribe.apply(t, arguments)
            }, n.estimateGas = function () {
                var t;
                return (t = this._web3.eth).estimateGas.apply(t, arguments)
            }, n.wait = function () {
                var t;
                return (t = this._web3.eth).wait.apply(t, arguments)
            }, n.getBalance = function () {
                var t;
                return (t = this._web3.eth).getBalance.apply(t, arguments)
            }, n.getAccounts = function () {
                var t;
                return (t = this._web3.eth).getAccounts.apply(t, arguments)
            }, n.getBlock = function () {
                var t;
                return (t = this._web3.eth).getBlock.apply(t, arguments)
            }, n.getPastLogs = function () {
                var t;
                return (t = this._web3.eth).getPastLogs.apply(t, arguments)
            }, n.getStorageAt = function () {
                var t;
                return (t = this._web3.eth).getStorageAt.apply(t, arguments)
            }, n.getTransaction = function () {
                var t;
                return (t = this._web3.eth).getTransaction.apply(t, arguments)
            }, n.getTransactionReceipt = function () {
                var t;
                return (t = this._web3.eth).getTransactionReceipt.apply(t, arguments)
            }, n.connect = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                return Se("connecting..."), t.t0 = parseInt, t.next = 4, Ut(this._web3.eth.net.getId)();
                            case 4:
                                return t.t1 = t.sent, this._networkId = (0, t.t0)(t.t1), t.next = 8, this._web3.eth.getBlockNumber();
                            case 8:
                                this._currentBlock = t.sent, this._updateBlockNumber(this._currentBlock), this._listenForNewBlocks(), this.onNewBlock(this.get("event").ping), this._defaultEmitter.emit("web3/CONNECTED", O({}, this._info));
                            case 13:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.authenticate = function () {
                var t = M(G.mark((function t() {
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                Se("authenticating..."), this._defaultEmitter.emit("web3/AUTHENTICATED", {
                                    account: this.currentAddress()
                                });
                            case 2:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function () {
                    return t.apply(this, arguments)
                }
            }(), n.sendTransaction = function () {
                for (var t = this, e = arguments.length, n = new Array(e), a = 0; a < e; a++) n[a] = arguments[a];
                return new Promise((function (e, a) {
                    var r;
                    (r = t._web3.eth).sendTransaction.apply(r, n).on("transactionHash", (function (t) {
                        return e({
                            hash: t,
                            wait: function () {}
                        })
                    })).on("error", a)
                }))
            }, n.networkId = function () {
                return console.warn(".networkId() is deprecated; use .network instead"), this.network
            }, n.blockNumber = function () {
                return this._currentBlock
            }, n.onNewBlock = function (t) {
                this._blockListeners["*"] || (this._blockListeners["*"] = []), this._blockListeners["*"].push(t)
            }, n.waitForBlockNumber = function () {
                var t = M(G.mark((function t(e) {
                    var n = this;
                    return G.wrap((function (t) {
                        for (;;) switch (t.prev = t.next) {
                            case 0:
                                if (!(e < this._currentBlock)) {
                                    t.next = 3;
                                    break
                                }
                                return console.error("Attempted to wait for past block " + e), t.abrupt("return");
                            case 3:
                                if (e !== this._currentBlock) {
                                    t.next = 5;
                                    break
                                }
                                return t.abrupt("return", Promise.resolve(e));
                            case 5:
                                return this._blockListeners[e] || (this._blockListeners[e] = []), t.abrupt("return", new Promise((function (t) {
                                    n._blockListeners[e].push(t)
                                })));
                            case 7:
                            case "end":
                                return t.stop()
                        }
                    }), t, this)
                })));
                return function (e) {
                    return t.apply(this, arguments)
                }
            }(), n._listenForNewBlocks = function () {
                var t = this;
                "test" !== this.networkName ? (Se("Using newBlockHeaders subscription for block detection"), this._newBlocksSubscription = this.subscribe("newBlockHeaders").on("data", (function (e) {
                    var n = e.number;
                    t._currentBlock || (t._currentBlock = n - 1);
                    for (var a = t._currentBlock + 1; a <= n; a++) t._updateBlockNumber(a)
                }))) : (Se("Using manual getBlockNumber polling for block detection"), this._updateBlocksInterval = setInterval(function () {
                    var e = M(G.mark((function e() {
                        var n, a;
                        return G.wrap((function (e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    return e.next = 2, t._web3.eth.getBlockNumber();
                                case 2:
                                    for (n = e.sent, t._currentBlock || (t._currentBlock = n - 1), a = t._currentBlock + 1; a <= n; a++) t._updateBlockNumber(a);
                                case 5:
                                case "end":
                                    return e.stop()
                            }
                        }), e)
                    })));
                    return function () {
                        return e.apply(this, arguments)
                    }
                }(), this._pollingInterval))
            }, n._updateBlockNumber = function (t) {
                Se("Latest block: " + t), this._currentBlock = t, this._blockListeners[t] && (this._blockListeners[t].forEach((function (e) {
                    return e(t)
                })), this._blockListeners[t] = void 0), this._blockListeners["*"] && this._blockListeners["*"].forEach((function (e) {
                    return e(t)
                }))
            }, n._stopListeningForNewBlocks = function () {
                this._newBlocksSubscription ? this._newBlocksSubscription.unsubscribe((function (t) {
                    if (t) throw t
                })) : this._updateBlocksInterval && clearInterval(this._updateBlocksInterval)
            }, C(e, [{
                key: "network",
                get: function () {
                    return k(this._networkId, "Cannot resolve network ID. Are you connected?"), this._networkId
                }
            }, {
                key: "networkName",
                get: function () {
                    return function (t) {
                        var e = wt.filter((function (e) {
                            return e.networkId === t
                        }));
                        if (e.length < 1) throw new Error("No network with ID " + t + " found.");
                        return e[0].name
                    }(this.network)
                }
            }, {
                key: "rpcUrl",
                get: function () {
                    var t = f.last(this._web3.currentProvider._providers);
                    return t.rpcUrl || t._url || null
                }
            }]), e
        }(e.PrivateService);

    function Ee(t, n, a, r) {
        return n = e.standardizeConfig(t, n, r), a = e.standardizeConfig(t, a), !1 === n[0] || !1 === a[0] ? a : ["boolean" != typeof a[0] ? a[0] : n[0], f.merge({}, n[1], a[1])]
    }

    function Ce(t) {
        return t instanceof Array ? t[1] : t
    }
    var Oe = {
            defaults: {
                accounts: "AccountsService",
                allowance: "AllowanceService",
                cache: "CacheService",
                event: "EventService",
                gas: "GasService",
                multicall: "MulticallService",
                nonce: "NonceService",
                proxy: "DSProxyService",
                smartContract: "SmartContractService",
                timer: "TimerService",
                token: "EthereumTokenService",
                transactionManager: "TransactionManager",
                web3: "Web3Service"
            },
            disabled: {
                event: "NullEventService"
            }
        },
        Pe = function (t) {
            function e(e) {
                return void 0 === e && (e = {}), e.web3 && (e = O({}, e, {
                    accounts: O({}, e.accounts, {
                        web3: Ce(e.web3)
                    })
                })), t.call(this, e, O({
                    services: {
                        AccountsService: it,
                        AllowanceService: pt,
                        CacheService: yt,
                        DSProxyService: mt,
                        EthereumTokenService: Nt,
                        EventService: qt,
                        GasService: Vt,
                        MulticallService: ne,
                        NonceService: ae,
                        NullEventService: ie,
                        SmartContractService: se,
                        TimerService: pe,
                        TransactionManager: Ae,
                        Web3Service: Me
                    }
                }, Oe)) || this
            }
            return P(e, t), e
        }(e.ServiceProvider),
        Ie = {
            web3: {
                provider: {
                    type: "HTTP",
                    url: "http://localhost:2000"
                }
            },
            proxy: !0,
            smartContract: !0
        },
        Re = {
            web3: {
                provider: {
                    type: "INFURA",
                    network: "kovan"
                }
            }
        },
        Be = {
            web3: {
                provider: {
                    type: "INFURA",
                    network: "goerli"
                }
            }
        },
        Le = {
            web3: {
                provider: {
                    type: "HTTP"
                }
            }
        },
        Fe = {
            web3: {
                provider: {
                    type: "WEBSOCKET"
                }
            }
        },
        je = {
            web3: {
                provider: {
                    type: "INFURA",
                    network: "mainnet"
                }
            }
        },
        De = {
            web3: {
                provider: {
                    type: "BROWSER"
                }
            }
        },
        Ne = {
            web3: {
                provider: {
                    type: "INJECT"
                }
            }
        },
        Ue = function (t) {
            function e(e) {
                return t.call(this, "Cannot find configuration preset with name: " + e) || this
            }
            return P(e, t), e
        }(F(Error)),
        We = ["accounts", "allowance", "gas", "multicall", "nonce", "proxy", "smartContract", "timer", "token", "transactionManager", "web3"],
        Ge = ["accounts", "overrideMetamask", "plugins", "privateKey", "provider", "url"],
        He = ["plugins"],
        Ye = ["plugins"],
        ze = ["beforeCreate", "afterCreate", "addConfig"],
        Ke = function () {
            function t(t, e, n) {
                void 0 === e && (e = {}), void 0 === n && (n = {});
                for (var a, r = e.plugins, i = void 0 === r ? [] : r, s = j(e, He), o = U(i); !(a = o()).done;) {
                    var u = a.value,
                        c = u[0];
                    c.addConfig && Xe(s, c.addConfig(s, u[1]))
                }
                i && n && Xe(s, n);
                var p = function (t, e, n) {
                    void 0 === e && (e = {}), "string" != typeof t && (t = (e = t).preset);
                    var a = function (t) {
                            if ("object" == typeof t) return t;
                            var e;
                            switch (t) {
                                case "test":
                                    e = Ie;
                                    break;
                                case "sherpax":
                                case "http":
                                    e = Le;
                                    break;
                                case "ws":
                                case "websocket":
                                    e = Fe;
                                    break;
                                case "kovan":
                                    e = Re;
                                    break;
                                case "goerli":
                                    e = Be;
                                    break;
                                case "mainnet":
                                    e = je;
                                    break;
                                case "browser":
                                    e = De;
                                    break;
                                case "inject":
                                    e = Ne;
                                    break;
                                default:
                                    throw new Ue(t)
                            }
                            return f.merge({}, e)
                        }(t),
                        r = e.additionalServices || [];
                    ! function (t) {
                        var e = f.intersection(t, Ge);
                        if (e.length > 0) throw new Error("The following words cannot be used as service role names: " + e.join(", "))
                    }(r);
                    for (var i, s = U(We.concat(r)); !(i = s()).done;) {
                        var o = i.value;
                        o in e && (a[o] = o in a ? Ee(o, a[o], e[o], n) : e[o])
                    }
                    if (a.web3) {
                        var u = a.web3[1] || a.web3;
                        u.provider || (u.provider = {}), e.url && (u.provider.url = e.url), e.provider && f.merge(u.provider, e.provider)
                    }
                    return e.privateKey && (a.accounts = O({}, a.accounts, {
                        default: {
                            type: "privateKey",
                            key: e.privateKey
                        }
                    })), a
                }(t, s, Oe);
                this._container = new Pe(p).buildContainer();
                for (var y, d = U(i); !(y = d()).done;) {
                    var l = y.value,
                        m = l[0];
                    m.afterCreate && m.afterCreate(this, p, l[1])
                }!1 !== s.autoAuthenticate && this.authenticate()
            }
            var e = t.prototype;
            return e.authenticate = function () {
                return this._authenticatedPromise || (this._authenticatedPromise = this._container.authenticate()), this._authenticatedPromise
            }, e.addAccount = function () {
                var t;
                return (t = this.service("accounts")).addAccount.apply(t, arguments)
            }, e.currentAccount = function () {
                var t;
                return (t = this.service("accounts")).currentAccount.apply(t, arguments)
            }, e.listAccounts = function () {
                var t;
                return (t = this.service("accounts")).listAccounts.apply(t, arguments)
            }, e.useAccount = function () {
                var t;
                return (t = this.service("accounts")).useAccount.apply(t, arguments)
            }, e.useAccountWithAddress = function () {
                var t;
                return (t = this.service("accounts")).useAccountWithAddress.apply(t, arguments)
            }, e.currentAddress = function () {
                var t;
                return (t = this.service("accounts")).currentAddress.apply(t, arguments)
            }, e.on = function () {
                var t;
                return (t = this.service("event")).on.apply(t, arguments)
            }, e.getToken = function () {
                var t;
                return (t = this.service("token")).getToken.apply(t, arguments)
            }, e.currentProxy = function () {
                var t;
                return (t = this.service("proxy")).currentProxy.apply(t, arguments)
            }, e.watch = function () {
                var t;
                return (t = this.service("multicall")).watch.apply(t, arguments)
            }, e.latest = function () {
                var t;
                return (t = this.service("multicall")).latest.apply(t, arguments)
            }, e.openCdp = function () {
                throw new Error("\"openCdp\" is no longer available here. Add @makerdao/dai-plugin-scd, then use maker.service('cdp').openCdp")
            }, e.getCdp = function () {
                throw new Error("\"getCdp\" is no longer available here. Add @makerdao/dai-plugin-scd, then use maker.service('cdp').getCdp")
            }, e.getCdpIds = function () {
                throw new Error("\"getCdpIds\" is no longer available here. Add @makerdao/dai-plugin-scd, then use maker.service('cdp').getCdpIds")
            }, e.service = function (t, e) {
                if (void 0 === e && (e = !1), !e && !this._container.isAuthenticated && !["event"].includes(t)) throw new Error("Can't use service " + t + " before authenticate() has finished.");
                return this._container.service(t)
            }, t
        }();

    function Xe(t, e) {
        return f.mergeWith(t, e, (function (t, e, n) {
            return Array.isArray(t) && "abi" === n ? f.uniq(t) : Array.isArray(t) && "abi" !== n ? f.uniq(t.concat(e)) : void 0
        }))
    }
    var qe = function (t) {
        return t.map((function (t, e) {
            var n = Array.isArray(t) ? t : [t, {}],
                a = n[0],
                r = n[1];
            return "function" == typeof a && (a = {
                afterCreate: a
            }), y.strict(ze.some((function (t) {
                return f.has(a, t)
            })), "plugins[" + e + "] does not seem to be a plugin"), [a, r]
        }))
    };

    function Ve() {
        return (Ve = M(G.mark((function t() {
            var e, n, a, r, i, s, o, u, c, p, y, d, l, m, b, h = arguments;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        for (e = h.length, n = new Array(e), a = 0; a < e; a++) n[a] = h[a];
                        if (r = n[0], o = (s = void 0 === (i = n[1]) ? {} : i).plugins, u = j(s, Ye), c = f.cloneDeep(u), !o) {
                            t.next = 18;
                            break
                        }
                        s.plugins = qe(o), p = U(s.plugins);
                    case 7:
                        if ((y = p()).done) {
                            t.next = 18;
                            break
                        }
                        if (m = (d = y.value)[1], !(l = d[0]).beforeCreate) {
                            t.next = 16;
                            break
                        }
                        return t.t0 = Object, t.t1 = s, t.next = 14, l.beforeCreate(m);
                    case 14:
                        t.t2 = t.sent, t.t0.assign.call(t.t0, t.t1, t.t2);
                    case 16:
                        t.next = 7;
                        break;
                    case 18:
                        if (b = new Ke(r, s, c), !1 === s.autoAuthenticate) {
                            t.next = 22;
                            break
                        }
                        return t.next = 22, b.authenticate();
                    case 22:
                        return t.abrupt("return", b);
                    case 23:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }
    var Je = {
        create: function () {
            return Ve.apply(this, arguments)
        },
        currencies: null,
        QueryApi: null,
        utils: null
    };

    function Qe(t, e) {
        void 0 === e && (e = !0);
        var n = b.utils.toUtf8Bytes(t);
        if (n.length > 32) throw new Error("too long");
        return b.utils.hexlify(e ? b.utils.zeroPad(n, 32) : n)
    }

    function $e(t, e, n) {
        return t + new Array(e - t.length + 1).join(n || "0")
    }

    function Ze(t, e, n) {
        return tn.apply(this, arguments)
    }

    function tn() {
        return (tn = M(G.mark((function t(e, n, a) {
            var r, i;
            return G.wrap((function (t) {
                for (;;) switch (t.prev = t.next) {
                    case 0:
                        return t.next = 2, _(e, {
                            method: "POST",
                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                query: n,
                                variables: a
                            })
                        });
                    case 2:
                        return r = t.sent, t.next = 5, r.json();
                    case 5:
                        return k(i = t.sent.data, "error fetching data from " + e), t.abrupt("return", i);
                    case 9:
                    case "end":
                        return t.stop()
                }
            }), t)
        })))).apply(this, arguments)
    }
    for (var en in gt) Je[en] = gt[en];
    Je.currencies = gt, Je.QueryApi = {
        getQueryResponse: Ze
    }, Je.utils = {
        stringToBytes32: Qe
    };
    var nn = {
            getQueryResponse: Ze
        },
        an = {
            numberToBytes32: function (t) {
                var e = b.BigNumber.from(t);
                return b.utils.hexlify(b.utils.zeroPad(e, 32))
            },
            stringToBytes32: Qe,
            bytes32ToNumber: function (t) {
                return b.BigNumber.from(t).toNumber()
            },
            stringToBytes: function (t) {
                return k(!!t, "argument is falsy"), k("string" == typeof t, "argument is not a string"), "0x" + Buffer.from(t).toString("hex")
            },
            bytesToString: function (t) {
                return Buffer.from(t.replace(/^0x/, ""), "hex").toString().replace(/\x00/g, "")
            },
            padRight: $e,
            toHex: function (t, e) {
                for (var n = void 0 === e ? {} : e, a = n.with0x, r = void 0 === a || a, i = n.rightPadding, s = void 0 === i ? 64 : i, o = "", u = 0; u < t.length; u++) o += t.charCodeAt(u).toString(16);
                return s > 0 && (o = $e(o, s)), r ? "0x" + o : o
            }
        };
    t.ETH = At, t.MKR = Tt, t.PETH = kt, t.QueryApi = nn, t.USD = Mt, t.USD_ETH = Et, t.USD_MKR = Ct, t.USD_PETH = Ot, t.USD_WETH = Pt, t.WETH = St, t.currencies = gt, t.default = Je, t.getCurrency = xt, t.utils = an, Object.defineProperty(t, "__esModule", {
        value: !0
    })
}));
//# sourceMappingURL=dai.umd.production.min.js.map